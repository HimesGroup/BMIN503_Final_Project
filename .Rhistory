install.packages('tigris')
library(tigris)
sf.16 <- tracts('16')
all.2019.dailyPM2.5 <- readRDS("all2019dailyPM25.RDS")
str(all.2019.dailyPM2.5)
# Create a file of all unique combinations of geographic indicators for testing sites
testing.sites <- all.2019.dailyPM2.5 %>%
select(state_code, state,
county_code, county,
city, cbsa_code, cbsa,
site_number, local_site_name, site_address,
latitude, longitude) %>%
unique() %>%
arrange(state_code,county_code,site_number)
library(httr)
library(jsonlite)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tigris)
# Create a file of all unique combinations of geographic indicators for testing sites
testing.sites <- all.2019.dailyPM2.5 %>%
select(state_code, state,
county_code, county,
city, cbsa_code, cbsa,
site_number, local_site_name, site_address,
latitude, longitude) %>%
unique() %>%
arrange(state_code,county_code,site_number)
dim(testing.sites)
# 965 combinations
# Create a single unique ID column for site
testing.sites %>% select(site_number) %>% unique() %>% dim()
testing.sites %>% select(state_code,site_number) %>% unique() %>% dim()
testing.sites %>% select(state_code,county_code,site_number) %>% unique() %>% dim()
# Only 253 unique site numbers. 770 state-site combos.
# State + county + site number *is* unique (965 combos)
clean.2019.dailyPM2.5 <- all.2019.dailyPM2.5 %>%
mutate(site_id = paste0(state_code,county_code,site_number))
# Prepare for spatial merge. Create sf file from testing site coordinates
testing.sites.sf.points <- st_as_sf(testing.sites, coords = c('longitude','latitude'), crs = 4269)
library(httr)
library(jsonlite)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tigris)
library(sf)
# Prepare for spatial merge. Create sf file from testing site coordinates
testing.sites.sf.points <- st_as_sf(testing.sites, coords = c('longitude','latitude'), crs = 4269)
# Download census tract sf shapefiles, one state at a time.
# Perform spatial joins one state at a time to avoid having to build the national tract shapefile.
for (s in seq_along(lower48.codes)) {
newstate <- lower48.codes[s]
newtracts <- tracts(newstate)
newjoin <- st_join(newtracts, testing.sites.sf.points, join = st_contains, left=FALSE)
if (s==1){
testing.sites.tracts <- newjoin
} else {
testing.sites.tracts <- bind_rows(testing.sites.tracts,newjoin)
}
}
# Retrieve environment variables with EPA AQS API credentials
api.email <- Sys.getenv("EPA_AQS_EMAIL")
api.key   <- Sys.getenv("EPA_AQS_KEY")
# Function to create a data frame based on an API call
download.AQS <- function(whichData,customParams) {
rootpath <- "https://aqs.epa.gov/data/api/"
morepath <- paste0(rootpath,whichData)
fullParams <- append(list(email = api.email, key = api.key),customParams)
step1.json <- httr::GET(url = morepath, query = fullParams)
step2.parsed <- jsonlite::fromJSON(content(step1.json, "text"), simplifyVector = FALSE)
step3.df <- tibble(Data = step2.parsed$Data) %>% unnest_wider(.,Data)
return(step3.df)
}
# Fetch documentation for daily data summaries, state code list
dailyData.dictionary <- download.AQS("metaData/fieldsByService",list(service = "dailyData"))
list.states <- download.AQS("list/states",list())
# Omitting state codes other than 48 states + D.C.
list.states.lower48 <- list.states %>% filter(!(code %in% c("02","15","66","72","78","80","CC")))
list.states.lower48
lower48.codes <- as.vector(as.matrix(list.states.lower48[,1]))
# Prepare for spatial merge. Create sf file from testing site coordinates
testing.sites.sf.points <- st_as_sf(testing.sites, coords = c('longitude','latitude'), crs = 4269)
# Download census tract sf shapefiles, one state at a time.
# Perform spatial joins one state at a time to avoid having to build the national tract shapefile.
for (s in seq_along(lower48.codes)) {
newstate <- lower48.codes[s]
newtracts <- tracts(newstate)
newjoin <- st_join(newtracts, testing.sites.sf.points, join = st_contains, left=FALSE)
if (s==1){
testing.sites.tracts <- newjoin
} else {
testing.sites.tracts <- bind_rows(testing.sites.tracts,newjoin)
}
}
# Save file with testing sites <> census tract
saveRDS(testing.sites.tracts, file = "testing_sites_tracts.RDS")
