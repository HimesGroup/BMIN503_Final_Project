options(scipen = 999)
knitr::opts_chunk$set(echo = TRUE)
library("gridExtra")
install.packages("spDataLarge")
library("sf")
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp") %>%
select()
library("spData")
library("spData")
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp") %>%
select()
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp")
View(usa)
library("tidyverse")
library("dplyr")
datafr <- purrr::map_dfr(
.x = c(2008:2019),
.f = function(x){
purrr::map_dfr(
.x = c("B", "C", "D", "E"),
.f = function(x, y){
dat <- read.table(file = paste0("C:/Users/Deeksha Hegde/Downloads/BMIN503_Final_Project/USDA_Data/",y,"_col_",x,".txt"), header = TRUE, sep = "\t")
dat %>%
mutate(across(.cols = All_Other_Covered_Species:Total, .fns =~ as.numeric(str_remove_all(string = .x, ","))),
Year = y,
Column = x
)
}, y=x
)
}
)
#Checking if the data loaded is correct
datafr %>% count(Year, Column)
datafr <- mutate(datafr, pain.level = factor(Column, levels = c("B", "C", "D", "E"), labels = c(0, 1, 2, 3)))
data.total <- filter(datafr, State == "REPORT TOTAL")
#Total by year
data.total1 <- summarise(group_by(data.total, Year), Total = sum(Total))
ggplot(data = data.total1, aes(x = Year, y = Total)) + geom_line() + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks = seq(900000, 1300000, by = 100000), labels = seq(9, 13, 1)) + xlab(label = "Year") + ylab(label = "Total in hundred thousands") + ggtitle("Total number of animals vs. Year") +
theme(
plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
)
#Total by year and column
total.plot <- ggplot(data = data.total, aes(x = Year, y = Total, color = pain.level)) + geom_line() + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks = seq(100000, 700000, by = 100000), labels = seq(1, 7, 1)) + xlab(label = "Year") + ylab(label = "Total in hundred thousands") + ggtitle("Total number of animals vs. Year by Pain Levels") +
theme(
plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
)
total.plot
View(data.total1)
#Total by column by state
data.by.state <- datafr %>%
filter(State != "REPORT TOTAL") %>%
group_by(State, pain.level) %>%
summarise(Total = sum(Total))
data.by.state.total <- group_by(data.by.state, State) %>%
summarize(Total.all = sum(Total))
ggplot(data.by.state.total, aes(x = State, y = Total.all)) + geom_point(size = 4) +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_text(size = 10),
axis.text.x = element_text(size = 12, angle = 90, vjust = 0.5, hjust = 0.5),
axis.text.y = element_text(size = 10),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
)
ggplot(data.by.state, aes(x = State, y = Total, color = pain.level)) + geom_point(size = 4) +
theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
axis.title = element_text(size = 10),
axis.text.x = element_text(size = 12, angle = 90, vjust = 0.5, hjust = 0.5),
axis.text.y = element_text(size = 10),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)
)
View(data.by.state.total)
View(data.by.state)
View(data.by.state.total)
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp") %>%
mutate(stusab = State)
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp") %>%
mutate("stusab" = "State")
View(usa)
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp") %>%
mutate("stusab" = "State")
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp")
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp") %>%
mutate(stusab = "State")
View(usa)
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp") %>%
rename(stusab = State)
View(usa)
#usa <- us_states
usa <- st_read("C:/Users/Deeksha Hegde/Downloads/us-state-boundaries/us-state-boundaries.shp") %>%
rename(State = stusab)
View(usa)
View(usa)
head(usa)
View(usa)
to_map <- inner_join(usa, data.by.state.total, by = "State")
View(to_map)
View(data.by.state.total)
library(mapview)
mapview(to_map)
View(data.by.state.total)
library(leaflet)
leaflet(to_map) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(Total.all),
fillOpacity = 0.5, smoothFactor = 0.5, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
#addProviderTiles(providers$Stamen.Toner) %>%
#addProviderTiles(providers$Esri.NatGeoWorldMap)
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~Total.all,                 # variable to be passed to palette function
title = 'Total number of animals used',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()mapview(to_map)
library(mapview)
library(leaflet)
leaflet(to_map) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(Total.all),
fillOpacity = 0.5, smoothFactor = 0.5, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
#addProviderTiles(providers$Stamen.Toner) %>%
#addProviderTiles(providers$Esri.NatGeoWorldMap)
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~Total.all,                 # variable to be passed to palette function
title = 'Total number of animals used',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()mapview(to_map)
library(mapview)
library(leaflet)
leaflet(to_map) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(Total.all),
fillOpacity = 0.5, smoothFactor = 0.5, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
#addProviderTiles(providers$Stamen.Toner) %>%
#addProviderTiles(providers$Esri.NatGeoWorldMap)
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~Total.all,                 # variable to be passed to palette function
title = 'Total number of animals used',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
View(data.by.state.total)
library(mapview)
library(leaflet)
pu_message <- paste0(to_map$State,  # paste0 to append tract name with other relevant text
"<br>Number of animals used: ",       # <br> forces new line
# use round function to round continuous poverty rate to one decimal point
to_map$Total.all)
leaflet(to_map) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(Total.all),
fillOpacity = 0.5, smoothFactor = 0.5, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
#addProviderTiles(providers$Stamen.Toner) %>%
#addProviderTiles(providers$Esri.NatGeoWorldMap)
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~Total.all,                 # variable to be passed to palette function
title = 'Total number of animals used',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
library(mapview)
library(leaflet)
pal_fun <- colorNumeric("BuPu", NULL)
pu_message <- paste0(to_map$State,  # paste0 to append tract name with other relevant text
"<br>Number of animals used: ",       # <br> forces new line
# use round function to round continuous poverty rate to one decimal point
to_map$Total.all)
leaflet(to_map) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(Total.all),
fillOpacity = 0.5, smoothFactor = 0.5, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
#addProviderTiles(providers$Stamen.Toner) %>%
#addProviderTiles(providers$Esri.NatGeoWorldMap)
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~Total.all,                 # variable to be passed to palette function
title = 'Total number of animals used',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
library(mapview)
library(leaflet)
pal_fun <- colorNumeric("BuPu", NULL)
pu_message <- paste0(to_map$State,  # paste0 to append tract name with other relevant text
"<br>Number of animals used: ",       # <br> forces new line
# use round function to round continuous poverty rate to one decimal point
to_map$Total.all)
leaflet(to_map) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(Total.all),
fillOpacity = 1, smoothFactor = 0.8, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
#addProviderTiles(providers$Stamen.Toner) %>%
#addProviderTiles(providers$Esri.NatGeoWorldMap)
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~Total.all,                 # variable to be passed to palette function
title = 'Total number of animals used',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
library(mapview)
library(leaflet)
pal_fun <- colorNumeric("BuPu", NULL)
pu_message <- paste0(to_map$State,  # paste0 to append tract name with other relevant text
"<br>Number of animals used: ",       # <br> forces new line
# use round function to round continuous poverty rate to one decimal point
to_map$Total.all)
leaflet(to_map) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(Total.all),
fillOpacity = 0.8, smoothFactor = 0.5, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
#addProviderTiles(providers$Stamen.Toner) %>%
#addProviderTiles(providers$Esri.NatGeoWorldMap)
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~Total.all,                 # variable to be passed to palette function
title = 'Total number of animals used',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
