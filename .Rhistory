library(dplyr)
DE_res <- DE_res %>%
filter(!is.na(SYMBOL)) %>%
group_by(SYMBOL) %>%
arrange(P.Value) %>%
filter(row_number() == 1) %>%
data.frame()
gene_list <- DE_res$t
names(gene_list) <- DE_res$SYMBOL
gene_list <- sort(gene_list, decreasing = T)
fgseaRes <- fgsea(pathways = pathways, stats = gene_list, minSize = 15,
maxSize = 500, nperm = 10000, gseaParam = 1)
fgseaRes <- fgseaRes[order(fgseaRes$pval), ]
collapsedPathways <- collapsePathways(fgseaRes = fgseaRes[padj < 0.05],
pathways = pathways, stats = gene_list)
mainPathways <- fgseaRes[pathway %in% collapsedPathways$mainPathways] # keep results of independent pathways
head(mainPathways)
top_pathway <- mainPathways %>%
filter(padj < 0.05 & abs(NES) > 2) %>%
arrange(NES)
# convert pathways to factors where the levels are the same as pathway order
top_pathway$pathway <- factor(top_pathway$pathway, levels = top_pathway$pathway)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 0.8, position = position_dodge(width = 0.8), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
plotEnrichment(pathway = pathways[["REACTOME_INTERFERON_GAMMA_SIGNALING"]], stats = gene_list) +
labs(title="Reactome interferon gamma signaling")
top_pathway <- mainPathways %>%
filter(padj < 0.05 & abs(NES) > 2) %>%
arrange(NES)
# convert pathways to factors where the levels are the same as pathway order
top_pathway$pathway <- factor(top_pathway$pathway, levels = top_pathway$pathway)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 0.8, position = position_dodge(width = 0.8), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$treatment <- c(rep("medium", 4), rep("RV16", 4), rep("CSE", 4), rep("RV16_CSE", 4))
pData(raw.data)
boxplot(raw.data, col = "red", main = "Raw Probe Intensities")
print("There is no outlier")
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col = "blue", main = "RMA Expression Values")
design <- model.matrix(~ -1 + factor(GSE27973.rma$treatment))
colnames(design) <- levels(factor(GSE27973.rma$treatment))
design
#Fit a linear model with limma package. Expression data linked to outcome of a design matrix model (all the data)
fit <- lmFit(GSE27973.rma, design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment =medium-CSE,
levels = design)
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE27973.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
#Extract results for each gene by setting `num = Inf`
treatment_results <- topTable(fit2, coef = "treatment", adjust = "BH", num = Inf)
treatment_results <- treatment_results %>%
arrange(adj.P.Val)
head(treatment_results)
x <- 0
for(i in 1:nrow(treatment_results))
if(treatment_results[i,]$adj.P.Val < 0.05)
x <- x+1
x
print("There are 10102 probes that are significantly differentially expressed between the CSE and medium samples.")
#Create contrast groups of interest
GSE27973.all.contrast <- makeContrasts(treatment =medium-RV16_CSE-CSE-RV16,
levels = design)
GSE27973.all.contrast
new.fit <- contrasts.fit(fit, GSE27973.all.contrast)
new.fit <- eBayes(new.fit)
treatment_results <- topTable(new.fit, coef = "treatment", adjust = "BH", num = Inf)
treatment_results <- treatment_results %>%
arrange(desc(AveExpr))
head(treatment_results)
library(hgu133plus2.db)
treatment_results$ID = row.names(treatment_results)
treatment_results$SYMBOL <- sapply(treatment_results$ID,
function (x) mget(x, env = hgu133plus2SYMBOL,
ifnotfound = NA)[[1]])
head(treatment_results)
print("The top-randked differentially expressed probe is ANXA2, ID is 210427_x_at")
df_boxplot = data.frame(
expression = exprs(GSE27973.rma)["210427_x_at", ],
status = GSE27973.rma$treatment)
# read in txt file
write.table(treatment_results, "./GSE27973_DE_results.txt", row.names = F,
col.names = T, quote = F, sep = "\t")
# create a box-plot
ggplot(df_boxplot, aes(x = status, y = expression)) +
geom_boxplot(outlier.colour = NA, color = "grey18", fill = "lightblue") +
stat_boxplot(geom = "errorbar", color = "grey18") +
geom_jitter(size = 1, position = position_jitter(width = 0.3)) +
ggtitle("Expression Values for Probe 210427_x_at") +
xlab(" ") +
ylab("RMA Intensity") +
theme_bw() +
theme(legend.position = "none")
library(gplots)
# keep top 200 genes
top_results <- treatment_results[1:200, ]
top.eset <- GSE27973.rma[row.names(exprs(GSE27973.rma)) %in% row.names(top_results)]
status.colors <- unlist(lapply(GSE27973.rma$treatment,
function (x) {if (x == "medium") "lightpink" else if(x == "RV16") "lightblue" else if(x == "CSE") "lightgreen" else if(x == "RV16_CSE") "lightyellow"}))
heatmap.2(exprs(top.eset), col = viridis(256, option = "B"),
trace = "none", keysize = 1.5, key.title = NA,
ColSideColors = status.colors)
legend("right", legend =c("medium", "RV16","CSE","RV16_CSE"), fill= c("lightpink", "lightblue","lightgreen","lightyellow"))
library(fgsea)
kegg <- gmtPathways("./c2.cp.kegg.v7.4.symbols.gmt")
reactome <- gmtPathways("./c2.cp.reactome.v7.4.symbols.gmt")
pathways <- c(kegg, reactome)
DE_res <- read.table("./GSE27973_DE_results.txt", header = T, sep = "\t")
head(DE_res)
library(dplyr)
DE_res <- DE_res %>%
filter(!is.na(SYMBOL)) %>%
group_by(SYMBOL) %>%
arrange(P.Value) %>%
filter(row_number() == 1) %>%
data.frame()
gene_list <- DE_res$t
names(gene_list) <- DE_res$SYMBOL
gene_list <- sort(gene_list, decreasing = T)
fgseaRes <- fgsea(pathways = pathways, stats = gene_list, minSize = 15,
maxSize = 500, nperm = 10000, gseaParam = 1)
fgseaRes <- fgseaRes[order(fgseaRes$pval), ]
collapsedPathways <- collapsePathways(fgseaRes = fgseaRes[padj < 0.05],
pathways = pathways, stats = gene_list)
mainPathways <- fgseaRes[pathway %in% collapsedPathways$mainPathways] # keep results of independent pathways
head(mainPathways)
top_pathway <- mainPathways %>%
filter(padj < 0.05 & abs(NES) > 2) %>%
arrange(NES)
# convert pathways to factors where the levels are the same as pathway order
top_pathway$pathway <- factor(top_pathway$pathway, levels = top_pathway$pathway)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 0.8, position = position_dodge(width = 0.8), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 1, position = position_dodge(width = 1), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 5, position = position_dodge(width = 5), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
# convert pathways to factors where the levels are the same as pathway order
top_pathway$pathway <- factor(top_pathway$pathway, levels = top_pathway$pathway)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 5, position = position_dodge(width = 5), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 0.1, position = position_dodge(width = 0.1), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 2, position = position_dodge(width = 2), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
design <- model.matrix(~ -1 + factor(GSE27973.rma$treatment))
colnames(design) <- levels(factor(GSE27973.rma$treatment))
design
#Fit a linear model with limma package. Expression data linked to outcome of a design matrix model (all the data)
fit <- lmFit(GSE27973.rma, design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment =medium-CSE,
levels = design)
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE27973.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
#Extract results for each gene by setting `num = Inf`
treatment_results <- topTable(fit2, coef = "treatment", adjust = "BH", num = Inf)
treatment_results <- treatment_results %>%
arrange(adj.P.Val)
head(treatment_results)
x <- 0
for(i in 1:nrow(treatment_results))
if(treatment_results[i,]$adj.P.Val < 0.05)
x <- x+1
x
print("There are 10102 probes that are significantly differentially expressed between the CSE and medium samples.")
#Create contrast groups of interest
GSE27973.all.contrast <- makeContrasts(treatment =medium-RV16_CSE-CSE-RV16,
levels = design)
GSE27973.all.contrast
new.fit <- contrasts.fit(fit, GSE27973.all.contrast)
new.fit <- eBayes(new.fit)
treatment_results <- topTable(new.fit, coef = "treatment", adjust = "BH", num = Inf)
treatment_results <- treatment_results %>%
arrange(desc(AveExpr))
head(treatment_results)
library(hgu133plus2.db)
treatment_results$ID = row.names(treatment_results)
treatment_results$SYMBOL <- sapply(treatment_results$ID,
function (x) mget(x, env = hgu133plus2SYMBOL,
ifnotfound = NA)[[1]])
head(treatment_results)
print("The top-randked differentially expressed probe is ANXA2, ID is 210427_x_at")
library(gplots)
# keep top 200 genes
top_results <- treatment_results[1:200, ]
top.eset <- GSE27973.rma[row.names(exprs(GSE27973.rma)) %in% row.names(top_results)]
status.colors <- unlist(lapply(GSE27973.rma$treatment,
function (x) {if (x == "medium") "lightpink" else if(x == "RV16") "lightblue" else if(x == "CSE") "lightgreen" else if(x == "RV16_CSE") "lightyellow"}))
heatmap.2(exprs(top.eset), col = viridis(256, option = "B"),
trace = "none", keysize = 1.5, key.title = NA,
ColSideColors = status.colors)
legend("right", legend =c("medium", "RV16","CSE","RV16_CSE"), fill= c("lightpink", "lightblue","lightgreen","lightyellow"))
library(fgsea)
kegg <- gmtPathways("./c2.cp.kegg.v7.4.symbols.gmt")
reactome <- gmtPathways("./c2.cp.reactome.v7.4.symbols.gmt")
pathways <- c(kegg, reactome)
DE_res <- read.table("./GSE27973_DE_results.txt", header = T, sep = "\t")
head(DE_res)
library(dplyr)
DE_res <- DE_res %>%
filter(!is.na(SYMBOL)) %>%
group_by(SYMBOL) %>%
arrange(P.Value) %>%
filter(row_number() == 1) %>%
data.frame()
gene_list <- DE_res$t
names(gene_list) <- DE_res$SYMBOL
gene_list <- sort(gene_list, decreasing = T)
fgseaRes <- fgsea(pathways = pathways, stats = gene_list, minSize = 15,
maxSize = 500, nperm = 10000, gseaParam = 1)
fgseaRes <- fgseaRes[order(fgseaRes$pval), ]
collapsedPathways <- collapsePathways(fgseaRes = fgseaRes[padj < 0.05],
pathways = pathways, stats = gene_list)
mainPathways <- fgseaRes[pathway %in% collapsedPathways$mainPathways] # keep results of independent pathways
head(mainPathways)
top_pathway <- mainPathways %>%
filter(padj < 0.05 & abs(NES) > 2) %>%
arrange(NES)
# convert pathways to factors where the levels are the same as pathway order
top_pathway$pathway <- factor(top_pathway$pathway, levels = top_pathway$pathway)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 2, position = position_dodge(width = 2), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
fgseaRes <- fgsea(pathways = pathways, stats = gene_list, minSize = 15,
maxSize = 500, nperm = 500, gseaParam = 1)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
for (pkg in c("GEOquery", "oligo", "limma", "hgu133plus2.db", "pd.hg.u133.plus.2", "viridis", "fgsea")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg)
}
}
for (pkg in c("gplots")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
library(GEOquery)
library("dplyr")
if (!file.exists("./GSE27973_RAW.tar"))
getGEOSuppFiles("GSE27973")
untar("./GSE27973/GSE27973_RAW.tar", exdir = "./GSE27973/data")
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$treatment <- c(rep("medium", 1), rep("RV16", 1), rep("CSE", 1), rep("RV16_CSE", 1),rep("medium", 1), rep("RV16", 1), rep("CSE", 1), rep("RV16_CSE", 1),rep("medium", 1), rep("RV16", 1), rep("CSE", 1), rep("RV16_CSE", 1),rep("medium", 1), rep("RV16", 1), rep("CSE", 1), rep("RV16_CSE", 1))
pData(raw.data)
boxplot(raw.data, col = "red", main = "Raw Probe Intensities")
print("There is no outlier")
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col = "blue", main = "RMA Expression Values")
apply(log2(exprs(raw.data)), 2, median)
design <- model.matrix(~ -1 + factor(GSE27973.rma$treatment))
colnames(design) <- levels(factor(GSE27973.rma$treatment))
design
#Fit a linear model with limma package. Expression data linked to outcome of a design matrix model (all the data)
fit <- lmFit(GSE27973.rma, design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment =CSE-medium,
levels = design)
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE27973.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
#Extract results for each gene by setting `num = Inf`
treatment_results <- topTable(fit2, coef = "treatment", adjust = "BH", num = Inf)
#treatment_results <- treatment_results %>%
#arrange(adj.P.Val)
head(treatment_results)
x <- 0
for(i in 1:nrow(treatment_results))
if(treatment_results[i,]$adj.P.Val < 0.05)
x <- x+1
x
print("There are 25 probes that are significantly differentially expressed between the CSE and medium samples.")
library(hgu133plus2.db)
treatment_results$ID = row.names(treatment_results)
treatment_results$SYMBOL <- sapply(treatment_results$ID,
function (x) mget(x, env = hgu133plus2SYMBOL,
ifnotfound = NA)[[1]])
head(treatment_results)
print("The top-randked differentially expressed probe is 201468_s_at, it correspond to NQO1 gene. There are 3 probes corresponding to this gene")
library("ggplot2")
df_boxplot = data.frame(
expression = exprs(GSE27973.rma)["201468_s_at", ],
status = GSE27973.rma$treatment)
# read in txt file
write.table(treatment_results, "./GSE27973_DE_results.txt", row.names = F,
col.names = T, quote = F, sep = "\t")
# create a box-plot
ggplot(df_boxplot, aes(x = status, y = expression)) +
geom_boxplot(outlier.colour = NA, color = "grey18", fill = "lightblue") +
stat_boxplot(geom = "errorbar", color = "grey18") +
geom_jitter(size = 1, position = position_jitter(width = 0.3)) +
ggtitle("Expression Values for Probe 201468_s_at") +
xlab(" ") +
ylab("RMA Intensity") +
theme_bw() +
theme(legend.position = "none")
library(gplots)
# keep top 200 genes
top_results <- treatment_results[1:200, ]
top.eset <- GSE27973.rma[row.names(exprs(GSE27973.rma)) %in% row.names(top_results)]
status.colors <- unlist(lapply(GSE27973.rma$treatment,
function (x) {if (x == "medium") "lightpink" else if(x == "RV16") "lightblue" else if(x == "CSE") "lightgreen" else if(x == "RV16_CSE") "lightyellow"}))
heatmap.2(exprs(top.eset), col = viridis(256, option = "B"),
trace = "none", keysize = 1.5, key.title = NA,
ColSideColors = status.colors)
legend("bottomright", legend =c("medium", "RV16","CSE","RV16_CSE"), fill= c("lightpink", "lightblue","lightgreen","lightyellow"))
library(fgsea)
kegg <- gmtPathways("./c2.cp.kegg.v7.4.symbols.gmt")
reactome <- gmtPathways("./c2.cp.reactome.v7.4.symbols.gmt")
pathways <- c(kegg, reactome)
DE_res <- read.table("./GSE27973_DE_results.txt", header = T, sep = "\t")
head(DE_res)
library(dplyr)
DE_res <- DE_res %>%
filter(!is.na(SYMBOL)) %>%
group_by(SYMBOL) %>%
arrange(P.Value) %>%
filter(row_number() == 1) %>%
data.frame()
gene_list <- DE_res$t
names(gene_list) <- DE_res$SYMBOL
gene_list <- sort(gene_list, decreasing = T)
fgseaRes <- fgsea(pathways = pathways, stats = gene_list, minSize = 15,
maxSize = 500, nperm = 1000, gseaParam = 1)
fgseaRes <- fgseaRes[order(fgseaRes$pval), ]
collapsedPathways <- collapsePathways(fgseaRes = fgseaRes[padj < 0.05],
pathways = pathways, stats = gene_list)
mainPathways <- fgseaRes[pathway %in% collapsedPathways$mainPathways] # keep results of independent pathways
head(mainPathways)
top_pathway <- mainPathways %>%
filter(padj < 0.05 & abs(NES) > 2) %>%
arrange(NES)
# convert pathways to factors where the levels are the same as pathway order
top_pathway$pathway <- factor(top_pathway$pathway, levels = top_pathway$pathway)
ggplot(top_pathway, aes(y = NES, x = pathway)) +
geom_bar(width = 0.8, position = position_dodge(width = 0.8), stat = "identity", fill = "blue") +
coord_flip() +
theme_bw() +
theme(
axis.title.y = element_blank()
)
plotEnrichment(pathway = pathways[["REACTOME_INTERFERON_GAMMA_SIGNALING"]], stats = gene_list) +
labs(title="Reactome interferon gamma signaling")
top_pathway %>%
filter(pathway == "REACTOME_INTERFERON_GAMMA_SIGNALING") %>%
dplyr::select(leadingEdge) %>%
unlist() %>%
unname()
print("medium and RV16 are clustered together whereas CSE and RV16_CSE are clustered together")
plotEnrichment(pathway = pathways[["REACTOME_ARACHIDONIC_ACID_METABOLISM"]], stats = gene_list) +
labs(title="REACTOME_ARACHIDONIC_ACID_METABOLISM")
top_pathway %>%
filter(pathway == "REACTOME_ARACHIDONIC_ACID_METABOLISM") %>%
dplyr::select(leadingEdge) %>%
unlist() %>%
unname()
print("There are total 20 genes which are listed above")
options(width = 400)
install.packages("covid19.analytics")
library("covid19.analytics")
library("dplyr")
# get the data of confirmed cases globally from dataset
covid19.confirmed.cases <- covid19.data('ts-confirmed')
covid19.confirmed.cases_us <- covid19.confirmed.cases %>%
filter(Country.Region == "US")
covid19.confirmed.cases_us
# show the trend of increasing number of confirmed cases
tots.per.location(covid19.confirmed.cases_us)
# get the growth rate of cases in the US.(Total growth )
TS.data <- covid19.data("ts-confirmed")
growth.rate(TS.data, geo.loc="US")
# get the growth rate of cases in the US.(comparing different regions in the US)
TSconfirmed.data <- covid19.data("ts-confirmed")
state = c("PENNSYLVANIA")
growth.rate(TSconfirmed.data, geo.loc=c("US","CHINA"))
# get the COVID19 testing data
c19.testing.data <- covid19.testing.data()
head(c19.testing.data)
# get the COVID19 vaccination data
c19.vacc.data <- covid19.vaccination()
head(c19.vacc.data)
options(width = 400)
install.packages("covid19.analytics")
library("covid19.analytics")
library("dplyr")
# get the data of confirmed cases globally from dataset
covid19.confirmed.cases <- covid19.data('ts-confirmed')
covid19.confirmed.cases_us <- covid19.confirmed.cases %>%
filter(Country.Region == "US")
covid19.confirmed.cases_us
# install the covid19 package in R
install.packages("COVID19")
# get the library of covid19 data
library("COVID19")
# get the covid19 data by US and for each state
covid19.us.state <- covid19(c("US"),level=3)
covid19.us.state
# get the date; confirmed cases and state column from the dataframe
covid19.confirmed.death <- covid19.us.state[, c("date","confirmed","deaths","administrative_area_level_2")]
# sort data
covid19.confirmed.death <- covid19.confirmed.death %>%
arrange(administrative_area_level_2) %>%
rename(state=administrative_area_level_2)
# get the growth rate of cases in the US.(Total growth )
TS.data <- covid19.data("ts-confirmed")
library("covid19.analytics")
library("dplyr")
# get the data of confirmed cases globally from dataset
covid19.confirmed.cases <- covid19.data('ts-confirmed')
covid19.confirmed.cases_us <- covid19.confirmed.cases %>%
filter(Country.Region == "US")
covid19.confirmed.cases_us
# show the trend of increasing number of confirmed cases
tots.per.location(covid19.confirmed.cases_us)
# get the growth rate of cases in the US.(Total growth )
TS.data <- covid19.data("ts-confirmed")
growth.rate(TS.data, geo.loc="US")
# get the growth rate of cases in the US.(comparing different regions in the US)
TSconfirmed.data <- covid19.data("ts-confirmed")
state = c("PENNSYLVANIA")
growth.rate(TSconfirmed.data, geo.loc=c("US","CHINA"))
# get the COVID19 testing data
c19.testing.data <- covid19.testing.data()
head(c19.testing.data)
# get the COVID19 vaccination data
c19.vacc.data <- covid19.vaccination()
head(c19.vacc.data)
tots.per.location(covid19.confirmed.cases, geo.loc="US")
# install the covid19 package in R
install.packages("COVID19")
# get the library of covid19 data
library("COVID19")
# get the covid19 data by US and for each state
covid19.us.state <- covid19(c("US"),level=3)
covid19.us.state
# get the date; confirmed cases and state column from the dataframe
covid19.confirmed.death <- covid19.us.state[, c("date","confirmed","deaths","administrative_area_level_2")]
# sort data
covid19.confirmed.death <- covid19.confirmed.death %>%
arrange(administrative_area_level_2) %>%
rename(state=administrative_area_level_2)
# get the covid19 data by US and for each state
covid19.us.state <- covid19(c("US"),level=3)
covid19.us.state
# get the date; confirmed cases and state column from the dataframe
covid19.confirmed.death <- covid19.us.state[, c("date","confirmed","deaths","administrative_area_level_2")]
# sort data
covid19.confirmed.death <- covid19.confirmed.death %>%
arrange(administrative_area_level_2) %>%
rename(state=administrative_area_level_2)
