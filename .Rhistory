theme(legend.position = "bottom")
map_natl_OP_18b_NE<-ggplot(to_map_northeast) +
geom_sf(aes(fill = OP_18b), lwd=0, colour="white") +
geom_sf_label(aes(label = State)) +
coord_sf() +
my_theme() +
scale_fill_viridis(discrete=FALSE, name = "Time (mins)", option = "mako", direction = -1,
limit = range(prev_min(to_map_natl$OP_18b), prev_max(to_map_natl$OP_18b))) +
labs(subtitle= "Northeast") +
theme(legend.position = "none")
lay <- rbind(c(1,1,1,2,2),
c(1,1,1,2,2))
grid.arrange(map_natl_OP_18b, map_natl_OP_18b_NE, layout_matrix = lay)
View(tec_hosp)
install.packages('tidygeocoder')
library(tidygeocoder)
View(tec_hosp)
View(tec_hosp)
View(tec_hosp)
View(tec_hosp)
lat_longs <- tec.hospital %>% mutate(addr=paste0(Address,", ",City, ", ",State," ,",ZIP.Code))
lat_longs <- tec_hosp %>% mutate(addr=paste0(Address,", ",City, ", ",State," ,",ZIP.Code))
View(lat_longs)
tec_hosp_addr <- tec_hosp %>% mutate(addr=paste0(Address,", ",City, ", ",State," ",ZIP.Code))
View(tec_hosp_addr)
tec_hosp_addr <- tec_hosp %>% mutate(addr=paste0(Address,", ",City, ", ",State," ",ZIP.Code)) %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
tec_hosp_addr <- tec_hosp %>% mutate(addr=paste0(Address,", ",City, ", ",State," ",ZIP.Code)) %>%
geocode(addr, method = 'census', lat = latitude , long = longitude)
View(tec_hosp_addr)
View(tec_hosp_addr)
httr::GET("https://api.census.gov/data/2017/acs/acs1?get=NAME,group(B01001)&for=us:1")
tec_hosp_addr <- tec_hosp %>% mutate(addr=paste0(Address,", ",City, ", ",State," ",ZIP.Code)) %>%
geocode(addr, method = 'census', lat = latitude , long = longitude)
tec_hosp_addr <- tec_hosp %>% mutate(addr=paste0(Address,", ",City, ", ",State," ",ZIP.Code)) %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
tec_hosp_addr <- tec_hosp %>% mutate(addr=paste0(Address,", ",City, ", ",State," ",ZIP.Code)) %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
View(tec_hosp)
View(state_vars)
View(usa)
state.x77
#Variables to investigate
#varlist <- c("OP_18c")
varlist <- c("OP_18b","OP_18c","OP_2","OP_23","OP_3b","tot_pop_15")
state_vars <- tec_state %>%
dplyr::select(NAME,State,Measure.ID,Score) %>%
filter(Measure.ID %in% varlist) %>%
drop_na() %>%
reshape(idvar = c("State","NAME"), timevar = "Measure.ID", direction = "wide", varying=varlist)
View(state_vars)
#Variables to investigate
#varlist <- c("OP_18c")
varlist <- c("OP_18b","OP_18c","OP_2","OP_23","OP_3b","tot_pop_15")
View(usa)
#Variables to investigate
#varlist <- c("OP_18c")
varlist <- c("OP_18b","OP_18c","OP_2","OP_23","OP_3b","total_pop_15")
state_vars <- tec_state %>%
dplyr::select(NAME,State,Measure.ID,Score) %>%
filter(Measure.ID %in% varlist) %>%
drop_na() %>%
reshape(idvar = c("State","NAME"), timevar = "Measure.ID", direction = "wide", varying=varlist)
View(state_vars)
#Variables to investigate
#varlist <- c("OP_18c")
varlist <- c("OP_18b","OP_18c","OP_2","OP_23","OP_3b","total_pop_15")
state_vars <- tec_state %>%
dplyr::select(NAME,State,Measure.ID,Score) %>%
filter(Measure.ID %in% varlist) %>%
drop_na() %>%
reshape(idvar = c("State","NAME"), timevar = "Measure.ID", direction = "wide", varying=varlist)
View(tec_state)
View(tec_hosp)
View(tec_natl)
#Variables to investigate
#varlist <- c("OP_18c")
varlist <- c("OP_18b","OP_18c","OP_2","OP_23","OP_3b")
#Variables to investigate
#varlist <- c("OP_18c")
varlist <- c("OP_18b","OP_18c","OP_2","OP_23","OP_3b")
state_vars <- tec_state %>%
dplyr::select(NAME,State,Measure.ID,Score) %>%
filter(Measure.ID %in% varlist) %>%
drop_na() %>%
reshape(idvar = c("State","NAME"), timevar = "Measure.ID", direction = "wide", varying=varlist)
View(state_vars)
usa <- us_states
to_map_natl<- merge(usa,state_vars, stringsAsFactors=FALSE)
str(to_map_natl) #check
View(to_map_natl)
lay <- rbind(c(1,1,1,2,2),
c(1,1,1,2,2),
c(1,1,1,NA,NA))
grid.arrange(map_natl_OP_18b, map_natl_OP_18b_NE, layout_matrix = lay)
lay <- rbind(c(1,1,1,2),
c(1,1,1,2),
c(1,1,1,NA))
grid.arrange(map_natl_OP_18b, map_natl_OP_18b_NE, layout_matrix = lay)
lay <- rbind(c(1,1,1,NA),
c(1,1,1,2),
c(1,1,1,2))
grid.arrange(map_natl_OP_18b, map_natl_OP_18b_NE, layout_matrix = lay)
View(to_map_natl)
View(tec_hosp)
View(tec_state)
View(tec_state)
View(tec_natl)
View(tec_state)
View(tec_natl)
View(tec_state)
View(tec_state)
#Subset to PA
to_map_pa <- to_map_natl %>% filter(State=="PA")
View(to_map_pa)
View(to_map_natl)
#Subset to Northeast
to_map_northeast<- to_map_natl %>% filter(REGION=="Norteast")
View(to_map_northeast)
View(tec_hosp_pa)
summary(to_map_northeast)
rowMeans(to_map_northeast)
Stats <- summarize_all(to_map_northeast,mean)
View(Stats)
View(to_map_northeast)
forgraph_all <- rbind(to_map_northeast,summarize_all(to_map_northeast,mean))
View(forgraph_all)
View(to_map_northeast)
View(forgraph_all)
View(to_map_natl)
View(tec_natl)
natl_vars <- tec_natl %>%
dplyr::select(NAME,State,Measure.ID,Score) %>%
filter(Measure.ID %in% varlist) %>%
drop_na() %>%
reshape(idvar = c("State","NAME"), timevar = "Measure.ID", direction = "wide", varying=varlist)
View(tec_natl)
natl_vars <- tec_natl %>%
dplyr::select(Measure.ID,Score) %>%
filter(Measure.ID %in% varlist) %>%
drop_na() %>%
reshape(timevar = "Measure.ID", direction = "wide", varying=varlist)
View(tec_natl)
natl_vars <- tec_natl %>%
dplyr::select(Measure.ID,Score) %>%
filter(Measure.ID %in% varlist) %>%
reshape( timevar = "Measure.ID", direction = "wide", varying=varlist)
natl_vars <- tec_natl %>%
dplyr::select(Measure.ID,Score) %>%
filter(Measure.ID %in% varlist) %>%
reshape(idvar="", timevar = "Measure.ID", direction = "wide", varying=varlist)
View(tec_natl)
natl_vars <- tec_natl %>%
dplyr::select(Measure.ID,Score) %>%
mutate(NAME="US National")
View(natl_vars)
natl_vars <- tec_natl %>%
dplyr::select(Measure.ID,Score) %>%
mutate(NAME="US National") %>%
filter(Measure.ID %in% varlist) %>%
reshape(idvar=NAME, timevar = "Measure.ID", direction = "wide", varying=varlist)
natl_vars <- tec_natl %>%
dplyr::select(Measure.ID,Score) %>%
mutate(NAME="US National") %>%
filter(Measure.ID %in% varlist) %>%
reshape(idvar="NAME", timevar = "Measure.ID", direction = "wide", varying=varlist)
View(natl_vars)
forgraph_all <- rbind(to_map_northeast,summarize_all(to_map_northeast,mean), natl_vars)
View(forgraph_all)
natl_vars <- tec_natl %>%
dplyr::select(Measure.ID,Score) %>%
mutate(NAME="US National") %>%
filter(Measure.ID %in% varlist) %>%
reshape(idvar="NAME", timevar = "Measure.ID", direction = "wide", varying=varlist)
View(forgraph_all)
#Subset to Northeast
to_map_northeast<- to_map_natl %>% filter(REGION=="Norteast")  %>%
filter(Measure.ID %in% varlist)
View(to_map_natl)
View(to_map_natl)
#Subset to Northeast
to_map_northeast<- to_map_natl %>%
filter(REGION=="Norteast")  %>%
select(%in% varlist)
#Subset to Northeast
to_map_northeast<- to_map_natl %>%
filter(REGION=="Norteast")  %>%
select(varlist)
#Subset to Northeast
to_map_northeast<- to_map_natl %>%
filter(REGION=="Norteast")
View(to_map_northeast)
View(to_map_northeast)
#Subset to Northeast
northeast<- to_map_natl %>%
filter(REGION=="Norteast") %>%
select(NAME,OP_18b,OP_18c,OP_2,OP_23,OP_3b)
#Subset to Northeast
northeast<- to_map_natl %>%
filter(REGION=="Norteast") %>%
dyplr::select(NAME,OP_18b,OP_18c,OP_2,OP_23,OP_3b)
#Subset to Northeast
northeast<- to_map_natl %>%
filter(REGION=="Norteast") %>%
dpylr::select(NAME,OP_18b,OP_18c,OP_2,OP_23,OP_3b)
#Subset to Northeast
northeast<- to_map_natl %>%
filter(REGION=="Norteast") %>%
dplyr::select(NAME,OP_18b,OP_18c,OP_2,OP_23,OP_3b)
View(northeast)
View(northeast)
#Subset to Northeast
northeast<- to_map_natl %>%
filter(REGION=="Norteast") %>%
dplyr::select(NAME,OP_18b,OP_18c,OP_2,OP_23,OP_3b) %>% as.data.frame()
View(northeast)
#Subset to Northeast
northeast<- as.data.frame(to_map_natl) %>%
filter(REGION=="Norteast") %>%
dplyr::select(NAME,OP_18b,OP_18c,OP_2,OP_23,OP_3b)
View(northeast)
natl_vars <- tec_natl %>%
dplyr::select(Measure.ID,Score) %>%
mutate(NAME="US National") %>%
filter(Measure.ID %in% varlist) %>%
reshape(idvar="NAME", timevar = "Measure.ID", direction = "wide", varying=varlist)
forgraph_all <- rbind(to_map_northeast,summarize_all(to_map_northeast,mean), natl_vars)
View(natl_vars)
View(northeast)
forgraph_all <- rbind(to_map_northeast,summarize_all(northeast,mean), natl_vars)
forgraph_all <- rbind(to_map_northeast, natl_vars)
forgraph_all <- rbind(to_map_northeast,summarize_all(northeast,mean))
summary<-summarize_all(northeast,mean)
View(summary)
View(summary)
View(northeast)
summary<-summarize_all(northeast,mean(na.rm = TRUE))
summary<-summarize_all(northeast,mean,na.rm = TRUE))
summary<-summarize_all(northeast,mean,na.rm = TRUE)
View(summary)
summary<-
forgraph_all <- rbind(to_map_northeast,summarize_all(northeast,mean),summarize_all(northeast,mean,na.rm = TRUE))
forgraph_all <- rbind(to_map_northeast,summarize_all(northeast,mean),summarize_all(northeast,mean,na.rm = TRUE))
summary<-summarize_all(northeast,mean,na.rm = TRUE)
View(summary)
summary<-summarize_all(northeast,mean,na.rm = TRUE) %>% mutate(NAME="Northeast States")
View(summary)
forgraph_all <- rbind(northeast,summary,natl_vars)
View(forgraph_all)
#Subset to Northeast
fg_northeast<- as.data.frame(to_map_natl) %>%
filter(REGION=="Norteast") %>%
dplyr::select(NAME,OP_18b,OP_18c,OP_2,OP_23,OP_3b)
summary<-summarize_all(fg_northeast,mean,na.rm = TRUE) %>% mutate(NAME="Northeast States")
fg_ne_sum<-summarize_all(fg_northeast,mean,na.rm = TRUE) %>% mutate(NAME="Northeast States")
#Plot graphs
ggplot(forgraph_all, aes(x = NAME, y = OP_18b, fill = OP_18c)) +
geom_col(position = position_dodge()) +
scale_fill_manual(values = c("#3db5ff", "#0099f9"))
#Plot graphs
ggplot(forgraph_all, aes(x = NAME, y = OP_18b, fill = OP_18c)) +
geom_col(position = position_dodge()) +
scale_fill_manual(values = c("#3db5ff", "#0099f9")) +
geom_text(aes(label = profit), position = position_dodge(0.9), vjust = 2, size = 4, color = "#ffffff")
#Plot graphs
ggplot(forgraph_all, aes(x = NAME, y = OP_18b, fill = OP_18c)) +
geom_col(position = position_dodge()) +
scale_fill_manual(values = c("#3db5ff", "#0099f9")) +
geom_text(aes(label = OP_18b), position = position_dodge(0.9), vjust = 2, size = 4, color = "#ffffff")
View(forgraph_all)
View(forgraph_all)
#Plot graphs
ggplot(forgraph_all, aes(x=NAME, y= OP_18b)) +
geom_violin()
#Plot graphs
ggplot(forgraph_all, aes(as.factor(NAME), OP_18b)) +
geom_bar(stat = "identity") +
labs(y = "Percentage correct", x = "Categorical variable")
#Plot graphs
test<-ggplot(forgraph_all, aes(as.factor(NAME), OP_18b)) +
geom_bar(stat = "identity") +
labs(y = "Percentage correct", x = "Categorical variable")
test
#Plot graphs
test<-ggplot(forgraph_all, aes(as.factor(NAME), OP_18b)) +
geom_bar(stat = "identity")
#Plot graphs
ggplot(forgraph_all, aes(as.factor(NAME), OP_18b)) +
geom_bar(stat = "identity")
View(forgraph_all)
#Plot graphs
ggplot(forgraph_all, aes(as.factor(NAME), OP_18b)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = 44, linetype = 2, colour = "grey20") +
geom_text(x = 45, y = 4, label = "majority of\nparliament",
hjust = 0, size = 11 * 0.8 / .pt, colour = "grey20") +
geom_col() +
scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
scale_y_discrete(limits = rev) +
labs(x = "Number of seats won",
y = "Party",
title = "Victorian election 2018 lower house results",
caption = "Data source: Victorian Electoral Commission") +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
legend.position = "off")
#Plot graphs
ggplot(forgraph_all, aes(as.factor(NAME), OP_18b)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = 44, linetype = 2, colour = "grey20") +
geom_text(x = 45, y = 4, label = "majority of\nparliament",
hjust = 0, size = 11 * 0.8 / .pt, colour = "grey20") +
geom_col() +
scale_y_discrete(limits = rev) +
labs(x = "Number of seats won",
y = "Party",
title = "Victorian election 2018 lower house results",
caption = "Data source: Victorian Electoral Commission") +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
legend.position = "off")
#Plot graphs
ggplot(forgraph_all, aes(as.factor(NAME), OP_18b)) +
geom_bar(stat = "identity")
#Plot graphs
ggplot(forgraph_all, aes(as.factor(NAME), OP_18b, fill=OP_18b)) +
geom_bar(stat = "identity")
#Plot graphs
ggplot(forgraph_all, aes(as.factor(NAME), OP_18b, fill=OP_18c)) +
geom_bar(stat = "identity")
#Plot graphs
ggplot(forgraph_all, aes(as.factor(NAME), OP_18b, fill=OP_18b)) +
geom_bar(stat = "identity")
#Plot graphs
ggplot(forgraph_all, aes(as.factor(NAME), OP_18b, fill=OP_18c)) +
geom_bar(stat = "identity",position = "dodge")
#Plot graphs
ggplot(forgraph_all, aes(x=as.factor(NAME), y=OP_18b, fill=OP_18c)) +
geom_bar(stat = "identity",position = "dodge")
#Plot graphs
ggplot(forgraph_all, aes(x=as.factor(NAME), y=OP_18b)) +
geom_bar(stat = "identity")
#Plot graphs
p<-ggplot(forgraph_all, aes(x=as.factor(NAME), y=OP_18b)) +
geom_bar(stat = "identity")
p + coord_flip()
#Plot graphs
p<-ggplot(forgraph_all, aes(x=as.factor(NAME), y=OP_18b)) +
geom_bar(stat = "identity") +
scale_y_continuous(name="Average Trip Duration (in seconds)")
p + coord_flip()
require(knitr)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
rm(list = ls())
graphics.off()
pacman::p_load(readxl, plyr, dplyr, mice, knitr, magrittr, tableone, data.table,reshape, kableExtra, broom, stringr, rgenoud, tidyverse, Hmisc, ggpubr, epitools, survey, lubridate, HardyWeinberg, sjPlot, sjlabelled, sjmisc, ggplot2, gridExtra,stargazer,remotes,janitor, epiR,feather,data.table,tidyverse)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
for (pkg in c("GEOquery", "oligo", "limma", "hgu133plus2.db", "pd.hg.u133.plus.2", "viridis", "fgsea")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg)
}
}
for (pkg in c("gplots")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
library(GEOquery)
if (!file.exists("./GSE27973/GSE27973_RAW.tar"))
getGEOSuppFiles("GSE27973")
untar("./GSE27973/GSE27973_RAW.tar", exdir = "./GSE27973/data")
library(oligo)
library(GEOquery)
library(oligo)
library(oligo)
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
raw.data <- read.celfiles(celFiles)
install.packages("oligo")
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
library(oligo)
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
detach("package:raster", unload = TRUE)
library(raster)
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
library(oligo)
detach("package:HardyWeinberg", unload = TRUE)
library(oligo)
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$donor <- c(rep("Donor 1", 4), rep("Donor 2", 8), rep("Donor 3", 12), rep("Donor4", 16))
pData(raw.data)$donor <- c(rep("Donor 1", 4), rep("Donor 2", 4), rep("Donor 3", 4), rep("Donor4", 4))
pData(raw.data)
pData(raw.data)$treatment[seq(from = 1, to = 40, by = 4),1] <- "medium"
pData(raw.data)$treatment[seq(from = 1, to = 16, by = 4),1] <- "medium"
pData(raw.data)$treatment[seq(from = 1, by = 4),1] <- "medium"
pData(raw.data)$treatment[seq(from = 1, by = 4)] <- "medium"
pData(raw.data)
pData(raw.data)$treatment[seq(from = 1, to =16, by = 4)] <- "medium"
pData(raw.data)
pData(raw.data)$treatment[seq(from = 1, to = 16, by = 5)] <- "medium"
pData(raw.data)
treatment<-c("medium","RV16","CSE","RV16+CSE")
View(raw.data)
merge(raw.data,treatment)
treatment<-c(rep("medium","RV16","CSE","RV16+CSE"),4)
pData(raw.data)$treatment<-c(rep("medium","RV16","CSE","RV16+CSE"),4)
pData(raw.data)$treatment<-c(rep("medium","RV16","CSE","RV16+CSE",4))
pData(raw.data)$treatment<-c(rep(c("medium","RV16","CSE","RV16+CSE"),4))
pData(raw.data)
boxplot(raw.data, col = "red", main = "Raw Probe Intensities")
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col = "blue", main = "RMA Expression Values")
apply(log2(exprs(raw.data)), 2, median)
GSE27973.qc <- raw.data[ , !sampleNames(raw.data) %in% "GSM692118.CEL.gz"]
GSE27973.qc.rma <- rma(GSE27973.qc)
boxplot(GSE27973.qc.rma, col = "purple", main = "RMA Expression Values without Outlier")
apply(log2(exprs(raw.data)), 2, median)
design <- model.matrix(~ -1 + factor(GSE27973.qc.rma$treatment))
colnames(design) <- levels(factor(GSE27973.qc.rma$treatment))
design
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col = "blue", main = "RMA Expression Values")
apply(log2(exprs(raw.data)), 2, median)
#GSE27973.qc <- raw.data[ , !sampleNames(raw.data) %in% "GSM692118.CEL.gz"]
GSE27973.qc.rma <- rma(GSE27973.qc)
#GSE27973.qc <- raw.data[ , !sampleNames(raw.data) %in% "GSM692118.CEL.gz"]
GSE27973.qc.rma <- rma(GSE27973.qc)
boxplot(GSE27973.qc.rma, col = "purple", main = "RMA Expression Values without Outlier")
#GSE27973.qc <- raw.data[ , !sampleNames(raw.data) %in% "GSM692118.CEL.gz"]
GSE27973.qc.rma <- rma(GSE27973.qc)
design
#GSE27973.qc <- raw.data[ , !sampleNames(raw.data) %in% "GSM692118.CEL.gz"]
GSE27973.qc.rma <- rma(GSE27973.qc)
design <- model.matrix(~ -1 + factor(GSE27973.qc.rma$treatment))
colnames(design) <- levels(factor(GSE27973.qc.rma$treatment))
design
GSE27973.qc <- raw.data
GSE27973.qc <- raw.data
GSE27973.qc.rma <- rma(GSE27973.qc)
design <- model.matrix(~ -1 + factor(GSE27973.qc.rma$treatment))
colnames(design) <- levels(factor(GSE27973.qc.rma$treatment))
design
#Fit a linear model with limma package. Expression data linked to outcome of a design matrix model
fit <- lmFit(GSE27973.qc.rma, design)
library(limma)
#Fit a linear model with limma package. Expression data linked to outcome of a design matrix model
fit <- lmFit(GSE27973.qc.rma, design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(CSEonly = CSE - medium,
levels = design)
#Fit a linear model with limma package. Expression data linked to outcome of a design matrix model
fit <- lmFit(GSE27973.qc.rma, design)
View(fit)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment = CSE - medium,
levels = design)
pData(raw.data)
pData(raw.data)$donor <- c(rep("Donor 1", 4), rep("Donor 2", 4), rep("Donor 3", 4), rep("Donor4", 4))
pData(raw.data)$treatment<-c(rep(c("medium","RV16","CSE","RV16_CSE"),4))
pData(raw.data)
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col = "blue", main = "RMA Expression Values")
apply(log2(exprs(raw.data)), 2, median)
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col = "blue", main = "RMA Expression Values")
apply(log2(exprs(raw.data)), 2, median)
design <- model.matrix(~ -1 + factor(GSE27973.rma$treatment))
colnames(design) <- levels(factor(GSE27973.rma$treatment))
design
fit <- lmFit(GSE27973.rma, design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment = CSE - medium,
levels = design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment = CSE - medium,
levels = design)
GSE27973.contrast
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE27973.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
treatment_results <- topTable(fit2, coef = "treatment", adjust = "BH", num = Inf)
head(treatment_results)
fit2
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
fit2
treatment_results <- topTable(fit2, coef = "treatment", adjust = "BH", num = Inf)
head(treatment_results)
treatment_results
head(treatment_results)
head(treatment_results)
#Using adj.P.Val to determine how many probes are significantly differentially expressed between the **CSE** and **medium** samples based on a BH corrected p-value threshold of 0.05
treatment_results_sig <- filter(adj.P.Val<0.05)
#Using adj.P.Val to determine how many probes are significantly differentially expressed between the **CSE** and **medium** samples based on a BH corrected p-value threshold of 0.05
treatment_results_sig <- treatment_results %>% filter(adj.P.Val<0.05)
treatment_results_sig
count(treatment_results_sig)
count(treatment_results_sig)
nrow(treatment_results_sig)
library(hgu133plus2.db)
treatment_results$ID = row.names(treatment_results)
treatment_results$SYMBOL <- sapply(treatment_results$ID, function(x) mget(x, env = hgu133plus2SYMBOL, ifnotfound = NA)[[1]])
library(hgu133plus2.db)
#Load probe names library based on GEO page mentioning chip used [HG-U133_Plus_2] Affymetrix Human Genome U133 Plus 2.0 Array
library(hgu133plus2.db)
treatment_results$ID = row.names(treatment_results)
treatment_results$SYMBOL <- sapply(treatment_results$ID, function(x) mget(x, env = hgu133plus2SYMBOL, ifnotfound = NA)[[1]])
treatment_results$SYMBOL <- sapply(treatment_results$ID, function(x) mget(x, env = hgu133plus2SYMBOL, ifnotfound = NA)[[1]])
