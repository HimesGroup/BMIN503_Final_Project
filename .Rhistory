axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_line(color = "white"),
legend.key.size = unit(0.8, "cm"),
legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
plot.title = element_text(size = 22))
}
myPalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
# Replace "..." with your code
# plot for 2004
ggplot() +
geom_sf(data = counties, aes(fill=as.numeric(age.adjusted.percent.2004)),lwd = 0) +
my_theme() +
ggtitle("United States county-level obesity rates in 2004") +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min_2004, prev_max_2004))
# plot for 2014
ggplot() +
geom_sf(data = counties, aes(fill=as.numeric(age.adjusted.percent.2014)),lwd = 0) +
my_theme() +
ggtitle("United States county-level obesity rates in 2014") +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min_2014, prev_max_2014))
print("By comparing the two plots, obesity rate increased in 2014 compared to 2004 in lots of counties. ")
print("In both 2004 and 2014, the obesity rate is higher in southern America compared to other regions in America ")
# create a new vector which will have all the obesity rate changes between 2014 and 2004
obesity_change <- c()
# go over each row
for(i in (1:nrow(counties)))
{
# calculate each difference
change_rate <- as.numeric(counties[i,]$age.adjusted.percent.2014) - as.numeric(counties[i,]$age.adjusted.percent.2004)
# append every value into the vector
obesity_change <- append(obesity_change,change_rate)
}
# add a new variable to the counties dataframe
counties <- counties %>%
mutate(obesity_rate_change = obesity_change)
head(counties)
library(RColorBrewer)
# Bins continuous variables into an ordinal color scale appropriate for our data
pal_fun <- colorBin(palette = brewer.pal(9, "RdBu")[c(1:5, 7)],
bins = c(-3, -1, 1, 5, 9, 13, 17), reverse = TRUE,
NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Change in obesity rate (2004-2014): ",counties$obesity_rate_change)  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(obesity_rate_change),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~obesity_rate_change,                 # variable to be passed to palette function
title = 'Obesity rate change between 2004 and 2014',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
vars <- load_variables(dataset = "acs5",  # specify ACS 5-year estimates
year = 2016)  # specify end year (i.e. this queries ACS 5-year estimates for 2011-2016)
library(tidycensus)
#census_api_key("cdae2e46beaf388817b93f2de6d5041fc418b3ef", install = TRUE,overwrite = TRUE)
acs.data <- get_acs(geography = "county",         # query data at the county level
year = 2016,                 # end year (these will give us ACS 5-year estimates for 2011-2016)
variables = c("B17010_002",  # number of families falling below the poverty threshold
"B17010_001")) # total number of families for which poverty was determined
acs.data <- acs.data %>%
group_by(GEOID) %>%  # return only one row per GEOID
mutate(pov_fam = estimate[variable == "B17010_002"],  # extract and rename number of families in poverty
tot_fam = estimate[variable == "B17010_001"],  # extract and rename total number of families
percent_poverty = (pov_fam/tot_fam)*100) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, pov_fam, tot_fam, percent_poverty)
head(acs.data)
acs.data <- acs.data %>%
rename(fips.code = GEOID) %>%   #rename GEOID in acs.data as fips.code
select(fips.code, pov_fam, tot_fam, percent_poverty)
# change the class of fips.code in acs.data as numeric
acs.data$fips.code <- as.numeric(acs.data$fips.code)
# inner join the counties and acs.data by "fips.code"
counties <- inner_join(counties, acs.data, by="fips.code")
# show the first 6 rows
head(counties)
pal_fun <- colorNumeric("BuPu", NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Poverty Percentage: ",round(counties$percent_poverty,1), "%")  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(percent_poverty),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~percent_poverty,                 # variable to be passed to palette function
title = 'Poverty Percentage in every county',          # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(tidycensus)
library(leaflet)
obesity <- read.csv("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/county_obesity_prevalence.csv")
head(obesity)
file <- gzcon(url("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/uscounties_2010.rds"))
counties <- readRDS(file)
head(counties)
county.geo <- st_geometry(counties)
plot(county.geo)
library(dplyr)
orane_california_2004_2014 <- filter(obesity, county == 'Orange County' & state == 'California')
orane_california_2004_2014
orane_texas_2004_2014 <- filter(obesity, county == 'Orange County' & state == 'Texas')
orane_texas_2004_2014
library(tidyverse)
#unit the "Name" and "LSAD" as one column as county
counties <- counties %>% unite(fips.code,c("STATE","COUNTY"),sep="",remove = FALSE)
counties$fips.code <- as.numeric(counties$fips.code)
head(counties)
obesity_update <- obesity[,c("fips.code","state","county","age.adjusted.percent.2004","age.adjusted.percent.2014")]
#inner_join counties and obesity
counties <- inner_join(counties,obesity_update,by="fips.code")
head(counties)
library(RColorBrewer)
library(ggplot2)
# Use a fixed color scale to more easily compare obesity rates between maps
prev_min_2004 <- min(as.numeric(counties$age.adjusted.percent.2004))
prev_max_2004 <- max(as.numeric(counties$age.adjusted.percent.2004))
prev_min_2014 <- min(as.numeric(counties$age.adjusted.percent.2014))
prev_max_2014 <- max(as.numeric(counties$age.adjusted.percent.2014))
my_theme <- function() {
theme_minimal() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_line(color = "white"),
legend.key.size = unit(0.8, "cm"),
legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
plot.title = element_text(size = 22))
}
myPalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
# Replace "..." with your code
# plot for 2004
ggplot() +
geom_sf(data = counties, aes(fill=as.numeric(age.adjusted.percent.2004)),lwd = 0) +
my_theme() +
ggtitle("United States county-level obesity rates in 2004") +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min_2004, prev_max_2004))
# plot for 2014
ggplot() +
geom_sf(data = counties, aes(fill=as.numeric(age.adjusted.percent.2014)),lwd = 0) +
my_theme() +
ggtitle("United States county-level obesity rates in 2014") +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min_2014, prev_max_2014))
print("By comparing the two plots, obesity rate increased in 2014 compared to 2004 in lots of counties. ")
print("In both 2004 and 2014, the obesity rate is higher in southern America compared to other regions in America ")
# create a new vector which will have all the obesity rate changes between 2014 and 2004
obesity_change <- c()
# go over each row
for(i in (1:nrow(counties)))
{
# calculate each difference
change_rate <- as.numeric(counties[i,]$age.adjusted.percent.2014) - as.numeric(counties[i,]$age.adjusted.percent.2004)
# append every value into the vector
obesity_change <- append(obesity_change,change_rate)
}
# add a new variable to the counties dataframe
counties <- counties %>%
mutate(obesity_rate_change = obesity_change)
head(counties)
library(RColorBrewer)
# Bins continuous variables into an ordinal color scale appropriate for our data
pal_fun <- colorBin(palette = brewer.pal(9, "RdBu")[c(1:5, 7)],
bins = c(-3, -1, 1, 5, 9, 13, 17), reverse = TRUE,
NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Change in obesity rate (2004-2014): ",counties$obesity_rate_change)  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(obesity_rate_change),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~obesity_rate_change,                 # variable to be passed to palette function
title = 'Obesity rate change between 2004 and 2014',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
vars <- load_variables(dataset = "acs5",  # specify ACS 5-year estimates
year = 2016)  # specify end year (i.e. this queries ACS 5-year estimates for 2011-2016)
library(tidycensus)
#census_api_key("cdae2e46beaf388817b93f2de6d5041fc418b3ef", install = TRUE,overwrite = TRUE)
acs.data <- get_acs(geography = "county",         # query data at the county level
year = 2016,                 # end year (these will give us ACS 5-year estimates for 2011-2016)
variables = c("B17010_002",  # number of families falling below the poverty threshold
"B17010_001")) # total number of families for which poverty was determined
acs.data <- acs.data %>%
group_by(GEOID) %>%  # return only one row per GEOID
mutate(pov_fam = estimate[variable == "B17010_002"],  # extract and rename number of families in poverty
tot_fam = estimate[variable == "B17010_001"],  # extract and rename total number of families
percent_poverty = (pov_fam/tot_fam)*100) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, pov_fam, tot_fam, percent_poverty)
head(acs.data)
acs.data <- acs.data %>%
rename(fips.code = GEOID) %>%   #rename GEOID in acs.data as fips.code
select(fips.code, pov_fam, tot_fam, percent_poverty)
# change the class of fips.code in acs.data as numeric
acs.data$fips.code <- as.numeric(acs.data$fips.code)
# inner join the counties and acs.data by "fips.code"
counties <- inner_join(counties, acs.data, by="fips.code")
# show the first 6 rows
head(counties)
pal_fun <- colorNumeric("BuPu", NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Poverty Percentage: ",round(counties$percent_poverty,1), "%")  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(percent_poverty),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~percent_poverty,                 # variable to be passed to palette function
title = 'Poverty Percentage in every county',          # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
pal_fun <- colorNumeric("Blues", NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Poverty Percentage: ",round(counties$percent_poverty,1), "%")  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(percent_poverty),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~percent_poverty,                 # variable to be passed to palette function
title = 'Poverty Percentage in every county',          # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
pal_fun <- colorNumeric("Reds", NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Poverty Percentage: ",round(counties$percent_poverty,1), "%")  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(percent_poverty),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~percent_poverty,                 # variable to be passed to palette function
title = 'Poverty Percentage in every county',          # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
pal_fun <- colorNumeric("YIGn", NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Poverty Percentage: ",round(counties$percent_poverty,1), "%")  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(percent_poverty),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~percent_poverty,                 # variable to be passed to palette function
title = 'Poverty Percentage in every county',          # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
pal_fun <- colorNumeric("YlGn", NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Poverty Percentage: ",round(counties$percent_poverty,1), "%")  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(percent_poverty),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~percent_poverty,                 # variable to be passed to palette function
title = 'Poverty Percentage in every county',          # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
pal_fun <- colorNumeric("Rdpu", NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Poverty Percentage: ",round(counties$percent_poverty,1), "%")  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(percent_poverty),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~percent_poverty,                 # variable to be passed to palette function
title = 'Poverty Percentage in every county',          # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
pal_fun <- colorNumeric("RdPu", NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Poverty Percentage: ",round(counties$percent_poverty,1), "%")  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(percent_poverty),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~percent_poverty,                 # variable to be passed to palette function
title = 'Poverty Percentage in every county',          # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
library(tidycensus)
#census_api_key("cdae2e46beaf388817b93f2de6d5041fc418b3ef", install = TRUE,overwrite = TRUE)
acs.data <- get_acs(geography = "county",         # query data at the county level
year = 2016,                 # end year (these will give us ACS 5-year estimates for 2011-2016)
variables = c("B17010_002",  # number of families falling below the poverty threshold
"B17010_001")) # total number of families for which poverty was determined
acs.data <- acs.data %>%
group_by(GEOID) %>%  # return only one row per GEOID
mutate(pov_fam = estimate[variable == "B17010_002"],  # extract and rename number of families in poverty
tot_fam = estimate[variable == "B17010_001"],  # extract and rename total number of families
percent_poverty = (pov_fam/tot_fam)*100) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, pov_fam, tot_fam, percent_poverty) %>%
distinct()
head(acs.data)
acs.data <- acs.data %>%
rename(fips.code = GEOID) %>%   #rename GEOID in acs.data as fips.code
select(fips.code, pov_fam, tot_fam, percent_poverty)
# change the class of fips.code in acs.data as numeric
acs.data$fips.code <- as.numeric(acs.data$fips.code)
# inner join the counties and acs.data by "fips.code"
counties <- inner_join(counties, acs.data, by="fips.code")
# show the first 6 rows
head(counties)
library(tidycensus)
#census_api_key("cdae2e46beaf388817b93f2de6d5041fc418b3ef", install = TRUE,overwrite = TRUE)
acs.data <- get_acs(geography = "county",         # query data at the county level
year = 2016,                 # end year (these will give us ACS 5-year estimates for 2011-2016)
variables = c("B17010_002",  # number of families falling below the poverty threshold
"B17010_001")) # total number of families for which poverty was determined
acs.data <- acs.data %>%
group_by(GEOID) %>%  # return only one row per GEOID
mutate(pov_fam = estimate[variable == "B17010_002"],  # extract and rename number of families in poverty
tot_fam = estimate[variable == "B17010_001"],  # extract and rename total number of families
percent_poverty = (pov_fam/tot_fam)*100) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, pov_fam, tot_fam, percent_poverty) %>%
distinct()
head(acs.data)
acs.data <- acs.data %>%
rename(fips.code = GEOID) %>%   #rename GEOID in acs.data as fips.code
select(fips.code, pov_fam, tot_fam, percent_poverty)
# change the class of fips.code in acs.data as numeric
acs.data$fips.code <- as.numeric(acs.data$fips.code)
# inner join the counties and acs.data by "fips.code"
counties <- inner_join(counties, acs.data, by="fips.code")
# show the first 6 rows
head(counties)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(tidycensus)
library(leaflet)
obesity <- read.csv("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/county_obesity_prevalence.csv")
head(obesity)
file <- gzcon(url("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/uscounties_2010.rds"))
counties <- readRDS(file)
head(counties)
county.geo <- st_geometry(counties)
plot(county.geo)
library(dplyr)
orane_california_2004_2014 <- filter(obesity, county == 'Orange County' & state == 'California')
orane_california_2004_2014
orane_texas_2004_2014 <- filter(obesity, county == 'Orange County' & state == 'Texas')
orane_texas_2004_2014
library(tidyverse)
#unit the "Name" and "LSAD" as one column as county
counties <- counties %>% unite(fips.code,c("STATE","COUNTY"),sep="",remove = FALSE)
counties$fips.code <- as.numeric(counties$fips.code)
head(counties)
obesity_update <- obesity[,c("fips.code","state","county","age.adjusted.percent.2004","age.adjusted.percent.2014")]
#inner_join counties and obesity
counties <- inner_join(counties,obesity_update,by="fips.code")
head(counties)
library(RColorBrewer)
library(ggplot2)
# Use a fixed color scale to more easily compare obesity rates between maps
prev_min_2004 <- min(as.numeric(counties$age.adjusted.percent.2004))
prev_max_2004 <- max(as.numeric(counties$age.adjusted.percent.2004))
prev_min_2014 <- min(as.numeric(counties$age.adjusted.percent.2014))
prev_max_2014 <- max(as.numeric(counties$age.adjusted.percent.2014))
my_theme <- function() {
theme_minimal() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_line(color = "white"),
legend.key.size = unit(0.8, "cm"),
legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
plot.title = element_text(size = 22))
}
myPalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
# Replace "..." with your code
# plot for 2004
ggplot() +
geom_sf(data = counties, aes(fill=as.numeric(age.adjusted.percent.2004)),lwd = 0) +
my_theme() +
ggtitle("United States county-level obesity rates in 2004") +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min_2004, prev_max_2004))
# plot for 2014
ggplot() +
geom_sf(data = counties, aes(fill=as.numeric(age.adjusted.percent.2014)),lwd = 0) +
my_theme() +
ggtitle("United States county-level obesity rates in 2014") +
scale_fill_gradientn(name = "Obesity rate (%)", colours = myPalette(100),
limit = range(prev_min_2014, prev_max_2014))
print("By comparing the two plots, obesity rate increased in 2014 compared to 2004 in lots of counties. ")
print("In both 2004 and 2014, the obesity rate is higher in southern America compared to other regions in America ")
# create a new vector which will have all the obesity rate changes between 2014 and 2004
obesity_change <- c()
# go over each row
for(i in (1:nrow(counties)))
{
# calculate each difference
change_rate <- as.numeric(counties[i,]$age.adjusted.percent.2014) - as.numeric(counties[i,]$age.adjusted.percent.2004)
# append every value into the vector
obesity_change <- append(obesity_change,change_rate)
}
# add a new variable to the counties dataframe
counties <- counties %>%
mutate(obesity_rate_change = obesity_change)
head(counties)
library(RColorBrewer)
# Bins continuous variables into an ordinal color scale appropriate for our data
pal_fun <- colorBin(palette = brewer.pal(9, "RdBu")[c(1:5, 7)],
bins = c(-3, -1, 1, 5, 9, 13, 17), reverse = TRUE,
NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Change in obesity rate (2004-2014): ",counties$obesity_rate_change)  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(obesity_rate_change),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~obesity_rate_change,                 # variable to be passed to palette function
title = 'Obesity rate change between 2004 and 2014',                  # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
vars <- load_variables(dataset = "acs5",  # specify ACS 5-year estimates
year = 2016)  # specify end year (i.e. this queries ACS 5-year estimates for 2011-2016)
library(tidycensus)
#census_api_key("cdae2e46beaf388817b93f2de6d5041fc418b3ef", install = TRUE,overwrite = TRUE)
acs.data <- get_acs(geography = "county",         # query data at the county level
year = 2016,                 # end year (these will give us ACS 5-year estimates for 2011-2016)
variables = c("B17010_002",  # number of families falling below the poverty threshold
"B17010_001")) # total number of families for which poverty was determined
acs.data <- acs.data %>%
group_by(GEOID) %>%  # return only one row per GEOID
mutate(pov_fam = estimate[variable == "B17010_002"],  # extract and rename number of families in poverty
tot_fam = estimate[variable == "B17010_001"],  # extract and rename total number of families
percent_poverty = (pov_fam/tot_fam)*100) %>%   # multiply by 100 to get rate as a percentage
select(GEOID, NAME, pov_fam, tot_fam, percent_poverty) %>%
distinct()
head(acs.data)
acs.data <- acs.data %>%
rename(fips.code = GEOID) %>%   #rename GEOID in acs.data as fips.code
select(fips.code, pov_fam, tot_fam, percent_poverty)
# change the class of fips.code in acs.data as numeric
acs.data$fips.code <- as.numeric(acs.data$fips.code)
# inner join the counties and acs.data by "fips.code"
counties <- inner_join(counties, acs.data, by="fips.code")
# show the first 6 rows
head(counties)
pal_fun <- colorNumeric("RdPu", NULL)
pu_message <- paste0(counties$county, ", ", counties$state, # paste0 to append tract name with other relevant text
"<br> Poverty Percentage: ",round(counties$percent_poverty,1), "%")  # <br> forces new line
leaflet(counties) %>%
addPolygons(stroke = FALSE,                        # remove polygon borders
fillColor = ~pal_fun(percent_poverty),
fillOpacity = 1, smoothFactor = 1, # increase opacity and resolution
popup = pu_message) %>%
addProviderTiles(providers$CartoDB.Positron) %>%   # add third party provider tile
addLegend("bottomright",                           # location of legend
pal=pal_fun,                             # palette function
values=~percent_poverty,                 # variable to be passed to palette function
title = 'Poverty Percentage in every county',          # legend title
opacity = 1) %>%                         # legend opacity (1 = completely opaque)
addScaleBar()
print("According to this interactive map, Todd County, South Dakota has the highest poverty-percentage, which is 45.4%")
print("In the southern America regions, the poverty percentage is also higher than other regions in America")
obesity <- read.csv("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/county_obesity_prevalence.csv")
head(obesity)
file <- gzcon(url("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/uscounties_2010.rds"))
counties <- readRDS(file)
head(counties)
county.geo <- st_geometry(counties)
plot(county.geo)
