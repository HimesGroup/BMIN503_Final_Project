pred_outputs.glm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$PCR
#GLM train/test
glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
glm.pred.curr <- predict(P.glm, test, type="response")
pred_outputs.glm[1:length(s[s==i]) + offset] <- glm.pred.curr
}
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
lm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$RFS
#GLM train/test
lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
lm.pred.curr <- predict(R.lm, test, type="response")
pred_outputs.lm[1:length(s[s==i]) + offset] <- lm.pred.curr
}
#Create logistic regression model
PCR.glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total)
summary(RFS.lm)
PCR.glm.pred <- predict(PCR.glm, total, type="response")
RFS.lm.pred <- predict(RFS.lm, total, type="response")
#Get prediction error estimate
library(boot)
PCR.cv.glm <- cv.glm(total, PCR.glm, K=10)
summary(PCR.cv.glm)
#Cross validation
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.glm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$PCR
#GLM train/test
glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
glm.pred.curr <- predict(glm, test, type="response")
pred_outputs.glm[1:length(s[s==i]) + offset] <- glm.pred.curr
}
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
lm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$RFS
#GLM train/test
lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
lm.pred.curr <- predict(lm, test, type="response")
pred_outputs.lm[1:length(s[s==i]) + offset] <- lm.pred.curr
}
#Create logistic regression model
PCR.glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total)
summary(RFS.lm)
PCR.glm.pred <- predict(PCR.glm, total, type="response")
RFS.lm.pred <- predict(RFS.lm, total, type="response")
#Get prediction error estimate
library(boot)
PCR.cv.glm <- cv.glm(total, PCR.glm, K=10)
summary(PCR.cv.glm)
#Cross validation
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.glm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$PCR
#GLM train/test
glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
glm.pred.curr <- predict(glm, test, type="response")
pred_outputs.glm[1:length(s[s==i]) + offset] <- glm.pred.curr
}
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.lm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$RFS
#GLM train/test
lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
lm.pred.curr <- predict(lm, test, type="response")
pred_outputs.lm[1:length(s[s==i]) + offset] <- lm.pred.curr
}
library(pROC)
roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(obs_outputs, pred_outputs.glm,ci=TRUE, col="darkblue", add=TRUE)
plot.roc(total$PCR, RFS.lm.pred, ci=TRUE, col="darkgreen", add=TRUE)
plot.roc(obs_outputs, pred_outputs.lm, ci=TRUE, col="red", add=TRUE)
legend("bottomright", legend=c("PCR Training", "PCR Cross-Validation", "RFS Training", "RFS Cross-Validation"), col=c("black", "darkblue", "darkgreen", "red"), lwd=2)
#Create logistic regression model
PCR.glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total)
summary(RFS.lm)
PCR.glm.pred <- predict(PCR.glm, total, type="response")
RFS.lm.pred <- predict(RFS.lm, total, type="response")
#Get prediction error estimate
library(boot)
PCR.cv.glm <- cv.glm(total, PCR.glm, K=10)
summary(PCR.cv.glm)
#Cross validation
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.glm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$PCR
#GLM train/test
glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
glm.pred.curr <- predict(glm, test, type="response")
pred_outputs.glm[1:length(s[s==i]) + offset] <- glm.pred.curr
}
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.lm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$RFS
#GLM train/test
lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
lm.pred.curr <- predict(lm, test, type="response")
pred_outputs.lm[1:length(s[s==i]) + offset] <- lm.pred.curr
}
library(pROC)
roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(obs_outputs, pred_outputs.glm,ci=TRUE, col="darkblue", add=TRUE)
plot.roc(total$PCR, RFS.lm.pred, ci=TRUE, col="darkgreen", add=TRUE)
plot.roc(obs_outputs, pred_outputs.lm, ci=TRUE, col="red", add=TRUE)
legend("bottomright", legend=c("PCR Training", "PCR Cross-Validation", "RFS Training", "RFS Cross-Validation"), col=c("black", "darkblue", "darkgreen", "red"), lwd=2)
PCR.glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total)
summary(RFS.lm)
Create logistic regression model using best variables
#Create logistic regression model using best variables
PCR.glm <- glm(PCR ~ age +Her2MostPos, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ ERpos, data=total)
summary(RFS.lm)
PCR.glm.pred <- predict(PCR.glm, total, type="response")
RFS.lm.pred <- predict(RFS.lm, total, type="response")
#Get prediction error estimate
library(boot)
PCR.cv.glm <- cv.glm(total, PCR.glm, K=10)
summary(PCR.cv.glm)
#Cross validation
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.glm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$PCR
#GLM train/test
glm <- glm(PCR ~ age + Her2MostPos, data=train, family=binomial(logit))
glm.pred.curr <- predict(glm, test, type="response")
pred_outputs.glm[1:length(s[s==i]) + offset] <- glm.pred.curr
}
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.lm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$RFS
#GLM train/test
lm <- lm(RFS ~ ERpos, data=train, family=binomial(logit))
lm.pred.curr <- predict(lm, test, type="response")
pred_outputs.lm[1:length(s[s==i]) + offset] <- lm.pred.curr
}
library(pROC)
roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(obs_outputs, pred_outputs.glm,ci=TRUE, col="darkblue", add=TRUE)
plot.roc(total$PCR, RFS.lm.pred, ci=TRUE, col="darkgreen", add=TRUE)
plot.roc(obs_outputs, pred_outputs.lm, ci=TRUE, col="red", add=TRUE)
legend("bottomright", legend=c("PCR Training", "PCR Cross-Validation", "RFS Training", "RFS Cross-Validation"), col=c("black", "darkblue", "darkgreen", "red"), lwd=2)
#Create logistic regression model using all variables
PCR.glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total)
summary(RFS.lm)
PCR.glm.pred <- predict(PCR.glm, total, type="response")
RFS.lm.pred <- predict(RFS.lm, total, type="response")
#Get prediction error estimate
library(boot)
PCR.cv.glm <- cv.glm(total, PCR.glm, K=10)
summary(PCR.cv.glm)
#Cross validation
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.glm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$PCR
#GLM train/test
glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
glm.pred.curr <- predict(glm, test, type="response")
pred_outputs.glm[1:length(s[s==i]) + offset] <- glm.pred.curr
}
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.lm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$RFS
#GLM train/test
lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
lm.pred.curr <- predict(lm, test, type="response")
pred_outputs.lm[1:length(s[s==i]) + offset] <- lm.pred.curr
}
library(pROC)
roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(obs_outputs, pred_outputs.glm,ci=TRUE, col="darkblue", add=TRUE)
plot.roc(total$PCR, RFS.lm.pred, ci=TRUE, col="darkgreen", add=TRUE)
plot.roc(obs_outputs, pred_outputs.lm, ci=TRUE, col="red", add=TRUE)
legend("bottomright", legend=c("PCR Training", "PCR Cross-Validation", "RFS Training", "RFS Cross-Validation"), col=c("black", "darkblue", "darkgreen", "red"), lwd=2)
#Create logistic regression model using best variables
PCR.glm <- glm(PCR ~ age +Her2MostPos, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ ERpos, data=total)
summary(RFS.lm)
PCR.glm.pred <- predict(PCR.glm, total, type="response")
RFS.lm.pred <- predict(RFS.lm, total, type="response")
#Get prediction error estimate
library(boot)
PCR.cv.glm <- cv.glm(total, PCR.glm, K=10)
summary(PCR.cv.glm)
#Cross validation
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.glm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$PCR
#GLM train/test
glm <- glm(PCR ~ age + Her2MostPos, data=train, family=binomial(logit))
glm.pred.curr <- predict(glm, test, type="response")
pred_outputs.glm[1:length(s[s==i]) + offset] <- glm.pred.curr
}
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.lm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$RFS
#GLM train/test
lm <- lm(RFS ~ ERpos, data=train, family=binomial(logit))
lm.pred.curr <- predict(lm, test, type="response")
pred_outputs.lm[1:length(s[s==i]) + offset] <- lm.pred.curr
}
library(pROC)
roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(obs_outputs, pred_outputs.glm,ci=TRUE, col="darkblue", add=TRUE)
plot.roc(total$PCR, RFS.lm.pred, ci=TRUE, col="darkgreen", add=TRUE)
plot.roc(obs_outputs, pred_outputs.lm, ci=TRUE, col="red", add=TRUE)
legend("bottomright", legend=c("PCR Training", "PCR Cross-Validation", "RFS Training", "RFS Cross-Validation"), col=c("black", "darkblue", "darkgreen", "red"), lwd=2)
#Create logistic regression model using all variables
PCR.glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=total)
summary(RFS.lm)
PCR.glm.pred <- predict(PCR.glm, total, type="response")
RFS.lm.pred <- predict(RFS.lm, total, type="response")
#Get prediction error estimate
library(boot)
PCR.cv.glm <- cv.glm(total, PCR.glm, K=10)
summary(PCR.cv.glm)
#Cross validation
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.glm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$PCR
#GLM train/test
glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
glm.pred.curr <- predict(glm, test, type="response")
pred_outputs.glm[1:length(s[s==i]) + offset] <- glm.pred.curr
}
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.lm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$RFS
#GLM train/test
lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY, data=train, family=binomial(logit))
lm.pred.curr <- predict(lm, test, type="response")
pred_outputs.lm[1:length(s[s==i]) + offset] <- lm.pred.curr
}
library(pROC)
roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(obs_outputs, pred_outputs.glm,ci=TRUE, col="darkblue", add=TRUE)
plot.roc(total$PCR, RFS.lm.pred, ci=TRUE, col="darkgreen", add=TRUE)
plot.roc(obs_outputs, pred_outputs.lm, ci=TRUE, col="red", add=TRUE)
legend("bottomright", legend=c("PCR Training", "PCR Cross-Validation", "RFS Training", "RFS Cross-Validation"), col=c("black", "darkblue", "darkgreen", "red"), lwd=2)
auc(total$PCR, PCR.glm.pred)
auc(obs_outputs, pred_outputs.glm)
auc(total$PCR, RFS.lm.pred)
auc(obs_outputs, pred_outputs.lm)
#Create logistic regression model using best variables
PCR.glm <- glm(PCR ~ age +Her2MostPos, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ ERpos, data=total)
summary(RFS.lm)
PCR.glm.pred <- predict(PCR.glm, total, type="response")
RFS.lm.pred <- predict(RFS.lm, total, type="response")
#Get prediction error estimate
library(boot)
PCR.cv.glm <- cv.glm(total, PCR.glm, K=10)
summary(PCR.cv.glm)
#Cross validation
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.glm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$PCR
#GLM train/test
glm <- glm(PCR ~ age + Her2MostPos, data=train, family=binomial(logit))
glm.pred.curr <- predict(glm, test, type="response")
pred_outputs.glm[1:length(s[s==i]) + offset] <- glm.pred.curr
}
N = nrow(total)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
pred_outputs.lm <- vector(mode="numeric", length=N)
obs_outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(total, s != i)
test <- filter(total, s == i)
obs_outputs[1:length(s[s==i]) + offset] <- test$RFS
#GLM train/test
lm <- lm(RFS ~ ERpos, data=train, family=binomial(logit))
lm.pred.curr <- predict(lm, test, type="response")
pred_outputs.lm[1:length(s[s==i]) + offset] <- lm.pred.curr
}
library(pROC)
roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(total$PCR, PCR.glm.pred, ci=TRUE)
plot.roc(obs_outputs, pred_outputs.glm,ci=TRUE, col="darkblue", add=TRUE)
plot.roc(total$PCR, RFS.lm.pred, ci=TRUE, col="darkgreen", add=TRUE)
plot.roc(obs_outputs, pred_outputs.lm, ci=TRUE, col="red", add=TRUE)
legend("bottomright", legend=c("PCR Training", "PCR Cross-Validation", "RFS Training", "RFS Cross-Validation"), col=c("black", "darkblue", "darkgreen", "red"), lwd=2)
auc(total$PCR, PCR.glm.pred)
auc(obs_outputs, pred_outputs.glm)
auc(total$PCR, RFS.lm.pred)
auc(obs_outputs, pred_outputs.lm)
PCR.glm <- glm(PCR ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY + BilateralCa, data=total, family="binomial")
summary(PCR.glm)
RFS.lm <- lm(RFS ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY + BilateralCa, data=total)
summary(RFS.lm)
SS.glm <- glm(survival.status ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY + BilateralCa, data=total, family="binomial")
summary(PCR.glm)
View(outcome)
tumor.df <- mutate(tumor.df, overall_change = (t3-baseline)/baseline)
df2 <- merge(tumor.df, outcome)
df2 %>%
select(SUBJECTID, overall_change, RFS, PCR, survival.status)
ggplot(df2, aes(x=overall_change, y=RFS)) +
geom_point()
ggplot(df2, aes(x=PCR, y=overall_change)) +
geom_boxplot()
ggplot(df2, aes(x=survival.status, y=overall_change)) +
geom_boxplot()
tumor.df <- mutate(tumor.df, overall_change = (t3-baseline)/baseline)
df2 <- merge(tumor.df, total)
ggplot(df2, aes(x=overall_change, y=RFS)) +
geom_point()
ggplot(df2, aes(x=PCR, y=overall_change)) +
geom_boxplot()
ggplot(df2, aes(x=survival.status, y=overall_change)) +
geom_boxplot()
ggplot(df2, aes(x=overall_change, y=RFS)) +
geom_point()
ggplot(df2, aes(x=survival.status, y=PCR)) +
geom_boxplot()
ggplot(df2, aes(x=PCR, fill = survival.status)) +
geom_bar()
ggplot(df2, aes(x=PCR, fill = survival.status)) +
geom_bar(position="fill")
ggplot(df2, aes(x=PCR, fill = survival.status)) +
geom_bar(position="fill")+
scale_fill_manual(values=c("gray40", "gray70", "gray90"))+
theme_bw()+
ggtitle(paste("Survival status vs. PCR status")) +
theme(plot.title = element_text(hjust = 0, face="bold", size=20))
overall_change.lm <- lm(overall_change ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY + BilateralCa, data=total)
overall_change.lm <- lm(overall_change ~ age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY + BilateralCa, data=df2)
summary(overall_change.lm)
verall_change.lm <- lm(overall_change ~ survival_status + age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY + BilateralCa, data=df2)
overall_change.lm <- lm(overall_change ~ survival.status + age + ERpos + PgRpos + Her2MostPos + HR_status + HR_HER2_CATEGORY + BilateralCa, data=df2)
summary(overall_change.lm)
ggplot(df2, aes(x=survival.status, y=overall_change)) +
geom_boxplot()
ggplot(df2, aes(x=PCR, fill = survival.status)) +
geom_bar(position="fill")+
scale_fill_manual(values=c("gray40", "gray70", "gray90"))+
theme_bw()+
ggtitle(paste("Survival status vs. PCR status")) +
theme(plot.title = element_text(hjust = 0, face="bold", size=20))
tumor.df <- mutate(tumor.df, overall_change = (t3-baseline)/baseline)
df2 <- merge(tumor.df, total)
ggplot(df2, aes(x=overall_change, y=RFS)) +
geom_point() +
theme_bw()+
ggtitle(paste("Survival status vs. PCR status")) +
theme(plot.title = element_text(hjust = 0, face="bold", size=20))
ggplot(df2, aes(x=PCR, y=overall_change)) +
geom_boxplot()
ggplot(df2, aes(x=survival.status, y=overall_change)) +
geom_boxplot()
ggplot(df2, aes(x=PCR, fill = survival.status)) +
geom_bar(position="fill")+
scale_fill_manual(values=c("gray40", "gray70", "gray90"))+
theme_bw()+
ggtitle(paste("Survival status vs. PCR status")) +
theme(plot.title = element_text(hjust = 0, face="bold", size=20))
