---
title: "determinants of liver fibrosis"
subtitle: "BMIN503/EPID600 Final Project"
author: "Samiran Mukherjee"
format: html
editor: visual
number-sections: true
embed-resources: true
---

------------------------------------------------------------------------

## Overview {#sec-overview}

Using NHANES data, we aim to predict the determinants of liver fibrosis (using the publically available fibroscan data). In addition, we will also learn to train a machine learning model to identify variables that can best predict the occurence of fibrosis. .

## Introduction {#sec-introduction}

Non-alcoholic fatty liver disease (NAFLD)  is prevalent in 30% of the US population. It is strongly associated with the presence of co-morbid metabolic risk factors like obesity, type 2 DM, hypertension and hyperlipidemia. Given that 1% patients will end up developing liver cirrhosis (fibroscan liver stiffness cut off \>14.6), it is imperative to identify preventable independent variables that may influence the occurence of the same. 

## Methods {#sec-methods}

We will be using NHANES data to assess the determinants of advanced fibrosis from the link https://wwwn.cdc.gov/nchs/nhanes/continuousnhanes/default.aspx?Cycle=2017-2020

From the multiple data sets availabe from 2017-2020, we will be using the following files for the following: 1) demo_data; Demographic data 2) hepq_data; Hepatitis questionnaire data 3) lab_data; Lab data 4) dmq_data; dmq (diabetes questionnaire) data 5) a1c_data; a1c (diabetes lab) data 6) hepb_data; hepatitis b data 7) hepc_data; Hepatitis c data 8) fibroscan_data; Fibroscan (firbous elastography) data 9) insurance_data; insurance data 10)alcohol_data; Alcohol data

The study plan will comprise of

1\) Identifying cases and controls using the fibroscan data

2\) Use logistic regression models to identify variables that are associated with cases

3\) Using parnsip to pass logistic regression through an engine to create a supervised machine learning model to predict the occurence of cirrhosis

4\) Plotting AUC curves for the same

6\) Next, we will use tSNE and PCA to identify possible clustering in an unsupervised approach

Install packages

```{r}
#install.packages("modelsummary")
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("haven")
#install.packages("tidyverse")
#install.packages("tidyr")
#install.packages("kernlab")
#install.packages("randomForest")
#install.packages("glmnet")
#install.packages("tidymodels")
#install.packages("dotwhisker")
#install.packages("vip")

```

Load packages

```{r}
library(tidyverse)
library(modelsummary)
library(dplyr)
library(broom)
library(ggplot2)
library(dplyr)
library(haven) #required to read XPT files
library(tidyr)
library(kernlab)
library(randomForest)
library(glmnet)
library(tidymodels)
tidymodels_prefer()
library(dotwhisker)
library(vip)
```

```{r}
##read XPT files
demo_data <- read_xpt("P_DEMO.XPT") |> data.frame("P_DEMO.XPT")
hepq_data <- read_xpt("P_HEQ.XPT") |> data.frame("P_HEQ.XPT")
lab_data <- read_xpt("P_BIOPRO.XPT") |> data.frame("P_BIOPRO.XPT")
dmq_data <- read_xpt("P_DIQ.XPT") |> data.frame("P_DIQ.XPT") 
a1c_data <- read_xpt("P_GHB.XPT") |> data.frame("P_GHB.XPT")
hepb_data <- read_xpt("P_HEPBD.XPT") |> data.frame("P_HEPBD.XPT")
hepc_data <- read_xpt("P_HEPC.XPT") |> data.frame("P_HEPC.XPT")
fibroscan_data <- read_xpt("P_LUX.XPT") |> data.frame("P_LUX.XPT")
insurance_data <- read_xpt("P_HIQ.XPT") |> data.frame("P_HIQ.XPT")
alcohol_data <-  read_xpt("P_ALQ.XPT") |> data.frame("P_ALQ.XPT")
bodymeasurements_data <-  read_xpt("P_BMX.XPT") |> data.frame("P_BMX.XPT")

#Merge each of the tables to create one master data sheet. This has to happen step-wise
merged_df <- merge(demo_data, hepq_data, by = "SEQN")
merged_df <- merge(merged_df, hepb_data, by = "SEQN")
merged_df <- merge(merged_df, hepc_data, by = "SEQN")
merged_df <- merge(merged_df, lab_data, by = "SEQN")
merged_df <- merge(merged_df, dmq_data, by = "SEQN")
merged_df <- merge(merged_df, a1c_data, by = "SEQN")
merged_df <- merge(merged_df, fibroscan_data, by = "SEQN")
merged_df <- merge(merged_df, insurance_data, by = "SEQN")
merged_df <- merge(merged_df, alcohol_data, by = "SEQN")
merged_df <- merge(merged_df, bodymeasurements_data, by = "SEQN")

```

Now to modify each of the variables names of interest accordingly

```{r}
#Alcohol 
merged_df$etoh <- merged_df$ALQ151 #1->Y, 2-> No, 7-> refused, 9-> ?, .-> Missing

#biomarkers (continuous variables)
merged_df$alt <- merged_df$LBXSATSI #Values .-> Missing
merged_df$alb <- merged_df$LBXSAL 
merged_df$alp <- merged_df$LBXSAPSI
merged_df$ast <- merged_df$LBXSASSI 
merged_df$urea <- merged_df$LBXSBU
merged_df$cr <- merged_df$LBXSCR
merged_df$ggt <- merged_df$LBXSGTSI
merged_df$ldh <- merged_df$LBXSLDSI
merged_df$na <- merged_df$LBXSNASI
merged_df$tbil <- merged_df$LBXSTB
merged_df$chol <- merged_df$LBXSCH
merged_df$tg <- merged_df$LBXSTR

#HepQ data
merged_df$hb_self_reported <- merged_df$HEQ010 #1 Yes, 2 No, 7 Refused, 9 ?, . missing)
merged_df$hb_self_reported_treated <- merged_df$HEQ020 #Same as above
merged_df$hc_self_reported <- merged_df$HEQ030
merged_df$hc_self_reported_treated <- merged_df$HEQ040

#HepB data
merged_df$hbcore_positive <- merged_df$LBXHBC #1 yes, 2 neg, 3 +/-, . missing
merged_df$hbsag_positive <- merged_df$LBDHBG #1 yes, 2 neg, 3 +/-, . missing

#HepC data
merged_df$hcrna <- merged_df$LBXHCR #1 yes, 2 neg, 3 neg HCAb
merged_df$hcab <- merged_df$LBDHCI # 1 yes, 2 neg, 3 neg screening , 4 pos HCVRNA, . missing
merged_df$hcgenotype <- merged_df$LBXHCG # 1 1a, 2 1b, 3 1a/b?, 4 2, 5 3, 6 4, 7 5, 8, 6, 9 1

#A1c data
merged_df$ha1c <- merged_df$LBXGH #2.8-16.2 

#fibroscan data
merged_df$fibroscan_meanstiffness_kpa <- merged_df$LUXSMED
merged_df$fibroscan_stiffnessiqr <- merged_df$LUXSIQR
merged_df$fibroscan_cap <- merged_df$LUXCAPM
merged_df$hc_self_cpiqr <- merged_df$LUXCPIQR

#Insurance data 
merged_df$insurance_covered <- merged_df$HIQ011 # 1 yes, 2 no, 7 refused, 9 ?, . missing

#Demographic data 
merged_df$demo_gender <- merged_df$RIAGENDR #1 male, 2 female
merged_df$demo_age <- merged_df$RIDAGEYR # 0-79 and >80
merged_df$demo_race <- merged_df$RIDRETH3 # 1 Mexican american, 2 other hisp, 3 NH White, 4 NH black, 6 NH Asian, 7 other race
merged_df$demo_education <- merged_df$DMDEDUC2 #1 <9thgr, 2 9-11th gr, 3 HSGrad, 4 college, 5 college grad

#Body measures
merged_df$body_bmi <- merged_df$BMXBMI

#convert data type to  factors / numerics
merged_df$hb_self_reported <- as.factor(merged_df$hb_self_reported)
merged_df$hb_self_reported_treated <- as.factor(merged_df$hb_self_reported_treated)
merged_df$hc_self_reported <- as.factor(merged_df$hc_self_reported)
merged_df$hc_self_reported_treated <- as.factor(merged_df$hc_self_reported_treated)
merged_df$hbcore_positive <- as.factor(merged_df$hbcore_positive)
merged_df$hbsag_positive <- as.factor(merged_df$hbsag_positive)
merged_df$hcrna <- as.factor(merged_df$hcrna)
merged_df$hcab <- as.factor(merged_df$hcab)
merged_df$hcgenotype <- as.factor(merged_df$hcgenotype )
merged_df$insurance_covered <- as.factor(merged_df$insurance_covered)
merged_df$demo_gender <- as.factor(merged_df$demo_gender)
merged_df$demo_race <- as.factor(merged_df$demo_race)
merged_df$demo_education <- as.factor(merged_df$demo_education)


```

## Definition of Phenotype

***Cases:***

[1) Cirrhosis]{.underline}

We will use a fibroscan mean liver stiffness measurement of \>20 kPA for the definition of cirrhosis https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1856085/ https://journals.lww.com/hep/Fulltext/2023/05000/AASLD_Practice_Guidance_on_the_clinical_assessment.31.aspx\>

[2) Steatosis]{.underline}

Steatosis cut offs using fibroscan (https://pubmed.ncbi.nlm.nih.gov/30689971/) CAP value \> 302

***Controls:***

1\) [Steatosis controls]{.underline}: CAP \< 288

2\) [Cirrhosis controls]{.underline}: Fibroscan \<8kPA

Create columns that represent the phenotype

```{r}

#Cirrhosis to 0 and 1 using fibroscan data 

merged_df <- merged_df |> mutate(fibroscan_cirrhosis = ifelse(fibroscan_meanstiffness_kpa > 20, 1, 0))

#Steatosis to 0 an 1 using fibroscan data 
merged_df <- merged_df |> mutate(fibroscan_steatosis = ifelse(merged_df$fibroscan_cap > 288, 1, 0))


merged_df$fibroscan_cirrhosis <- as.factor(merged_df$fibroscan_cirrhosis)
merged_df$fibroscan_steatosis <- as.factor(merged_df$fibroscan_steatosis)

#check data type

summary(merged_df$fibroscan_steatosis) #2888 patients with steatosis
summary(merged_df$fibroscan_cirrhosis) #142 patients with cirrhosis 

```

We will also truncate the table to only the columns of interest

```{r}

df <- merged_df[, c("alt", "alb","alp", "ast", "urea", "cr", "ggt", "ldh", "na", "tbil", "chol", "tg", "etoh", "fibroscan_meanstiffness_kpa", "ha1c", "fibroscan_stiffnessiqr", "fibroscan_cap", "hc_self_cpiqr", "insurance_covered","demo_gender", "demo_age" , "demo_race", "demo_education", "body_bmi", "hb_self_reported", "hc_self_reported", "hc_self_reported", "hbcore_positive", "hcrna", "hcab",  "fibroscan_steatosis", "fibroscan_cirrhosis")]

# we will have to remove columns hc_self_reported_treated, hb_self_reported_treated, hcgenotype, hbsag as these are the columns with the maximum number of missings

#We now remove all the missings
df <- na.omit(df)
```

## Identifying variables associated with Steatosis

As a binary variable

model_steatosis_binary \<- glm(fibroscan_steatosis \~ alt + alb + alp + ast + urea + cr + ggt + ldh + na + tbil + chol + tg + etoh + ha1c + insurance_covered + demo_gender + demo_age + demo_race + demo_education + body_bmi, data = df, family = binomial)

summary(model_steatosis_binary)

significant_results_steatosis_binary \<- tidy(model_steatosis_binary)\|\> filter(p.value \< 0.05) \|\> arrange(p.value) \|\> mutate(Odds_Ratio = exp(estimate))

#How does the strongest variable associate with the outcome? \# BMI

#PLOT

ggplot(data=subset(df, !is.na(fibroscan_steatosis)), aes(x = fibroscan_steatosis, y = body_bmi)) +

geom_violin(aes(fill = fibroscan_steatosis)) +

geom_boxplot(width = 0.1, alpha = 0.2)

```{r}
model_steatosis_binary <- glm(fibroscan_steatosis ~ alt + alb + alp + ast + urea + cr + ggt + ldh + na + tbil + chol + tg + etoh + ha1c +  insurance_covered + demo_gender + demo_age + demo_race + demo_education + body_bmi, data = df, family = binomial)

summary(model_steatosis_binary)

significant_results_steatosis_binary <- tidy(model_steatosis_binary)|> filter(p.value < 0.05) |> arrange(p.value) |> mutate(Odds_Ratio = exp(estimate))

#How does the strongest variable associate with the outcome? # BMI
#PLOT 
ggplot(df, aes(x = fibroscan_steatosis, y = body_bmi)) +
  geom_violin(aes(fill = fibroscan_steatosis)) +
  geom_boxplot(width = 0.1, alpha = 0.2)

```
To create a new data set 'df_steatosis' without missing
```{r}

df_steatosis=subset(df, !is.na(fibroscan_steatosis))

```


As a continuous variable

```{r}

model_steatosis_continuous <- glm(fibroscan_cap ~ alt + alb + alp + ast + urea + cr + ggt + ldh + na + tbil + chol + tg + etoh + ha1c +  insurance_covered + demo_gender + demo_age + demo_race + demo_education + body_bmi, data = df)

significant_results_steatosis_continuous <- tidy(model_steatosis_continuous)|> filter(p.value < 0.05) |> arrange(p.value) |> mutate(Odds_Ratio = exp(estimate))

significant_results_steatosis_continuous



#How does the strongest variable associate with the outcome? # BMI
#PLOT 
ggplot(df, aes(x = body_bmi, y = fibroscan_cap)) + geom_point()+
  geom_smooth(method = "lm") 




```

Supervised Machine Learning using Random Forest Model to assess the most important factors
To Assess GINI
```{r}
#Random forest model
rf_cls_spec <- 
  rand_forest(trees = 1000, min_n = 5) |> 
  set_engine("randomForest", importance = TRUE) |>
  set_mode("classification")

rf_cls_spec

rf_cls_fit_steatosis <- rf_cls_spec |>
  fit(fibroscan_steatosis ~ alt + alb + alp + ast + urea + cr + ggt + ldh + na + tbil + chol + tg + etoh + ha1c +  insurance_covered + demo_gender + demo_age + demo_race + demo_education + body_bmi, data = df_steatosis)


rf_cls_fit_steatosis

#for importance scores 
rf_cls_fit_steatosis |>
  extract_fit_engine() |>
  importance()

#to plot MeanDecreaseGini
rf_cls_fit_steatosis |>
  extract_fit_engine() |>
  vip()

```


Given that many columns possess missing data, we will use only the predictors based on the GINI score 
```{r}
#save
rf.predicted.steatosis <- bind_cols(
  truth = df_steatosis,
  predict(rf_cls_fit_steatosis, df_steatosis),
  predict(rf_cls_fit_steatosis, df_steatosis, type = "prob")
)


rf.predicted.steatosis

#RF plots

autoplot(roc_curve(rf.predicted.steatosis, 
                   truth, .pred_Case))

roc_auc(rf.predicted.steatosis, 
                   truth, .pred_Case)





```

Unsupervised Machine Learning

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

```{r}





```

## Results {#sec-results}

Describe your results and include relevant tables, plots, and code/comments used to obtain them. You may refer to the @sec-methods as needed. End with a brief conclusion of your findings related to the question you set out to address. You can include references if you'd like, but this is not required.

## Conclusion

This the conclusion. The @sec-results can be invoked if you'd like.
