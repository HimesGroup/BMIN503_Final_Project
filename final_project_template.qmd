---
title: "Sarai_Garcia_TMS_Analysis"
subtitle: "BMIN503/EPID600 Final Project"
author: "Sarai Garcia"
format: html
editor: visual
embed-resources: true
execute: 
  warning: false
  message: false
---

------------------------------------------------------------------------

# Overview

This project is interdisciplinary between the departments of psychiatry and neuroscience. This study investigates the efficacy of neuroimaging-guided repetitive transcranial magnetic stimulation (rTMS) in individuals with trauma-related depression. I am analyzing data from a study that was completed in 2018. However, so many clinical/behavioral measures were taken that there is a wealth of data to be analyzed. I spoke with my PI, Dr. Desmond Oathes, who directs the Center for Brain Imaging and Stimulation. It was a study of his design and his familiarity with the procedures and trends that had already been observed in the data made him extremely helpful to guide me through this analysis as a beginner. A data analyst in my lab, Julie Grier, as well as a staff scientist, Dr. Romain Duprat, helped with any issues I ran into with data cleaning and constructing my model, respectively. As her job is largely data analysis and organization, I learned about the complex process of data cleaning. There were particular issues with this data set due to the way it was collected in REDCap as separate items rather than repeared measures of the same item. I ran into a lot of issues making sure I only had unique values and that the clinical measures were recorded in the correct order. With Dr. Duprat I learned a lot about the importance of data structure/context and how these influence the choice of what model suits my data the best. I ended up using a linear mixed effects model which allowed me to compare differences in clinical outcomes between different predictor variables, but became increasingly more difficult to interpret as the number of predictors I was testing increased.

# Introduction

Major Depressive Disorder (MDD) is a common sequelae of trauma and is highly comorbid with Post Traumatic Stress Disorder (PTSD). About 50% of those with PTSD also suffer from MDD. Repetitive transcranial magnetic stimulation (rTMS) is an established non-invasive tool for treating MDD (FDA cleared) and PTSD. This treatment modulates neural activity by delivering electrical stimulation to targeted brain regions. Neural circuits associated with affective disorders have characteristic abnormalities that might be further exacerbated by trauma experience. Recent data from our group show that using functional Magnetic Resonance Imaging (fMRI) to guide rTMS produces significantly stronger clinical effects than using traditional scalp-based targets. This study compared the efficacy of fMRI-guided rTMS to two cortical areas in individuals with PTSD or depression initiated by or exacerbated by trauma experience. We examined the use of fMRI to guide the precise location of stimulation within a cortical area with high functional connectivity to the Subgenual Anterior Cingulate Cortex (sgACC), selected for its implication in MDD and PTSD. Historically, the sgACC has been targeted through invasive treatments.

This research aims to deepen our understanding of the use of imaging tools in non-invasive brain stimulation treatment of psychiatric disorders by 1) examining trauma preponderance and 2) manipulating brain activation with neuromodulation treatment. We hypothesized that fMRI-guided TMS would produce a greater benefit to patients than the standard targeting method. Targeting the delivery of TMS based on individualized readings of sgACC resting functional connectivity may be especially effective in reducing its hyperactivity. We also hypothesized that psychological tasks would differentially facilitate treatment outcomes. While preliminary data reveals no significant influence by task condition, participants treated with neuromodulation in the fMRI-guided target reported a significantly greater reduction in depression and PTSD symptoms compared to participants treated with stimulation in the standard target. Further analyses are being conducted on self-report ratings of positive and negative affectivity, life satisfaction, and suicidality. Specifically, we are interested in how these aspects are differentially influenced by trauma preponderance. These findings emphasize the significance of imaging-guided neuromodulation in more effective treatments for MDD and PTSD diagnosed patients.

# Methods

Affective ratings were assessed through the Positive and Negative Affect Schedule Survey (PANAS), a clinical measure that allowed us to observe acute mood changes during a single visit as well as over the duration of the study. There were 45 participants in total who participated in two phases of treatment. Each phase lasted 10 days with 2 TMS sessions per day. Within each phase participants were randomly assigned to the fMRI-guided TMS target or the Standard TMS target. They were additionally randomly assigned to receive a psychological task (n-back task) that would induce a higher state of arousal or simply a video that would induce a lower state of arousal. The PANAS was taken prior to TMS, during the 20 minute break between TMS sessions, following the psychological task introduced during the break, and again post TMS. We focused our analysis on the first phase of TMS and the pre TMS ratings of the PANAS, so as to avoid acute mood changes falsely attributed to the unpleasant physical experience of receiving TMS so as to more accurately collect mood inherent to their emotional state.

My main question was to determine whether the fMRI-guided site reported more significant clinical improvement in affective ratings than the standard site. I also had exploratory analyses related to the influence of the psychological tasks as well as trauma experience on affective ratings improvement. My PI advised me to account for the influence of baseline score. Recent data shows that participants who have higher baseline scores typically have greater improvement.

I conducted a linear mixed effects model that looked like this: lmer(PANAS SCORE \~ TIME \* TMS TARGET SITE \* TRAUMA EXPERIENCE \* TASK CONDITION + BASELINE SCORE)

## Necessary Packages

```{r}
# Necessary packages:
options(repos = c(CRAN = "https://cran.rstudio.com"))
install.packages("tidyverse")
library(tidyverse)
# install.packages("stringi")
library(stringi)
# install.packages("reshape2")                 
library("reshape2")  
# install.packages("lme4")
library(lme4)
# install.packages("lmerTest")
library(lmerTest)
# install.packages("sjPlot")
library(sjPlot)
#install.packages("xquartz") # had to do from xquartz.org
```

## Cleaning & Restructuring Data 

First, read in a report of the desired data from REDCap, our data collection tool

```{r}
panas_table <- read.csv("/Users/saraig/Documents/Cure Study R/panas_table.csv")
```

Create a vector of subjects to reshape messy data for plotting and analysis

```{r}

# Negative vector of subjects 
install.packages("xquartz")
# Create a list to store combined data for each participant
combined_data <- list()

# Get unique Record IDs
record_ids <- unique(panas_table$Record.ID)

# Iterate through each participant
for (Record.ID in record_ids) {
  # Subset the data for the current participant
  record_id_data <- panas_table[panas_table$Record.ID == Record.ID, ]
  
View(record_id_data)

# Create a new row for the record.id's with columns for each day
combined_row <- c(Record.ID, record_id_data$negative_baseline, record_id_data$negative_pre_tms, 
                    record_id_data$negative_tms_break, record_id_data$negative_post_task, 
                    record_id_data$negative_post_tms)
  
View(combined_row)

# Add the combined row to the list
combined_data[[Record.ID]] <- combined_row
}

View(combined_data)
 
# Convert the list to a data frame
combined_df <- as.data.frame(do.call(rbind, combined_data))

# Rename the columns
colnames(combined_df) <- c("Record.ID", paste0("days", 0:12))

```

Remove unecessary columns from combined_df

```{r}
# install.packages("utils") 
# combined_df_2 <- combined_df %>% select(-c(days1, days2, days3, days4, days5, days6, days7, days8, days9, days10, days11, days12))

# remove columns one at a time 
combined_df_2 = subset(combined_df, select = -days1)
combined_df_2 = subset(combined_df_2, select = -days2)
combined_df_2 = subset(combined_df_2, select = -days3)
combined_df_2 = subset(combined_df_2, select = -days4)
combined_df_2 = subset(combined_df_2, select = -days5)
combined_df_2 = subset(combined_df_2, select = -days6)
combined_df_2 = subset(combined_df_2, select = -days7)
combined_df_2 = subset(combined_df_2, select = -days8)
combined_df_2 = subset(combined_df_2, select = -days9)
combined_df_2 = subset(combined_df_2, select = -days10)
combined_df_2 = subset(combined_df_2, select = -days11)
combined_df_2 = subset(combined_df_2, select = -days12)

combined_df_2[[3]] <- NULL 

View(combined_df_2)

# rename columns in combined_df_2

# combined_df_3 <- combined_df_2 %>% 
  #      rename("neg_base_0" = "days0")
        
# combined_df_3 <- combined_df_2 %>% rename(days0 = ifelse(is.na(.), "neg_base_0", .))

# combined_df_3 <- combined_df_2 %>%
#  rename(neg_base_0 = days0)
combined_df_3 <- combined_df_2
  
colnames(combined_df_3) <- c("Record.ID", "neg_base_0", "neg_pre_tms_1", "neg_pre_tms_2", "neg_pre_tms_3", "neg_pre_tms_4", "neg_pre_tms_5", "neg_pre_tms_6", "neg_pre_tms_7", "neg_pre_tms_8", "neg_pre_tms_9", "neg_pre_tms_10", "neg_pre_tms_check_1_cut", "neg_pre_tms_check_2_cut", "neg_base_1_cut", "neg_tms_break_1", "neg_tms_break_2", "neg_tms_break_3", "neg_tms_break_4", "neg_tms_break_5", "neg_tms_break_6", "neg_tms_break_7", "neg_tms_break_8", "neg_tms_break_9", "neg_tms_break_10", "neg_tms_break_check_1_cut", "neg_tms_break_check_2_cut", "neg_tms_break_base_2_cut", "neg_post_task_1", "neg_post_task_2", "neg_post_task_3", "neg_post_task_4", "neg_post_task_5", "neg_post_task_6", "neg_post_task_7", "neg_post_task_8", "neg_post_task_9", "neg_post_task_10", "neg_post_task_check_1_cut", "neg_post_task_check_2_cut", "neg_post_task_3_cut", "neg_post_tms_1", "neg_post_tms_2", "neg_post_tms_3", "neg_post_tms_4", "neg_post_tms_5", "neg_post_tms_6", "neg_post_tms_7", "neg_post_tms_8", "neg_post_tms_9", "neg_post_tms_10", "neg_post_tms_check_1", "neg_post_tms_check_2")

# cut out empty columns (should end with 45 obs. of 44 variables)
combined_df_3 <- combined_df_3 %>% select(-c(neg_pre_tms_check_1_cut, neg_pre_tms_check_2_cut, neg_base_1_cut, neg_tms_break_check_1_cut, neg_tms_break_check_2_cut, neg_tms_break_base_2_cut, neg_post_task_check_1_cut, neg_post_task_check_2_cut, neg_post_task_3_cut))

View(combined_df_3)

```

Reorder columns into correct order (based on the chronological order that PANAS was taken during the study)

```{r}

new_order = c("Record.ID", "neg_base_0", "neg_pre_tms_1", "neg_tms_break_1", "neg_post_task_1", "neg_post_tms_1", "neg_pre_tms_2", "neg_tms_break_2", "neg_post_task_2", "neg_post_tms_2", "neg_pre_tms_3", "neg_tms_break_3", "neg_post_task_3", "neg_post_tms_3", "neg_pre_tms_4", "neg_tms_break_4", "neg_post_task_4", "neg_post_tms_4", "neg_pre_tms_5", "neg_tms_break_5", "neg_post_task_5", "neg_post_tms_5", "neg_pre_tms_6", "neg_tms_break_6", "neg_post_task_6", "neg_post_tms_6", "neg_pre_tms_7", "neg_tms_break_7", "neg_post_task_7", "neg_post_tms_7", "neg_pre_tms_8", "neg_tms_break_8", "neg_post_task_8", "neg_post_tms_8", "neg_pre_tms_9", "neg_tms_break_9", "neg_post_task_9", "neg_post_tms_9", "neg_pre_tms_10", "neg_tms_break_10", "neg_post_task_10", "neg_post_tms_10", "neg_post_tms_check_1", "neg_post_tms_check_2")

neg_vector_of_subjects <- combined_df_3[, new_order]

View(neg_vector_of_subjects)
```

Next, do the same for positive vector of subjects

```{r}

# Create a list to store combined data for each participant
combined_data_pos <- list()

# Get unique Record IDs
record_ids_pos <- unique(panas_table$Record.ID)

# Iterate through each participant
for (Record.ID in record_ids_pos) {

# Subset the data for the current participant
record_id_data_pos <- panas_table[panas_table$Record.ID == Record.ID, ]
# Create a new row for the record.id's with columns for each day
combined_row_pos <- c(Record.ID, record_id_data_pos$positive_baseline, record_id_data_pos$positive_pre_tms, 
                    record_id_data_pos$positive_tms_break, record_id_data_pos$positive_post_task, 
                    record_id_data_pos$positive_post_tms)
  combined_data_pos[[Record.ID]] <- combined_row_pos
}

View(combined_data_pos)
 
# Convert the list to a data frame
combined_df_pos <- as.data.frame(do.call(rbind, combined_data_pos))

# Rename the columns
colnames(combined_df_pos) <- c("Record.ID", paste0("days", 0:12))

# remove unecessary columns from combined_df_pos
# remove columns individually
combined_df_pos_2 = subset(combined_df_pos, select = -days1)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days2)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days3)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days4)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days5)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days6)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days7)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days8)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days9)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days10)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days11)
combined_df_pos_2 = subset(combined_df_pos_2, select = -days12)

combined_df_pos_2[[3]] = NULL

view(combined_df_pos_2)

colnames(combined_df_pos_2) <- c("Record.ID", "pos_base_0", "pos_pre_tms_1", "pos_pre_tms_2", "pos_pre_tms_3", "pos_pre_tms_4", "pos_pre_tms_5", "pos_pre_tms_6", "pos_pre_tms_7", "pos_pre_tms_8", "pos_pre_tms_9", "pos_pre_tms_10", "pos_pre_tms_check_1_cut", "pos_pre_tms_check_2_cut", "pos_base_1_cut", "pos_tms_break_1", "pos_tms_break_2", "pos_tms_break_3", "pos_tms_break_4", "pos_tms_break_5", "pos_tms_break_6", "pos_tms_break_7", "pos_tms_break_8", "pos_tms_break_9", "pos_tms_break_10", "pos_tms_break_check_1_cut", "pos_tms_break_check_2_cut", "pos_tms_break_base_2_cut", "pos_post_task_1", "pos_post_task_2", "pos_post_task_3", "pos_post_task_4", "pos_post_task_5", "pos_post_task_6", "pos_post_task_7", "pos_post_task_8", "pos_post_task_9", "pos_post_task_10", "pos_post_task_check_1_cut", "pos_post_task_check_2_cut", "pos_post_task_3_cut", "pos_post_tms_1", "pos_post_tms_2", "pos_post_tms_3", "pos_post_tms_4", "pos_post_tms_5", "pos_post_tms_6", "pos_post_tms_7", "pos_post_tms_8", "pos_post_tms_9", "pos_post_tms_10", "pos_post_tms_check_1", "pos_post_tms_check_2")

# cut out empty columns (should end with 45 obs. of 44 variables)
combined_df_pos_3 <- combined_df_pos_2 %>% select(-c( pos_pre_tms_check_1_cut, pos_pre_tms_check_2_cut, pos_base_1_cut, pos_tms_break_check_1_cut, pos_tms_break_check_2_cut, pos_tms_break_base_2_cut, pos_post_task_check_1_cut, pos_post_task_check_2_cut, pos_post_task_3_cut))

# Find the row index where Record.ID is "WD_P941"
# index_to_move <- which(combined_df_pos_3$Record.ID == "WD_P941")

# Move the observation to the bottom
# combined_df_pos_3 <- rbind(combined_df_pos_3[-index_to_move, ], combined_df_pos_3[index_to_move, ])

View(combined_df_pos_3)

# reorder columns into correct order
new_order = c("Record.ID", "pos_base_0", "pos_pre_tms_1", "pos_tms_break_1", "pos_post_task_1", "pos_post_tms_1", "pos_pre_tms_2", "pos_tms_break_2", "pos_post_task_2", "pos_post_tms_2", "pos_pre_tms_3", "pos_tms_break_3", "pos_post_task_3", "pos_post_tms_3", "pos_pre_tms_4", "pos_tms_break_4", "pos_post_task_4", "pos_post_tms_4", "pos_pre_tms_5", "pos_tms_break_5", "pos_post_task_5", "pos_post_tms_5", "pos_pre_tms_6", "pos_tms_break_6", "pos_post_task_6", "pos_post_tms_6", "pos_pre_tms_7", "pos_tms_break_7", "pos_post_task_7", "pos_post_tms_7", "pos_pre_tms_8", "pos_tms_break_8", "pos_post_task_8", "pos_post_tms_8", "pos_pre_tms_9", "pos_tms_break_9", "pos_post_task_9", "pos_post_tms_9", "pos_pre_tms_10", "pos_tms_break_10", "pos_post_task_10", "pos_post_tms_10", "pos_post_tms_check_1", "pos_post_tms_check_2")

pos_vector_of_subjects_final <- combined_df_pos_3[, new_order]

View(pos_vector_of_subjects_final)

```

Add site data/trauma severity scores into cleaned data frame

```{r}

# load in new csv with data about site of stimulation 

# 1 = fMRI-guided site

# 2 = Standard (6cm) site

site_data_2 <- read.csv("/Users/saraig/Documents/Cure Study R/sitedata.csv")

site_data_3 <- site_data_2 
 
View(site_data_3)

# NEGATIVE 

full_negative_data <- full_join(neg_vector_of_subjects, site_data_3)

View(full_negative_data)

# POSITIVE
full_positive_data <- full_join(pos_vector_of_subjects_final, site_data_3)

View(full_positive_data)
```

Reorder columns again

```{r}

# POSITIVE
new_order_pos = c("Record.ID", "site", "pos_base_0", "pos_pre_tms_1", "pos_tms_break_1", "pos_post_task_1", "pos_post_tms_1", "pos_pre_tms_2", "pos_tms_break_2", "pos_post_task_2", "pos_post_tms_2", "pos_pre_tms_3", "pos_tms_break_3", "pos_post_task_3", "pos_post_tms_3", "pos_pre_tms_4", "pos_tms_break_4", "pos_post_task_4", "pos_post_tms_4", "pos_pre_tms_5", "pos_tms_break_5", "pos_post_task_5", "pos_post_tms_5", "pos_pre_tms_6", "pos_tms_break_6", "pos_post_task_6", "pos_post_tms_6", "pos_pre_tms_7", "pos_tms_break_7", "pos_post_task_7", "pos_post_tms_7", "pos_pre_tms_8", "pos_tms_break_8", "pos_post_task_8", "pos_post_tms_8", "pos_pre_tms_9", "pos_tms_break_9", "pos_post_task_9", "pos_post_tms_9", "pos_pre_tms_10", "pos_tms_break_10", "pos_post_task_10", "pos_post_tms_10", "pos_post_tms_check_1", "pos_post_tms_check_2")

full_positive_data$Event.Name = NULL
full_positive_data$Repeat.Instrument = NULL
full_positive_data$Repeat.Instance = NULL

colnames(full_positive_data)[colnames(full_positive_data) == "Site.of.Stimulation.1...1.fMRI.Guided..2.Standard..6cm."] <- "site"

full_positive_data <- full_positive_data[, new_order_pos]

View(full_positive_data)

# save as csv

# should be 45 obs of 45 variables

# NEGATIVE

new_order_neg = c("Record.ID", "site", "neg_base_0", "neg_pre_tms_1", "neg_tms_break_1", "neg_post_task_1", "neg_post_tms_1", "neg_pre_tms_2", "neg_tms_break_2", "neg_post_task_2", "neg_post_tms_2", "neg_pre_tms_3", "neg_tms_break_3", "neg_post_task_3", "neg_post_tms_3", "neg_pre_tms_4", "neg_tms_break_4", "neg_post_task_4", "neg_post_tms_4", "neg_pre_tms_5", "neg_tms_break_5", "neg_post_task_5", "neg_post_tms_5", "neg_pre_tms_6", "neg_tms_break_6", "neg_post_task_6", "neg_post_tms_6", "neg_pre_tms_7", "neg_tms_break_7", "neg_post_task_7", "neg_post_tms_7", "neg_pre_tms_8", "neg_tms_break_8", "neg_post_task_8", "neg_post_tms_8", "neg_pre_tms_9", "neg_tms_break_9", "neg_post_task_9", "neg_post_tms_9", "neg_pre_tms_10", "neg_tms_break_10", "neg_post_task_10", "neg_post_tms_10", "neg_post_tms_check_1", "neg_post_tms_check_2")

full_negative_data$Event.Name = NULL
full_negative_data$Repeat.Instrument = NULL
full_negative_data$Repeat.Instance = NULL

colnames(full_negative_data)[colnames(full_negative_data) == "Site.of.Stimulation.1...1.fMRI.Guided..2.Standard..6cm."] <- "site"

full_negative_data <- full_negative_data[, new_order_neg]

View(full_negative_data)

```

Add in trauma severity data to full_positive_data and full_negative_data

```{r}


# Our collaborator used data from a column called 'Total_traumas', calculated from data during a clinical interview

kristin_data_unique <- read.csv("/Users/saraig/Documents/Cure Study R/kristin_data_unique.csv")

# Merge the unique kristin_data into full_positive_data
full_positive_data_2 <- merge(full_positive_data, kristin_data_unique[ , c("Record.ID", "Total_traumas")], by.x = "Record.ID", by.y = "Record.ID", all.x = TRUE)

# Merge the unique kristin_data into full_negative_data_2
full_negative_data_2 <- merge(full_negative_data, kristin_data_unique[ , c("Record.ID", "Total_traumas")], by.x = "Record.ID", by.y = "Record.ID", all.x = TRUE)
```

## Reshape data from wide to long for plotting/analysis

```{r}

# install.packages("stringi")
library(stringi)

# install.packages("reshape2")
library(reshape2)

# reshape data wide to long using melt
positive_long <- melt(full_positive_data_2, id.vars = "Record.ID")

View(positive_long)

positive_long_2 <- positive_long[-c(1:45, 1981:2025), ] 

# load in site data
site_data <- read.csv("/Users/saraig/Documents/Cure study R/sitedata.csv")

site_data_2 <- site_data %>% mutate(site = Site.of.Stimulation.1...1.fMRI.Guided..2.Standard..6cm.) %>% 
 select(c(Record.ID, site)) %>% na.omit()

trauma_data_2 <- kristin_data_unique %>%
select(c(Record.ID, Total_traumas))

pos_site_long <- full_join(positive_long_2, site_data_2)

pos_site_long <- full_join(pos_site_long, trauma_data_2)

pos_site_long <- pos_site_long[-c(1936:1941), ] 
View(pos_site_long)
```

```{r}

# reshape data wide to long using melt
negative_long <- melt(full_negative_data_2, id.vars = "Record.ID")

View(negative_long)

negative_long_2 <- negative_long[-c(1:45, 1981:2025), ] 

# positive and negative long 2 should have 1935 entries
# load in site data

site_data

site_data_2

trauma_data_2

neg_site_long <- full_join(negative_long_2, site_data_2)

neg_site_long <- full_join(neg_site_long, trauma_data_2)

neg_site_long <- neg_site_long[-c(1936:1941), ] 

view(neg_site_long)


```

# Results

## Preparing Positive Data for Analysis

```{r}
# Positive Pre TMS Analysis

install.packages("lme4")
library(lme4)
# allows you to do linear mixed effects models
# install.packages("lmerTest")
library(lmerTest)
# extends lme4 package to allow lmer models produce t and p values

# 1 = fMRI guided 
# 2 = Standard (6cm) site

# Subset the 'pre' meaures... Will need to subset 'tms_break', 'post_task' and 'post_tms' 1:10 (add check in scores to post tms)
pos_pre_measures <- c("pos_base_0", "pos_pre_tms_1", "pos_pre_tms_2", "pos_pre_tms_3", "pos_pre_tms_4", "pos_pre_tms_5", "pos_pre_tms_6", "pos_pre_tms_7", "pos_pre_tms_8", "pos_pre_tms_9", "pos_pre_tms_10")

View(pos_pre_measures)

pos_by_measure_pre <- pos_site_long %>%
  filter(variable %in% pos_pre_measures) %>%
  group_by(Record.ID, site)

View(pos_by_measure_pre)
         
## to change color the site column has to be a discrete scale  

pos_by_measure_pre$site <- factor(pos_by_measure_pre$site)

# Check the structure of the data frame
str(pos_by_measure_pre$site)

## to change name of x variables the tms measures (variable column) will also have to be a discrete scale  

# pos_by_measure_pre$variable <- factor(pos_by_measure_pre$variable)

# Check the structure of the data frame
# str(pos_by_measure_pre$variable)

# rename 'variable' to 'tx_day'
pos_by_measure_pre <- pos_by_measure_pre %>% 
       rename("tx_day" = "variable")


# Linear mixed effects analyses (lme) using PANAS Positive Affect (separate one for Negative Affect) as outcome measure (y variable) with the predictors (x variables) = subject ID, time, and site.

# A linear mixed effects model is similar to linear regression but accounts for random (allow you to model and account for correlation or dependence between observations within the same group) and fixed (relationship between predictor and response variables) effects

# Useful for nested data (i.e., dealing with data that has a hierarchical or nested structure, such as repeated measurements on individuals)

# This is why I chose to use an lmer. I can account for random within-subject variation and can understabd repeated measures of the PANAS 

# example.
# lmer(response_variable ~ fixed_effects + (random_effects | grouping_variable), data = your_data)

# change variable labels to integers (as.integer or as.numeric)
pos_by_measure_pre_integer <- pos_by_measure_pre %>%
  mutate(tx_day = as.integer(recode(tx_day, 
                                        pos_base_0 = 0, 
                                        pos_pre_tms_1 = 1, 
                                        pos_pre_tms_2 = 2,
                                        pos_pre_tms_3 = 3,
                                        pos_pre_tms_4 = 4,
                                        pos_pre_tms_5 = 5,
                                        pos_pre_tms_6 = 6,
                                        pos_pre_tms_7 = 7,
                                        pos_pre_tms_8 = 8,
                                        pos_pre_tms_9 = 9,
                                        pos_pre_tms_10 = 10)))

```

## Positive Affect Linear Mixed Effects Models

I am choosing to use a linear mixed effects model because I am interested in determining whether there is a significant difference in clinical outcome between the fMRI-guided and standard target site. A linear mixed effects model, depending on the class of predictor variable, tells you if there is:

-   (For **integer** variables) a significant effect of the **predictor** variable (**Day**, **Trauma**) on the **independent** variable (**PANAS** **score**)

-   (For **discrete** variables) a significant effect of the **predictor** variable (**Site1/Site2**, **Task/Video**) on the **independent** variable (**PANAS** **score**)

    -   It compares one group to another by holding the first group as the baseline and tells you if there is a significant difference between the groups.

        -   In this case, R decided that Site 1 (fMRI-guided site) was the baseline, and tells me if Site 2 (Standard site) predicted significantly different panas scores

-   You use the Estimate (in the *summary* output) to understand the direction of the predicted relationship and the p value to determine if it's significant

    -   for example: If the Estimate for Site 2 is -0.55 and the p value is significant, the model predicts that compared to Site 1 (fMRI), the condition of being in Site 2 (Standard) predicts a 0.55 reduction in positive PANAS score.

```{r}

# Linear Mixed Effects Model

# lmer with variable as integer
# In addition to my covariates of interest it is important to account for the baseline imbalance and analyze how the change relates to the outcome variable (value = PANAS score).

# merge baseline score into pos_by_measure_pre_integer
pos_by_measure_pre_integer <- merge(pos_by_measure_pre_integer, full_positive_data_2[, c("Record.ID", "pos_base_0")], by.x = "Record.ID", by.y = "Record.ID", all.x = TRUE)


# make sure pos_by_measure_pre_integer is in ascending order by 'tx_day'
pos_by_measure_pre_integer <- pos_by_measure_pre_integer %>% arrange(tx_day)

# make sure value is recognized as an integer 
pos_by_measure_pre_integer$value <- as.integer(pos_by_measure_pre_integer$value)

# merge in task and include analysis for task
# 1 = Task (high arousal)
# 2 = Video (low arousal)

pos_by_measure_pre_integer <- merge(pos_by_measure_pre_integer, kristin_data_unique[, c("Record.ID", "TaskORVideo")], by.x = "Record.ID", by.y = "Record.ID", all.x = TRUE)

View(pos_by_measure_pre_integer)

# make sure pos_by_measure_pre_integer is in ascending order by 'tx_day'
pos_by_measure_pre_integer <- pos_by_measure_pre_integer %>% arrange(tx_day)

# make sure it understands TaskORvideo as a factor with two levels
pos_by_measure_pre_integer$TaskORVideo <- as.factor(pos_by_measure_pre_integer$TaskORVideo)

# make sure it understands site as a factor with two levels
pos_by_measure_pre_integer$site <- as.factor(pos_by_measure_pre_integer$site)

# make sure it understands baseline as an integer
pos_by_measure_pre_integer$pos_base_0 <- as.integer(pos_by_measure_pre_integer$pos_base_0)

# LMER 

# main effect: fMRI-guided site vs standard site 
pos_pre_model <- lmer(value ~ tx_day * site + pos_base_0 + (1 | Record.ID), data = pos_by_measure_pre_integer)
summary(pos_pre_model)
# Time, baseline score, and time x site had a significant effect on PANAS score.
  # Increase of time predicts increase of positive PANAS score.
  # Higher baseline score predicts higher positive PANAS score.
  # Being in the standard target condition when compiled with the effects of increasing time predicted a 0.28 reduction in positive PANAS score when compared to the fMRI-guided site.

# exploratory: trauma
pos_pre_model_trauma <- lmer(value ~ tx_day * site * Total_traumas + pos_base_0 + (1 | Record.ID), data = pos_by_measure_pre_integer)
summary(pos_pre_model_trauma)
# Baseline score, and time x trauma had a significant effect on PANAS score.
  # Higher baseline score predicts higher positive PANAS score.
  # Being in the standard target condition when compiled with the effects of increasing trauma experience predicted a 0.10 increase in positive PANAS score when compared to the fMRI-guided site.

# exploratory: task vs video
pos_pre_model_task <- lmer(value ~ tx_day * site * TaskORVideo + pos_base_0 + (1 | Record.ID), data = pos_by_measure_pre_integer)
summary(pos_pre_model_task)
# Time and time x site had a significant effect on PANAS score.
  # Increase of time predicts increase of positive PANAS score.
  # Being in the standard target condition when compiled with the effects of increasing time predicted a 0.47 reduction in positive PANAS score when compared to the fMRI-guided site.

```

## Notes on interpreting these linear mixed effects models:

```{r}

# MY NOTES

# this code accounts for the random intercepts due to Record.ID and tests for the main effects and interaction between "variable" and "site."
# Interpretation:
#   "Intercept" represents the estimated value of "value" when all other predictors are zero.
#   "Variable" is a significant predictor (p = 0.00171), with an estimated coefficient of 0.30886.
#   "Site2" is not a significant predictor (p = 0.82054), with an estimated coefficient of -0.55504.
#   The "Site2" predictor (a level of the "site" factor) is also compared to the "Value" response variable. It tests whether being in "Site2" (compared to a reference level, likely "Site1") is associated with differences in the "Value."
# The "Variable:Site2" interaction term represents the combined effect of the "Variable" and "Site2" on the dependent variable "Value." It tests whether the effect of "Variable" on "Value" differs depending on whether the observation is in "Site2."
# The "Intercept" represents the estimated value of the dependent variable "Value" when all other predictor variables are zero.
# The coefficient (Estimate) indicates direction of relationship (change from mean panas score [mean = estimate intercept])

# The effect of day on pre panas score is significant. The pre PANAS scores in Site2 alone were not significantly different than those in site1. The effect of day on pre PANAS score is significantly different when the observation is in site2.

#value is the dependent variable (score).
#variable is the time variable.
#site is the grouping variable (site group).
#(1 | Record.ID) specifies random intercepts for each subject (assuming Record.ID represents the subject identifier). This accounts for the repeated measures nature of your data.

#The variable * site term in the formula specifies the main effect of time, the main effect of the site group, and the interaction effect between time and the site group. By including this interaction term, you can assess whether the effect of time on the score is moderated by the site group.

#The summary output of the mixed-effects model will provide information about the significance of the main effects and the interaction effect. Specifically, you'll want to examine the p-values associated with the interaction term (variable * site) to determine whether the site group significantly moderates the effect of time on the score.

#This approach allows you to simultaneously test whether the score significantly increased over time (main effect of time) and whether this effect was moderated by the site group (interaction effect).
```

```{r}

view(full_negative_data)
view(full_negative_data_2)

# REPEAT FOLLOWING STEPS FOR NEGATIVE DATA USING full_negative_data----
library(tidyverse)
# install.packages("reshape2")                 
library("reshape2")  

# reshape data wide to long using melt
negative_long <- melt(full_negative_data_2, id.vars = "Record.ID")

View(negative_long)

negative_long_2 <- negative_long[-c(1:135, 2071:2115), ] 

# positive and negative long 2 should have 1935 entries
# load in site data

site_data <- read.csv("/Users/saraig/Documents/Cure study R/sitedata.csv")

site_data_2 <- site_data %>% mutate(site = Site.of.Stimulation.1...1.fMRI.Guided..2.Standard..6cm.) %>% 
 select(c(Record.ID, site)) %>% na.omit()

trauma_data_2 <- kristin_data_unique %>%
select(c(Record.ID, Total_traumas))

neg_site_long <- full_join(negative_long_2, site_data_2)

neg_site_long <- full_join(neg_site_long, trauma_data_2)

neg_site_long <- neg_site_long[-c(1936:1941), ] 

view(neg_site_long)
# rename 'variable' to txday

# separate data by site
# 1 = fMRI guided
# 2 = Standard (6cm) site

# i think this is unecessary
# pos_fmri_guided_long <- pos_site_long[pos_site_long$site == 1, ] 
# pos_standard_long <- pos_site_long[pos_site_long$site == 2, ] 

# this step is only necessary if you need to plot in the correct order of participants (it will change order to pos_base_0, pre_tms_1, tms_break_1, post_task_1, post_tms_1... through all 45 participants)

# reorder the rows (pattern repeats every 44 observations)
# Sample dataframe
#pos_site_long_2 <- data.frame(Value = 1:1935, # Replace with your actual data, OtherColumn = rnorm(1935)) # Replace with your actual data

# Create an index column that represents the pattern
#pattern_index <- rep(1:45, length.out = nrow(pos_site_long))

# Add the pattern index as a new column in the dataframe
# pos_site_long$PatternIndex <- pattern_index

# Now, you can reorder the dataframe based on the pattern index
# pos_site_long_2 <- pos_site_long[order(pos_site_long$PatternIndex), ]

#view(pos_site_long_2)

# Maybe, leave in pattern index column for now (just for my own reference) or...
# Remove the pattern index column if you no longer need it
# df <- df[, -ncol(df)]


# *************
# neg_site_long is the order with all measures in order (baseline, pre tims, pre task, tms break, post tms)

# neg_site_long_ 2 is the correct order (all data per participant in day/visit order)

library(tidyverse)
view(neg_site_long)

```

## Preparing Negative Affect Data for Analysis 

```{r}
# NEGATIVE PRE TMS ANALYSIS

# ****
# separate data by site
# 1 = fMRI guided 

# 2 = Standard (6cm) site

# Subset the 'pre' meaures
neg_pre_measures <- c("neg_base_0", "neg_pre_tms_1", "neg_pre_tms_2", "neg_pre_tms_3", "neg_pre_tms_4", "neg_pre_tms_5", "neg_pre_tms_6", "neg_pre_tms_7", "neg_pre_tms_8", "neg_pre_tms_9", "neg_pre_tms_10")

neg_by_measure_pre <- neg_site_long %>%
  filter(variable %in% neg_pre_measures) %>%
  group_by(Record.ID, site)

View(neg_by_measure_pre)

## to change color the site column has to be a discrete scale  

neg_by_measure_pre$site <- factor(neg_by_measure_pre$site)

# Check the structure of the data frame
str(neg_by_measure_pre$site)

# rename 'variable' to 'tx_day'
neg_by_measure_pre <- neg_by_measure_pre %>% 
       rename("tx_day" = "variable")

# ex.
# lmer(response_variable ~ fixed_effects + (random_effects | grouping_variable), data = your_data)

# change variable labels to integers (as.integer or as.numeric)
neg_by_measure_pre_integer <- neg_by_measure_pre %>%
  mutate(tx_day = as.integer(recode(tx_day, 
                                        neg_base_0 = 0, 
                                        neg_pre_tms_1 = 1, 
                                        neg_pre_tms_2 = 2,
                                        neg_pre_tms_3 = 3,
                                        neg_pre_tms_4 = 4,
                                        neg_pre_tms_5 = 5,
                                        neg_pre_tms_6 = 6,
                                        neg_pre_tms_7 = 7,
                                        neg_pre_tms_8 = 8,
                                        neg_pre_tms_9 = 9,
                                        neg_pre_tms_10 = 10)))

```

```{r}

# Linear Mixed Effects Model

# merge baseline score into neg_by_measure_pre_integer
neg_by_measure_pre_integer <- merge(neg_by_measure_pre_integer, full_negative_data_2[, c("Record.ID", "neg_base_0")], by.x = "Record.ID", by.y = "Record.ID", all.x = TRUE)

neg_by_measure_pre_integer$value <- as.integer(neg_by_measure_pre_integer$value)

neg_by_measure_pre_integer$neg_base_0 <- as.integer(neg_by_measure_pre_integer$neg_base_0)


# make sure neg_by_measure_pre_integer is in ascending order by 'tx_day'
neg_by_measure_pre_integer <- neg_by_measure_pre_integer %>% arrange(tx_day)

# merge in task and run analysis for task
# 1 = Task (high arousal)
# 2 = Video (low arousal)

neg_by_measure_pre_integer <- merge(neg_by_measure_pre_integer, kristin_data_unique[, c("Record.ID", "TaskORVideo")], by.x = "Record.ID", by.y = "Record.ID", all.x = TRUE)

View(neg_by_measure_pre_integer)

# make sure pos_by_measure_pre_integer is in ascending order by 'tx_day'
neg_by_measure_pre_integer <- neg_by_measure_pre_integer %>% arrange(tx_day)

# make sure it understands TaskORvideo as a factor with two levels
neg_by_measure_pre_integer$TaskORVideo <- as.factor(neg_by_measure_pre_integer$TaskORVideo)

# neg_by_measure_pre_integer$TaskORVideo.y = NULL

# neg_by_measure_pre_integer <- neg_by_measure_pre_integer %>%
#  rename(TaskORVideo = TaskORVideo.y)

# make sure it understands site as a factor with two levels
neg_by_measure_pre_integer$site <- as.factor(neg_by_measure_pre_integer$site)

# Use as a reference
# Create the mixed-effects model with the baseline score as a predictor (not separating by site)

# main effect: site
neg_pre_model <- lmer(value ~ tx_day * site + neg_base_0 + (1 | Record.ID), data = neg_by_measure_pre_integer)
summary(neg_pre_model)
# Time and baseline score had a significant effect on PANAS score.
  # Increase of time predicts a reduced negative PANAS score.
  # Higher baseline negative score predicts higher negative PANAS score.

# exploratory: trauma
neg_pre_model_trauma <- lmer(value ~ tx_day * site * Total_traumas + neg_base_0 + (1 | Record.ID), data = neg_by_measure_pre_integer)
summary(neg_pre_model_trauma)
# Time and baseline score had a significant effect on PANAS score.
  # Increase of time predicts a reduced negative PANAS score.
  # Higher baseline negative score predicts higher negative PANAS score.

# exploratory: task
neg_pre_model_task <- lmer(value ~ tx_day * site * TaskORVideo + neg_base_0 + (1 | Record.ID), data = neg_by_measure_pre_integer)
summary(neg_pre_model_task)
# Time and baseline score had a significant effect on PANAS score.
  # Increase of time predicts a reduced negative PANAS score.
  # Higher baseline negative score predicts higher negative PANAS score.


```

# Plots

## Positive Affect Plots

### Positive Plot 1: Site (Main Effect)

```{r}

pos_pre_gg <- ggplot(pos_by_measure_pre_integer,
       aes(x = tx_day,
           y = value, color = site, group = Record.ID)) +
           geom_point(position = "jitter", alpha = 0.18) +
           geom_line(alpha = 0.18) +
 scale_color_manual(labels = c("fMRI-guided Targeting Method", "Standard Targeting Method"), values = c("1"='#1874CD', "2"='#CD0000')) +
geom_smooth(aes(group = site), se = FALSE, method = 'lm') +
# geom_line(data = pos_ab_line_data, aes(x = tx_day, y = predicted_value, group = site)) +
theme_bw() +
theme(legend.position='none', axis.text.x = element_text(vjust=.7), 
plot.title = element_text(size = 11)) +
guides(colour=guide_legend(title="Session 1 Site of Target")) +
labs(title = "Positive PANAS Pre TMS Ratings by Site of Target") +
ylab('Positive PANAS Rating') +
xlab('TMS Intervention Days') +
scale_x_continuous(breaks = seq(0, 10, 1))

print(pos_pre_gg)

ggsave("pos_pre_gg.png", plot = pos_pre_gg, width = 4, height = 3, units = "in")

# extract publishable table from pos_pre_model
# install.packages("sjPlot")
library(sjPlot)

summary(pos_pre_model)

pos_summary_table <- tab_model(pos_pre_model)

print(pos_summary_table)
summary(pos_pre_model) # to confirm

# Extract the relevant information from sjTable
pos_data <- pos_summary_table$table

# Convert sjTable to a data frame
pos_summary_df <- data.frame(pos_data)

# Save the data frame to a CSV file
write.csv(pos_summary_df, "pos_summary.csv")

```

### Positive Plot 2: Trauma (Exploratory)

```{r}
# Trauma Plot
pos_pre_gg_trauma <- ggplot(pos_by_measure_pre_integer,
       aes(x = Total_traumas,
           y = value, color = site, group = Record.ID)) +
           geom_point(position = "jitter", alpha = 0.18) +
           geom_line(alpha = 0.18) +
 scale_color_manual(labels = c("fMRI-guided Targeting Method", "Standard Targeting Method"), values = c("1"='#1874CD', "2"='#CD0000')) +
geom_smooth(aes(group = site), se = FALSE, method = 'lm') +
# geom_line(data = pos_ab_line_data, aes(x = tx_day, y = predicted_value, group = site)) +
theme_bw() +
theme(legend.position='none', axis.text.x = element_text(vjust=.7), 
plot.title = element_text(size = 11)) +
guides(colour=guide_legend(title="Session 1 Site of Target")) +
labs(title = "Positive PANAS Pre TMS Ratings by Site of Target") +
ylab('Positive PANAS Rating') +
xlab('Instances of Trauma Experience') 
# scale_x_continuous(breaks = seq(0, 10, 1))

print(pos_pre_gg_trauma)

ggsave("pos_pre_gg_trauma.png", plot = pos_pre_gg_trauma, width = 4, height = 3, units = "in")

```

### Positive Plots 3 & 4: Task Condition (Exploratory)

```{r}
# Positive Plot: Grouped by Task
# site has to be a factor

# Recode the TaskORVideo variable and assign new labels
pos_by_measure_pre_integer$TaskORVideo <- ifelse(pos_by_measure_pre_integer$TaskORVideo == 1, "Task", "Video")

# Recode the TaskORVideo variable and assign new labels
neg_by_measure_pre_integer$TaskORVideo <- ifelse(neg_by_measure_pre_integer$TaskORVideo == 1, "Task", "Video")

# fmri-guided site 1
# Create the ggplot with interactions
cols = c("2+Task"='#D45769', "2+Video"='#E69D45', "1+Task"="#5A9BD4", "1+Video"='#3B4E78')

# new column in df called interaction
pos_by_measure_pre_integer_2 <- pos_by_measure_pre_integer %>%
  mutate(interaction = ifelse(site == 1 & TaskORVideo == "Task", "1+Task",
                     ifelse(site == 1 & TaskORVideo == "Video", "1+Video",
                     ifelse(site == 2 & TaskORVideo == "Task", "2+Task",
                     ifelse(site == 2 & TaskORVideo == "Video", "2+Video",
                            "Other")))))
# try filtered for site
pos_by_measure_pre_integer_2_filtered1 <- pos_by_measure_pre_integer_2 %>%
  filter(site == 1)

# fMRI-guided plot split by task
pos_pre_gg_task_interactions1 = ggplot (pos_by_measure_pre_integer_2_filtered1, aes (x=factor (tx_day), y=value, color=interaction)) + geom_boxplot(outlier.shape=NA) + scale_color_manual(values = cols) + theme(legend.position='none', legend.title=element_blank(), axis.text.x = element_text(vjust=.7)) +
theme_bw() + guides(fill=guide_legend(title="Phase 1 Site+Condition")) +
guides(color = guide_legend(title = "Session 1 Randomized Groups")) + ylab ('Positive PANAS Ratings') + scale_x_discrete(labels=c("0" = "0", "1" = "1", "2" = "2", "3" = "3", "4" = "4", "5" = "5", "6" = "6", "7" = "7", "8" = "8", "9" = "9", "10" = "10")) + xlab ('TMS Intervention Days') + geom_point(position=position_jitterdodge(), size=0.5) +
  labs(title = "Positive Pre TMS Ratings by fMRI-guided Target/Task Condition") +
theme(plot.title = element_text(size = 9)) +
guides(color = "none")
# facet_grid(~site, scales="free_x", space="free_x")
plot (pos_pre_gg_task_interactions1)

ggsave("pos_pre_gg_task_interactions1.png", plot = pos_pre_gg_task_interactions1, width = 4, height = 3, units = "in")


# Plot by standard site 2 
# new column in df called interaction

# try filtered for site
pos_by_measure_pre_integer_2_filtered2 <- pos_by_measure_pre_integer_2 %>%
  filter(site == 2)

pos_pre_gg_task_interactions2 = ggplot (pos_by_measure_pre_integer_2_filtered2, aes (x=factor (tx_day), y=value, color=interaction)) + geom_boxplot(outlier.shape=NA) + scale_color_manual(values = cols) + theme(legend.position='none', legend.title=element_blank(), axis.text.x = element_text(vjust=.7)) +
theme_bw() + guides(fill=guide_legend(title="Phase 1 Site+Condition")) +
guides(color = guide_legend(title = "Session 1 Randomized Groups")) + ylab ('Positive PANAS Ratings') + scale_x_discrete(labels=c("0" = "0", "1" = "1", "2" = "2", "3" = "3", "4" = "4", "5" = "5", "6" = "6", "7" = "7", "8" = "8", "9" = "9", "10" = "10")) + xlab ('TMS Intervention Days') + geom_point(position=position_jitterdodge(), size=0.5) +
  labs(title = "Positive Pre TMS Ratings by Standard Target/Task Condition") +
theme(plot.title = element_text(size = 9))  +
guides(color = "none")
# facet_grid(~site, scales="free_x", space="free_x")
plot (pos_pre_gg_task_interactions2)

ggsave("pos_pre_gg_task_interactions2.png", plot = pos_pre_gg_task_interactions2, width = 4, height = 3, units = "in")
```

## Negative Affect Plots

### Negative Plot 1: Site (Main Effect)

```{r}

neg_by_measure_pre_integer$site <- as.factor(neg_by_measure_pre_integer$site)

neg_pre_gg <- ggplot(neg_by_measure_pre_integer,
       aes(x = tx_day,
           y = value, color = site, group = Record.ID)) +
           geom_point(position = "jitter", alpha = 0.20) +
           geom_line(alpha = 0.20) +
 scale_color_manual(labels = c("fMRI-guided Targeting Method", "Standard Targeting Method"), values = c("1"='#1874CD', "2"='#CD0000')) +
geom_smooth(aes(group = site), se = FALSE, method = 'lm') +
# geom_line(data = pos_ab_line_data, aes(x = tx_day, y = predicted_value, group = site)) +
theme_bw() +
theme(legend.position='none', axis.text.x = element_text(vjust=.7), 
plot.title = element_text(size = 11)) +
guides(colour=guide_legend(title="Session 1 Site of Target")) +
labs(title = "Negative PANAS Pre TMS Ratings by Site of Target") +
ylab('Negative PANAS Rating') +
xlab('TMS Intervention Days') +
scale_x_continuous(breaks = seq(0, 10, 1))

print(neg_pre_gg)

ggsave("neg_pre_gg.png", plot = neg_pre_gg, width = 4, height = 3, units = "in")

neg_summary_table <- tab_model(neg_pre_model)

print(neg_summary_table)

summary(neg_pre_model) # to confirm

# Extract the relevant information from sjTable
neg_data <- pos_summary_table$table

# Convert sjTable to a data frame
neg_summary_df <- data.frame(neg_data)

# Save the data frame to a CSV file
write.csv(neg_summary_df, "neg_summary.csv")

```

### Negative Plot 2: Trauma (Exploratory)

```{r}

# trauma 
neg_pre_gg_trauma <- ggplot(neg_by_measure_pre_integer,
       aes(x = Total_traumas,
           y = value, color = site, group = Record.ID)) +
           geom_point(position = "jitter", alpha = 0.20) +
           geom_line(alpha = 0.20) +
 scale_color_manual(labels = c("fMRI-guided Targeting Method", "Standard Targeting Method"), values = c("1"='#1874CD', "2"='#CD0000')) +
geom_smooth(aes(group = site), se = FALSE, method = 'lm') +
# geom_line(data = pos_ab_line_data, aes(x = tx_day, y = predicted_value, group = site)) +
theme_bw() +
theme(legend.position='none', axis.text.x = element_text(vjust=.7), 
plot.title = element_text(size = 11)) +
guides(colour=guide_legend(title="Session 1 Site of Target")) +
labs(title = "Negative PANAS Pre TMS Ratings by Site of Target") +
ylab('Negative PANAS Rating') +
xlab('Instances of Trauma Experience') 
# scale_x_continuous(breaks = seq(0, 10, 1))

print(neg_pre_gg_trauma)

```

### Negative Plots 3 & 4: Task Condition (Exploratory)

```{r}
# Negative by Task
neg_by_measure_pre_integer$TaskORVideo <- as.factor(neg_by_measure_pre_integer$TaskORVideo)

# Recode the TaskORVideo variable and assign new labels
neg_by_measure_pre_integer$TaskORVideo <- ifelse(neg_by_measure_pre_integer$TaskORVideo == 1, "Task", "Video")

# fmri-guided site 1
# Create the ggplot with interactions
cols = c("2+Task"='#D45769', "2+Video"='#E69D45', "1+Task"="#5A9BD4", "1+Video"='#3B4E78')

# new column in df called interaction
neg_by_measure_pre_integer_2 <- neg_by_measure_pre_integer %>%
  mutate(interaction = ifelse(site == 1 & TaskORVideo == "Task", "1+Task",
                     ifelse(site == 1 & TaskORVideo == "Video", "1+Video",
                     ifelse(site == 2 & TaskORVideo == "Task", "2+Task",
                     ifelse(site == 2 & TaskORVideo == "Video", "2+Video",
                            "Other")))))
# try filtered for site
neg_by_measure_pre_integer_2_filtered1 <- neg_by_measure_pre_integer_2 %>%
  filter(site == 1)

neg_pre_gg_task_interactions1 = ggplot (neg_by_measure_pre_integer_2_filtered1, aes (x=factor (tx_day), y=value, color=interaction)) + geom_boxplot(outlier.shape=NA, show.legend = FALSE) + scale_color_manual(values = cols) + theme(legend.position='none', legend.title=element_blank(), axis.text.x = element_text(vjust=.7)) +
theme_bw() + guides(fill=guide_legend(title="Phase 1 Site+Condition")) +
guides(color = guide_legend(title = "Session 1 Randomized Groups")) + ylab ('Negative PANAS Ratings') + scale_x_discrete(labels=c("0" = "0", "1" = "1", "2" = "2", "3" = "3", "4" = "4", "5" = "5", "6" = "6", "7" = "7", "8" = "8", "9" = "9", "10" = "10")) + xlab ('TMS Intervention Days') + geom_point(position=position_jitterdodge(), size=0.5, show.legend = FALSE) +
  labs(title = "Negative Pre TMS Ratings by fMRI-guided Target/Task Condition") +
theme(plot.title = element_text(size = 8))
# facet_grid(~site, scales="free_x", space="free_x")
plot (neg_pre_gg_task_interactions1)

ggsave("neg_pre_gg_task_interactions1.png", plot = neg_pre_gg_task_interactions1, width = 4, height = 3, units = "in")


# standard site 2 
# new column in df called interaction

# try filtered for site
neg_by_measure_pre_integer_2_filtered2 <- neg_by_measure_pre_integer_2 %>%
  filter(site == 2)

neg_pre_gg_task_interactions2 = ggplot (neg_by_measure_pre_integer_2_filtered2, aes (x=factor (tx_day), y=value, color=interaction)) + geom_boxplot(outlier.shape=NA, show.legend = FALSE) + scale_color_manual(values = cols) + theme(legend.position='right', legend.title=element_blank(), axis.text.x = element_text(vjust=.7)) +
theme_bw() + guides(fill=guide_legend(title="Phase 1 Site+Condition")) +
guides(color = guide_legend(title = "Session 1 Randomized Groups")) + ylab ('Negative PANAS Ratings') + scale_x_discrete(labels=c("0" = "0", "1" = "1", "2" = "2", "3" = "3", "4" = "4", "5" = "5", "6" = "6", "7" = "7", "8" = "8", "9" = "9", "10" = "10")) + xlab ('TMS Intervention Days') + geom_point(position=position_jitterdodge(), size=0.5, show.legend = FALSE) +
  labs(title = "Negative Pre TMS Ratings by Standard Target/Task Condition") +
theme(plot.title = element_text(size = 8))
# facet_grid(~site, scales="free_x", space="free_x")
plot (neg_pre_gg_task_interactions2)

ggsave("neg_pre_gg_task_interactions2.png", plot = neg_pre_gg_task_interactions2, width = 4, height = 3, units = "in")

```

## Calculating slope for each main effect line 

A greater slope indicates a greater clinical symptom improvement. This helps me compare the standard vs. fMRI-guided treatment condition.

```{r}
# Calculate slope for each main effect line
summary(pos_pre_model)
# tx_day estimate = 0.30500

# Calculate slope for each line
summary(neg_pre_model)
# tx_day estimate = 0.50567
```

## Calculating rate of change for each model

A greater rate of change indicates a greater clinical symptom improvement. This helps me compare the standard vs. fMRI-guided treatment condition.

```{r}

# Find rate of change for each model 

# Mean imputation for "value":
pos_by_measure_pre_integer_2$value[which(is.na(pos_by_measure_pre_integer_2$value))] = mean(pos_by_measure_pre_integer_2$value, na.rm = TRUE)

# Calculate the change in 'value' from tx_day 0 to tx_day 10 for each participant
library(dplyr)

pos_by_measure_pre_integer_2_change <- pos_by_measure_pre_integer_2 %>%
  filter(tx_day %in% c(0, 10)) %>%
  group_by(site, Record.ID) %>%
  summarize(change = diff(value), .groups = "drop")

# Calculate the overall group change per site
pos_group_change <- pos_by_measure_pre_integer_2_change %>%
  group_by(site) %>%
  summarize(avg_change = mean(change), .groups = "drop")

# Print or visualize the group change data
print(pos_group_change)


# NEGARIVE RATE OF CHANGE
# Mean imputation for "value":
neg_by_measure_pre_integer_2$value[which(is.na(neg_by_measure_pre_integer_2$value))] = mean(neg_by_measure_pre_integer_2$value, na.rm = TRUE)

# Calculate the change in 'value' from tx_day 0 to tx_day 10 for each participant.

neg_by_measure_pre_integer_2_change <- neg_by_measure_pre_integer_2 %>%
  filter(tx_day %in% c(0, 10)) %>%
  group_by(site, Record.ID) %>%
  summarize(change = diff(value), .groups = "drop")

# Calculate the overall group change per site
neg_group_change <- neg_by_measure_pre_integer_2_change %>%
  group_by(site) %>%
  summarize(avg_change = mean(change), .groups = "drop")

# Print or visualize the group change data
print(neg_group_change)

# Positive Rate of Change by task and site

# Filter data for the specified interactions and tx_day values
pos_by_measure_pre_integer_2_change_task <- pos_by_measure_pre_integer_2 %>%
  filter(tx_day %in% c(0, 10)) %>%
    group_by(interaction, Record.ID) %>%
  summarize(change = diff(value), .groups = "drop")
         
# Calculate the change for each participant
pos_group_change_task <- pos_by_measure_pre_integer_2_change_task %>%
  group_by(interaction) %>%
  summarize(avg_change = mean(change), .groups = "drop")

# Print or visualize the group change data
print(pos_group_change_task)


# Negative Rate of Change by task and site

# Filter data for the specified interactions and tx_day values.
neg_by_measure_pre_integer_2_change_task <- neg_by_measure_pre_integer_2 %>%
  filter(tx_day %in% c(0, 10)) %>%
    group_by(interaction, Record.ID) %>%
  summarize(change = diff(value), .groups = "drop")
         
# Calculate the change for each participant.
neg_group_change_task <- neg_by_measure_pre_integer_2_change_task %>%
  group_by(interaction) %>%
  summarize(avg_change = mean(change), .groups = "drop")

# Print or visualize the group change data.
print(neg_group_change_task)



```

# Conclusion/Discussion

These figures represent a linear mixed effects model using the target site, task condition, and trauma experience as predictors of the PANAS score. Blue represents the fMRI-guided site; red represents the standard.

-   The top Positive and Negative PANAS plots depict changes in positive and negative PANAS scores over the study

-   In the positive plot, the fMRI-guided site showed greater improvement in positive affect, while in the negative plot, the standard site showed a greater reduction in negative affect

-   In fact, the standard site was associated with a significantly lower positive affect than the fMRI-guided site when combined with the effect of time, as in a real-world scenario

-   The plots separated by site and task show positive PANAS changes grouped by site and task, while the bottom does the same for negative affective ratings

Overall, the fMRI-guided site showed greater improvement rates than the standard site. The task condition also outperformed, confirming other studies linking heightened brain arousal to superior TMS responses

Trauma experience was insignificant. However, it is notable that higher trauma experience was associated with greater positive affect improvement, a connection we plan to explore further. Despite the promising trends found, only the cumulative effects of TMS over time were associated with clinical improvement in effective ratings, while trauma preponderance, site of target, and task condition were not. Our group did find that the fMRI-guided target resulted in a significantly greater reduction in depression symptoms. These findings suggest that in this preliminary analysis, affect, unlike symptoms of depression, may not be significantly influenced by other factors that are thought to moderate TMS receptivity (mechanisms include optimized frequency, and optimized target \[using TMS to highlight more relevant neural regions involved in symptoms of depression/PTSD\])

## Next Steps

-   In our future directions, we will remove the site as a predictor and look at the other covariates per site

-   We aim to comprehend why increased trauma experience was associated with a greater positive affect improvement. Considering TMS's role in enhancing functional connectivity in the brain, if participants with substantial trauma experience exhibit reduced connectivity to their sgACC, the observed relationship may stem from TMS effectively improving it, thereby driving the enhanced positive effect

There's a lot more we can still look at (i.e. other time points when PANAS was collected), but our findings underscore the potential of personalized neuroimaging the imaging tools in non-invasive brain stimulation treatment of psychiatric disorders
