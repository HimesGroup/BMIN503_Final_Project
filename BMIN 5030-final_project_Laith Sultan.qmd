---
title: "Assessing the Diagnostic Accuracy of Automated 3D Kidney Measurements in Detecting Urinary Tract Dilations"
subtitle: "BMIN503/EPID600 Final Project"
author: "First_Latih Last_Sultan"
format: html
editor: visual
embed-resources: true
---

------------------------------------------------------------------------

Use this template to complete your project throughout the course. Your Final Project presentation will be based on the contents of this document. Replace the title/name above and text below with your own, but keep the headers. Feel free to change the theme and other display settings, although this is not required.

### Overview

In this project, we evaualte 3D ultrasound kidney measurments as an objective alternative for the current clincial assessment of urinary tract dilation (UTD)

\### Introdction

Urinary tract dilation (UTD), represents a prevalent abnormality in pediatric kidneys, and the existing approaches for reporting UTD exhibit notable variability. Consequently, there arises a necessity for more objective methods that can offer precise evaluations of UTD. Employing 3D kidney volume measurements presents an opportunity for a quantitative evaluation of both kidney dilation and renal enlargement. This research aims to assess the diagnostic potential of automated 3D kidney volume measurements, obtained through ultrasound (US), aiming to discern and categorize UTD. Furthermore, it seeks to compare the diagnostic accuracy of these quantitative measurements with clinical exam interpretation.

### Methods

Renal ultrasound (US) images obtained from a cohort of 37 patients underwent segmentation and analysis employing an innovative 3D segmentation tool. Segmentation measurements were computed to assess the 3D kidney volumes of the: capsule, collecting system, collecting system inside the capsule, collecting system outside the capsule, and of the parenchyma. Overall HydroIndex of the collecting system as well as HydroIndex inside the capsule were computed. The kidneys were categorized into two groups, normal or those with UTD, based on review of US images by a pediatric radiologist. The mean ± standard error (SE) of each measurement was compared between the normal and UTD cases using a two-sided Student t-test. Additionally, a logistic regression model was employed to evaluate the diagnostic performance of the 3D kidney measurements. The model performance was compared and correlated to the 2D US assessment.

```{r}
# Set the working directory
setwd("C:/Users/laith/Desktop/BMIN503_Final_Project")

# Load the dataset
kidney_data <- read.csv("kidney_data.csv")

```

```{r}
# Plot the horizontal bar graph with all features
ggplot(results_long, aes(x = Mean, y = feature, fill = as.factor(diagnosis))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Comparison of Means between Two Groups",
       x = "Mean",
       y = "Feature",
       fill = "Diagnosis") +
  theme_minimal() +
  theme(axis.text.y = element_text(hjust = 0, vjust = 0.5))  # Adjust the position of y-axis labels


```

```{r}
# Assuming you have a data frame named 'results_long' with columns: diagnosis, feature, Mean, SE
# Replace 'diagnosis', 'feature', 'Mean', and 'SE' with your actual column names

# Plot the longitudinal boxplot with error bars
ggplot(results_long, aes(x = feature, y = Mean, fill = as.factor(diagnosis))) +
  geom_boxplot(position = position_dodge(width = 0.8), width = 0.7) +
  geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), 
                position = position_dodge(width = 0.8), 
                width = 0.2,
                color = "black", # Change the color of error bars
                size = 0.7) +    # Adjust the size of error bars
  labs(title = "Comparison of Means between Two Groups",
       x = "Feature",
       y = "Mean",
       fill = "Diagnosis") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability

```

### Results

Six of the seven 3D measurements exhibited statistically significant differences (p\<0.05) between UTD and normal kidneys. Notable disparities included increased capsule volume (110.32 ± 18.9 vs. 55.04 ± 8.28), collecting system volume (33.76 ± 6.76 vs. 1.49 ± 0.4), collecting system inside capsule volume (26.98 ± 5.65 vs. 1.49 ± 0.4), collecting system outside capsule volume (8.03 ± 2.55 vs. 0.0 ± 0), and decreased HydroIndex in both collecting system (0.73 ± 0.02 vs. 0.97 ± 0.01) and collecting system inside capsule (0.77 ± 0.02 vs. 0.97 ± 0.01) in those with UTD versus normal, respectively. (Table 1) The logistic regression model based on 3D kidney measurements combined showed a high diagnostic performance, with area under the curve (AUC): 0.96, sensitivity (Sn): 87.2% and specificity (Sp): 92%, in differentiating normal vs. UTD cases. Notably, the individual features within the model displayed varying levels of accuracy. 3D parenchymal volume (AUC 0.62, Sn 31.9%, Sp 92.3%), capsule volume (AUC 0.73, Sn 87.2%, Sp 50%), collecting system outside capsule volume (AUC 0.76, Sn 53.2%, Sp 100%), collecting system inside capsule volume (AUC 0.96, Sn 89.4%, Sp 92.3%), collecting system volume (AUC 0.97, Sn 91.5%, Sp 92.3%), HydroIndex collecting system (AUC 0.96, Sn 96.2%, Sp 85.1%), and HydroIndex collecting system inside capsule (AUC 0.96, Sn 87.2%, Sp 92%). (Figure 1 and Table 2) When comparing 3D kidney volume model performance to that of clinical assessment, a strong correlation (correlation coefficient r=0.85, p\<0.001) was observed.

Describe your results and include relevant tables, plots, and code/comments used to obtain them. End with a brief conclusion of your findings related to the question you set out to address. You can include references if you'd like, but this is not required.

```{r}
# Install and load the pROC package
install.packages("pROC")
library(pROC)

# Assuming you have a data frame named 'kidney_data' with columns: diagnosis, capsule, collecting_system, collecting_system_inside, parenchyma, hydroindex

# Select the specific features
features <- c("capsule", "collecting_system", "collecting_system_inside", "parenchyma", "hydroindex")

# Initialize an empty list to store ROC values
roc_values <- list()

# Loop through each feature and calculate ROC
for (feature in features) {
  # Create a ROC curve
  roc_curve <- roc(kidney_data$diagnosis, kidney_data[[feature]])
  
  # Store the ROC curve in the list
  roc_values[[feature]] <- roc_curve
}

# Access and print the ROC values for each feature
for (feature in features) {
  cat("ROC AUC for", feature, ":", auc(roc_values[[feature]]), "\n")
}

```

```{r}
# Install and load the pROC package
install.packages("pROC")
library(pROC)

# Assuming you have a data frame named 'kidney_data' with columns: diagnosis, capsule, collecting_system, collecting_system_inside, parenchyma, hydroindex
# Replace 'capsule', 'collecting_system', 'collecting_system_inside', 'parenchyma', 'hydroindex' with your actual feature names

# Select specific features
selected_features <- c("capsule", "collecting_system", "collecting_system_inside", "parenchyma", "hydroindex")
features <- kidney_data[, c("diagnosis", selected_features)]

# Initialize an empty list to store ROC values
roc_values <- list()

# Loop through each feature and calculate ROC
for (feature in selected_features) {
  # Create a ROC curve
  roc_curve <- roc(features$diagnosis, features[[feature]])
  
  # Store the ROC curve in the list
  roc_values[[feature]] <- roc_curve
  
  # Plot the ROC curve
  plot(roc_curve, main = paste("ROC Curve for", feature), col = rainbow(1))
}

```

```{r}
# Install and load the necessary packages
install.packages(c("pROC", "glmnet"))
library(pROC)
library(glmnet)

# Assuming you have a data frame named 'kidney_data' with columns: diagnosis, capsule, collecting_system, collecting_system_inside, parenchyma, hydroindex
# Replace 'capsule', 'collecting_system', 'collecting_system_inside', 'parenchyma', 'hydroindex' with your actual feature names

# Select specific features
selected_features <- c("capsule", "collecting_system", "collecting_system_inside", "parenchyma", "hydroindex")
features <- kidney_data[, c("diagnosis", selected_features)]

# Fit logistic regression model
model <- glm(diagnosis ~ ., data = features, family = "binomial")

# Predict probabilities
predicted_probs <- predict(model, newdata = features, type = "response")

# Create ROC curve
roc_curve_combined <- roc(features$diagnosis, predicted_probs)

# Plot the ROC curve
plot(roc_curve_combined, main = "Combined ROC Curve", col = "blue")

```

Conlcusions:
