---
title: "My Final Project"
subtitle: "BMIN503/EPID600 Final Project"
author: "Elaine Sang"
format: html
editor: visual
number-sections: true
embed-resources: true
---

------------------------------------------------------------------------

## Overview {#sec-overview}

This is an exploratory study on whether a random forest model using age, insurance status, gender, and race/ethnicity, etc. can predict the likelihood death or being discharged to hospice among patients with pulmonary hypertension. The purpose of this study is to become familiarized with methods associated with random forest modeling. I anticipate creating an ROC curve with 1000 trees and using 10-fold cross validation for this study.

## Introduction {#sec-introduction}

Pulmonary hypertension, as defined by the National Heart, Lung, and Blood Institute, is a chronic disease characterized by elevated blood pressure within the lungs. This causes increase strain within the heart as it needs to work harder to pump blood to the lungs. There are many different types of pulmonary hypertension, including chronic thromboembolic pulmonary hypertension, pulmonary arterial hypertension, pulmonary hypertension from left-sided heart disease, and primary pulmonary hypertension. This chronic condition does not have a cure, is progressive, and directly contributes to debilitating symptoms such as shortness of breath and chest pain. However, the pulmonary hypertension patient population is seriously understudied, leading to knowledge gaps that may impact care.

For this final project, I want to conduct an exploratory study to examine whether a random forest model using patient level factors, such as age, insurance status, gender, type of pulmonary hypertension, and comorbidity, can predict the likelihood of death and/or hospice among patients diagnosed with pulmonary hypertension. Findings may inform future policies, individualized care plans, precision medicine, and clinical practice guidelines to improve care among patients with pulmonary hypertension.

I have also created additional datasets, such as those regarding 30-day readmissions, post-acute care vs. not, and predicting discharge deposition, for future research studies.

## Methods {#sec-methods}

The Medical Information Mart for Intensive Care IV (MIMIC-IV) dataset was used for this project. The data user agreement was signed with PhysioNet, which is organized by MIT. MIMIC-IV contains de-identified data from patients admitted to the intensive care units (ICU) of Beth Israel Deaconess Medical Center from 2008 - 2019.

The R packages below were loaded to analyze the data.

```{r}
#| label: load-packages

library(dplyr) #to clean the data
library(comorbidity) # to calcuate get comorbidity scores
library(parsnip) # for random forest modeling 
library(naniar) #convert blank data into NAs
library(lubridate) 
library(randomForest)
library(pROC) # for multiclass ROC curves 
library(gtsummary) # for descriptive data analysis 
```

The following MIMIC-IV files were imported into R.

```{r}

#file with the ICD-9 and ICD-10 codes and corresponding diagnoses. Will not be directly used in data analysis but is needed to identify pulmonary hypertension patients. 
ICD_code_diagnosis <- read.csv("/Users/esang/Desktop/Upenn courses/fall 2023/BMIN 503/final project/mimic-iv-2.2/hosp/d_icd_diagnoses.csv.gz",header = TRUE, sep = ",")

#file with each patient's diagnoses and comorbidities 
all_patient_diagnoses <- read.csv("/Users/esang/Desktop/Upenn courses/fall 2023/BMIN 503/final project/mimic-iv-2.2/hosp/diagnoses_icd.csv.gz",header = TRUE, sep = ",")

#file with each patient's admissions information, which includes admission encouter (hadm_id), admit and discharge time, admission type (urgent, ER, observation, etc), discharge location (home, hospice, home health care, etc.), insurance (other, medicaid, medicare),language, martial status, race, etc. 
pt_admission_info <- read.csv("/Users/esang/Desktop/Upenn courses/fall 2023/BMIN 503/final project/mimic-iv-2.2/hosp/admissions.csv.gz",header = TRUE, sep = ",")

#file with each patients' personal characteristics, such as gender and age
pt_gender_age <- read.csv("/Users/esang/Desktop/Upenn courses/fall 2023/BMIN 503/final project/mimic-iv-2.2/hosp/patients.csv.gz",header = TRUE, sep = ",")

#file with patient service information
services <- read.csv("/Users/esang/Desktop/Upenn courses/fall 2023/BMIN 503/final project/mimic-iv-2.2/hosp/services.csv.gz")

```

After importing the MIMIC-IV files above, I selected the specific variables used within this project. In addition, I used "naniar" to convert blank data into NAs to assess for missing data later.

```{r}

#pt_admission_info
pt_admission_info_2 <- pt_admission_info |>
  select("subject_id", "hadm_id", "admittime", "dischtime", "admission_type", "insurance", "marital_status", "race", "hospital_expire_flag", "discharge_location")

pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(subject_id = ""))
pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(hadm_id = ""))
pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(admittime = ""))
pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(dischtime = ""))
pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(admission_type = ""))
pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(insurance = ""))
pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(marital_status = ""))
pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(race = ""))
pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(hospital_expire_flag = ""))
pt_admission_info_2 <- replace_with_na(pt_admission_info_2, replace = list(discharge_location = ""))

#pt_gender_age
pt_gender_age_2 <- pt_gender_age |>
  select("subject_id", "gender", "anchor_age")

pt_gender_age_2 <- replace_with_na(pt_gender_age_2, replace = list(subject_id = ""))
pt_gender_age_2 <- replace_with_na(pt_gender_age_2, replace = list(gender = ""))
pt_gender_age_2 <- replace_with_na(pt_gender_age_2, replace = list(anchor_age = ""))


#services
services_2 <- services |>
  select("subject_id", "hadm_id", "curr_service", "transfertime")

services_2 <- replace_with_na(services_2, replace = list(subject_id = ""))
services_2 <- replace_with_na(services_2, replace = list(hadm_id = ""))
services_2 <- replace_with_na(services_2, replace = list(curr_service = ""))
services_2 <- replace_with_na(services_2, replace = list(transfertime = ""))

#all_patient_diagnoses
all_patient_diagnoses_2 <- all_patient_diagnoses |>
  select("subject_id", "hadm_id", "icd_code", "icd_version", "seq_num")

all_patient_diagnoses_2 <- replace_with_na(all_patient_diagnoses_2, replace = list(subject_id = ""))
all_patient_diagnoses_2 <- replace_with_na(all_patient_diagnoses_2, replace = list(hadm_id = ""))
all_patient_diagnoses_2 <- replace_with_na(all_patient_diagnoses_2, replace = list(icd_code = ""))
all_patient_diagnoses_2 <- replace_with_na(all_patient_diagnoses_2, replace = list(icd_version = ""))
all_patient_diagnoses_2 <- replace_with_na(all_patient_diagnoses_2, replace = list(seq_num = ""))

```

A new dataset specifically for patients diagnosed with pulmonary hypertension was created. This was done by first retrieving the ICD-9 and ICD-10 codes for pulmonary hypertension. One of the retrieved ICD-10 codes is P2930, which references "pulmonary hypertension of newborn". Given that this project's focus is on adults, I will not move forward with this ICD code. A subset named PH_sample was created from all_patient_diagnoses_2 to only include those specifically diagnosed with pulmonary hypertension.

```{r}

ICD_PH <- ICD_code_diagnosis |>
  filter(grepl("pulmonary.*hypertension", long_title, ignore.case = TRUE))

print(ICD_PH)

PH_sample <- all_patient_diagnoses_2 |>
  filter(
    (icd_version == 9 & icd_code == '4160') | 
      (icd_version == 10 & icd_code %in% c('I270', 'I272', 'I2720', 'I2721', 'I2722', 'I2723', 'I2724', 'I2729'))
  )
```

Data manipulation on the files were done to categorize existing variables and add new variables. Existing variables were renamed for data management purposes.

Data manipulation for pt_admission_info_2:

```{r}
#pt_admission_info_2
#First, lets look at pt_admission_info_2: we want to get length of stay, whether the patient died, martial status, and race/ethnicity

#calcuate length of stay using admittime and dischtime, convert times to %Y-%m-%d %H:%M:%S format as it is already in such a format. 

pt_admission_info_2$admission_time <- as.POSIXct(pt_admission_info_2$admittime)
pt_admission_info_2$discharge_time <- as.POSIXct(pt_admission_info_2$dischtime)

#create new variable and calcuate length of stay 

pt_admission_info_2$length_of_stay <- as.numeric(difftime(pt_admission_info_2$discharge_time, pt_admission_info_2$admission_time, units = "days"))

#examine admission type and dichotomize the variables
#contains AMBULATORY OBSERVATION, EU OBSERVATION, URGENT, DIRECT EMER., EW EMER., DIRECT OBSERVATION, OBSERVATION ADMIT, ELECTIVE , and SURGICAL SAME DAY ADMISSION. Dichotomize to elective or emergency 

pt_admission_info_2$admit_category <- ifelse(pt_admission_info_2$admission_type %in% c("AMBULATORY OBSERVATION", "EU OBSERVATION", "URGENT", "DIRECT EMER.", "EW EMER.", "DIRECT OBSERVATION", "OBSERVATION ADMIT"), "emergency", ifelse(pt_admission_info_2$admission_type %in% c("ELECTIVE", "SURGICAL SAME DAY ADMISSION"), "elective", NA))

#examine marital_status and dichotomize the variables DIVORCED, MARRIED, SINGLE, WIDOWED to not_married or married. 

pt_admission_info_2$married_or_not <- ifelse(pt_admission_info_2$marital_status %in% c("DIVORCED", "WIDOWED", "SINGLE"), "not_married", ifelse(pt_admission_info_2$marital_status == "MARRIED", "married", NA))

#examine race and categorize the variables into unknown, asian, black, hispanic/latino, white, and other. 
pt_admission_info_2$race_category <- ifelse(pt_admission_info_2$race %in% c("UNKNOWN", "PATIENT DECLINED TO ANSWER", "UNABLE TO OBTAIN"), "unknown", ifelse(pt_admission_info_2$race %in% c("ASIAN", "ASIAN - CHINESE", "ASIAN - SOUTH EAST ASIAN", "ASIAN - ASIAN INDIAN", "ASIAN - KOREAN"), "asian", ifelse(pt_admission_info_2$race %in% c("BLACK/AFRICAN", "BLACK/CAPE VERDEAN", "BLACK/AFRICAN AMERICAN", "BLACK/CARIBBEAN ISLAND"), "black", ifelse(pt_admission_info_2$race %in% c("HISPANIC OR LATINO", "HISPANIC/LATINO - COLUMBIAN", "HISPANIC/LATINO - DOMINICAN", "HISPANIC/LATINO - HONDURAN", "HISPANIC/LATINO - PUERTO RICAN", "HISPANIC/LATINO - CENTRAL AMERICAN", "HISPANIC/LATINO - CUBAN", "HISPANIC/LATINO - GUATEMALA", "HISPANIC/LATINO - MEXICAN", "HISPANIC/LATINO - SALVADORAN", "HISPANIC/LATINO - GUATEMALAN"), "hispanic/latino", ifelse(pt_admission_info_2$race %in% c("WHITE", "WHITE - EASTERN EUROPEAN", "WHITE - RUSSIAN", "WHITE - BRAZILIAN", "WHITE - OTHER EUROPEAN"), "white", ifelse(pt_admission_info_2$race %in% c("AMERICAN INDIAN/ALASKA NATIVE", "MULTIPLE RACE/ETHNICITY", "OTHER", "PORTUGUESE", "NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER", "SOUTH AMERICAN"), "other", NA))))))

sum(is.na(pt_admission_info_2$race_category))#no missing values                                                                                                                   #pt_admission_info_2$discharge_location, also consider expired flag

#examine discharge location and hospital_expire_flag and categorize variables 
#only interested in those who were discharged home or assisted living, long term care or snf, home health, rehab, hospice.  

pt_admission_info_2 <- pt_admission_info_2 %>%
  filter((discharge_location %in% c("CHRONIC/LONG TERM ACUTE CARE", "HOME HEALTH CARE", "REHAB", "DIED", "HOSPICE", "SKILLED NURSING FACILITY", "ASSISTED LIVING", "HOME")))

#categorize discharge_location by died or hospice, post-acute care, and home or assisted living
pt_admission_info_2$discharge_category <- ifelse(pt_admission_info_2$discharge_location %in% c("DIED", "HOSPICE") | pt_admission_info_2$hospital_expire_flag == 1, "died or hospice", ifelse(pt_admission_info_2$discharge_location %in% c("CHRONIC/LONG TERM ACUTE CARE", "REHAB", "SKILLED NURSING FACILITY", "HOME HEALTH CARE"), "post-acute care", ifelse(pt_admission_info_2$discharge_location %in% c("HOME", "ASSISTED LIVING"), "home or assisted living", NA)))

#create new column for died/hospice vs. not

pt_admission_info_2$died_hospice <- ifelse(pt_admission_info_2$discharge_category == "died or hospice", "yes", ifelse(pt_admission_info_2$discharge_category %in% c("post-acute care", "home or assisted living"), "no", NA))

#ensure that number of NAs stay the same. 
sum(is.na(pt_admission_info_2$died_hospice)) == sum(is.na(pt_admission_info_2$discharge_category))

#create new column for post-acute care vs. not, died or hospice will be NA for this column
pt_admission_info_2$post_acute_care <- ifelse(pt_admission_info_2$discharge_category == "post-acute care", "yes", ifelse(pt_admission_info_2$discharge_category == "home or assisted living", "no", NA))

#examine insurance and categorize insurance by Medicaid and Medicare or Other

#categorize insurance by Medicaid and Medicare or Other, new variable: insurance_category
pt_admission_info_2$insurance_category <- ifelse(pt_admission_info_2$insurance == "Medicaid", "Medicaid", ifelse(pt_admission_info_2$insurance %in% c("Medicare", "Other"), "Medicare or Other", NA))


```

Data manipulation for pt_gender_age_2:

```{r}
#look at gender 
pt_gender_age_2$gender_category <- ifelse(pt_gender_age_2$gender == "F", "female", ifelse(pt_gender_age_2$gender == "M", "male", NA))

#pt_gender_age_2$age
pt_gender_age_2$age <- pt_gender_age_2$anchor_age

#As there are no hadm_id in pt_gender_age_2 to reflect admission encounter, see if there are any duplicate subject IDs. 

length(unique(pt_gender_age_2$subject_id)) == nrow(pt_gender_age_2)

#both of them are 299712, which suggest each subject id in pt_gender_age_2 is unique

```

Data manipulation for services_2:

```{r}


#see how many hospital encounters have duplicate services and then only keeping the first one. 
sum(duplicated(services_2$hadm_id)) #36798 duplicated 

services_2 <- services_2 |>
  group_by(hadm_id) |>
  arrange(hadm_id, transfertime) |>   
  distinct(hadm_id, .keep_all = TRUE) 

#Create a new variable named current_service_cat which has medicine, surgery or trauma, and other
services_2$current_service_cat <- ifelse(services_2$curr_service %in% c("CMED", "MED", "NMED", "OMED"), "medicine", ifelse(services_2$curr_service %in% c("CSURG", "NSURG", "ORTHO", "PSURG", "SURG", "TRAUM", "TSURG", "VSURG"), "surgery or trauma", ifelse(services_2$curr_service %in% c("DENT", "ENT", "EYE", "GU", "GYN", "OBS", "PSYCH"), "other", NA)))
sum(is.na(services_2$current_service_cat))#no missing values   

```

Data manipulation for PH_sample:

```{r}

sum(duplicated(PH_sample$hadm_id)) # 38 duplicates, meaning that 38 are actually the same hospital encounter and pulmonary hypertension was actually coded twice. 

#Of the duplicates, I will only keep the hadm_id with the highest seq_num. 
PH_sample_1 <- PH_sample |>
  group_by(hadm_id) |>
  filter(seq_num == min(seq_num)) 

sum(duplicated(PH_sample_1$hadm_id)) #0 duplicates of hadm_id. 

#Different pulmonary hypertension ICD codes mean different types of pulmonary hypertension. First, create the variable representing the overall diagnosis of pulmonary hypertension
PH_sample_1$overall_diagnosis <- ifelse(PH_sample_1$icd_code %in% c('4160','I270', 'I272', 'I2720', 'I2722', 'I2723', 'I2724', 'I2729', 'I2721'), "pulmonary hypertension", NA)

sum(is.na(PH_sample_1$overall_diagnosis))#no missing values, ensures that all patients have pulmonary hypertension

#Use ICD codes to seperate the different types of pulmonary hypertension

PH_sample_1$PH_type <- ifelse(PH_sample_1$icd_code %in% c('4160', 'I270'), "Primary pulmonary hypertension", ifelse(PH_sample_1$icd_code %in% c('I272', 'I2720', 'I2729'), "Pulmonary hypertension unspecified", ifelse(PH_sample_1$icd_code == 'I2721', "Pulmonary arterial hypertension", ifelse(PH_sample_1$icd_code == 'I2722', "Pulmonary hypertension due to left heart disease", ifelse(PH_sample_1$icd_code == 'I2723', "Pulmonary hypertension due to lung diseases and hypoxia", ifelse(PH_sample_1$icd_code == 'I2724', "Chronic thromboembolic pulmonary hypertension", NA))))))

sum(is.na(PH_sample_1$PH_type)) #no missing values, ensures that the PH_type has been coded to all. 

```

Data manipulation for all_patient_diagnosis_2:

```{r}
#I seperated all_patient_diagnoses_2 based on whether ICD-9 or ICD-10 was used. To avoid double counting pulmonary hypertension, I removed rows with ICD codes representing pulmonary hypertension
ICD_9_sample <- all_patient_diagnoses_2 |>
  filter(
    (icd_version == 9 & !icd_code %in% '4160'))

ICD_10_sample <- all_patient_diagnoses_2 |>
  filter(icd_version == 10 & !icd_code %in% c('I270', 'I272', 'I2720', 'I2722', 'I2723', 'I2724', 'I2729', 'I2721'))

#Then I collapsed all the icd_codes into one row alongside their respective subject_id and hadm_id and calcuated Elixhauser comorbidity scores. Start with ICD_9_sample
patient_diagnoses_9 <- ICD_9_sample |>
  group_by(subject_id, hadm_id) |>
  dplyr::summarize(icd_code = paste(icd_code, collapse = " "))

#used the comorbidity package. 
icd9_comorbidity <- comorbidity(x = patient_diagnoses_9, id = "hadm_id", code = "icd_code", map = "elixhauser_icd9_quan", assign0 = FALSE, labelled = TRUE, tidy.codes = TRUE)

#summed the individual scores per hadm_id and added it to patient_diagnoses_9
patient_diagnoses_9$comorbidityscore <- rowSums(icd9_como[, -1])

#Next is ICD_10_sample
patient_diagnoses_10 <- ICD_10_sample |>
  group_by(subject_id, hadm_id) |>
  dplyr::summarize(icd_code = paste(icd_code, collapse = " "))

icd10_como <- comorbidity(x = patient_diagnoses_10, id = "hadm_id", code = "icd_code", map = "elixhauser_icd10_quan", assign0 = FALSE, labelled = TRUE, tidy.codes = TRUE)

patient_diagnoses_10$comorbidityscore <- rowSums(icd10_como[, -1])

#combine the ICD-9 and ICD-10 back together. 
patient_comorbidity_scores <- rbind(patient_diagnoses_10, patient_diagnoses_9)

```

After completing data manipulation, I joined the files for data analysis purposes. Inner_join was used for this purpose.

Joined PH_sample_1 and patient_comorbidity_scores

```{r}

#join PH_sample_1 with patient_comorbidity_scores using inner_join 

PH_comorbidity <- inner_join(PH_sample_1, patient_comorbidity_scores, by = c("hadm_id"))
head(PH_comorbidity)

sum(duplicated(PH_comorbidity$hadm_id)) #no duplicate hadm_id or hospital encounters.

#PH_comorbidity represents those with pulmonary hypertension and their comorbidities. 
```

Joined PH_comorbidity with services_2:

```{r}

PH_comorbidity_service <- inner_join(PH_comorbidity, services_2, by = c("hadm_id"))
head(PH_comorbidity_service)
sum(duplicated(PH_comorbidity_service$hadm_id))#no duplicate hadm_id or hospital encounters.
#PH_comorbidity_services addes the service caring for those with pulmonary hypertension. 

```

Joined PH_comorbidity_service and pt_admission_info_2. I also calculated 30-day readmissions (yes or no) using the joined file.

```{r}


#join PH_sample (dataset with all with PH) and pt_admission_info_2
PH_como_service_admission <- inner_join(PH_comorbidity_service, pt_admission_info_2, by = c("hadm_id"))

#Now that we received the admission information for those with pulmonary hypertension, I will now calcuate 30 day readmissions. 
PH_como_service_admission_30day <- PH_como_service_admission |>
  group_by(subject_id.x) |>
  arrange(admission_time) |>
  mutate(time_to_readmission = abs((difftime(dplyr::lag(discharge_time), admission_time, units="days")))) |>
  mutate(readmision30days = ifelse(is.na(time_to_readmission) | time_to_readmission > 30, "No", "Yes"))

# I will save the PH_como_service_admission_30day for future analysis and continue with the PH_como_service_admission dataset

#As there are multiple hadm_ids per subject_id, I will get the earliest admission and remove the rest. This is to avoid duplicate patients. I used admittime instead of admission_time to filter because the filter must contain a logical vector (which is admittime), not a <POSIXct/POSIXt> object (which is admission_time)

PH_como_service_admission_no_dup <- PH_como_service_admission |>
  group_by(subject_id.x) |>
  filter(admittime == min(admittime))|>
  select(-subject_id.y) 

sum(duplicated(PH_como_service_admission_no_dup$subject_id.x)) #ensure that there are no duplicate subject_ids. 
```

Joined PH_como_service_admission_no_dup and pt_gender_age_2. I joined these files last as pt_gender_age_2 does not contain hadm_id.

```{r}

#join PH_como_service_admission_no_dup and pt_gender_age_2
PH_como_service_admission_gender_age <- inner_join(PH_como_service_admission_no_dup, pt_gender_age_2, by = c("subject_id.x" = "subject_id"))

```

Further data cleaning was done after joining all the tables. Specifically, I kept the variables needed for analysis and removed the rest to avoid confusion and stay organized.

```{r}

#get all the variables of PH_admission_names_characteristics
colnames(PH_como_service_admission_gender_age)

final_variables_subjects <- PH_como_service_admission_gender_age |>
  select("subject_id.x", "comorbidityscore", "current_service_cat", "admit_category", "length_of_stay", "discharge_category", "overall_diagnosis", "died_hospice", "PH_type", "married_or_not", "gender_category", "race_category", "insurance_category","age", "post_acute_care") 

head(final_variables_subjects)

#I will not be using subject_id.x for analysis. Before getting rid of subject_id.x, ensure that the rows represent different subject_id.x. This could be done by ensuring that there are no duplicate subject_id.x

sum(duplicated(final_variables_subjects$subject_id.x)) #no duplicates. 

#now I will remove subject_id.x from the analysis 

final_variables <- final_variables_subjects[, !names(final_variables_subjects) %in% "subject_id.x"]

head(final_variables)# no more subject_id.x

```

The structure of final_variables was examined.

```{r}
str(final_variables)
```

Based on the structure shown above, most variables need to be factored in preparation for random forest analysis. Age, length_of_stay, and comorbidity score do not need to be factored as they are already numeric and integers.

```{r}

final_variables_factor <- final_variables

col(final_variables_factor)
final_variables_factor <- final_variables_factor |>
  mutate(PH_type = factor(PH_type, levels = c("Primary pulmonary hypertension", "Pulmonary arterial hypertension", "Pulmonary hypertension due to left heart disease", "Pulmonary hypertension due to lung diseases and hypoxia", "Chronic thromboembolic pulmonary hypertension", "Pulmonary hypertension unspecified"),
                          labels = c(0, 1, 2, 3, 4, 5)))

#married_or_not         
final_variables_factor <- final_variables_factor |>
  mutate(married_or_not = factor(married_or_not, levels = c("not_married", "married"), labels = c(0,1)))

#race_category
final_variables_factor <- final_variables_factor |>
  mutate(race_category = factor(race_category, levels = c("white", "black", "hispanic/latino", "asian", "other", "unknown"), labels = c(0, 1, 2, 3, 4, 5)))

#discharge_category
final_variables_factor <- final_variables_factor |>
  mutate(discharge_category = factor(discharge_category, levels = c("home or assisted living", "post-acute care", "died or hospice"), labels = c(0, 1, 2)))

#insurance_category
final_variables_factor <- final_variables_factor |>
  mutate(insurance_category = factor(insurance_category, levels = c("Medicare or Other", "Medicare"), labels = c(0,1)))

#current_service_cat
final_variables_factor <- final_variables_factor |>
  mutate(current_service_cat = factor(current_service_cat, levels = c("medicine", "surgery or trauma", "other"), labels = c(0,1,2)))

#gender
final_variables_factor <- final_variables_factor |>
  mutate(gender_category = factor(gender_category, levels = c("male", "female"), labels = c(0,1)))

#admit_category
final_variables_factor <- final_variables_factor |>
  mutate(admit_category = factor(admit_category, levels = c("elective", "emergency"), labels = c(0, 1)))

#died_hospice
final_variables_factor <- final_variables_factor |>
  mutate(died_hospice = factor(died_hospice, levels = c("no", "yes"), labels = c(0, 1)))

#post_acute_care 
final_variables_factor <- final_variables_factor |>
  mutate(post_acute_care  = factor(post_acute_care , levels = c("no", "yes"), labels = c(0, 1)))

head(final_variables_factor)

```

I subsetted final_variables_factor into three files to use random forest machine learning on the following: 1. died and/or hospice vs. alive, 2. post-acute care vs. home or assisted living, 3. predicting discharge deposition (including home or assisted living, post-acute care, died or hospice). I also dropped NA values within each of the three files.

| Subsetted File             | Purpose                                                                                                                                                                                                               | Number of Rows (i.e. participants) |
|---------------------|--------------------------|--------------------------|
| diedhospice_vs_alive_no_na | Predicting death and/or hospice vs. discharged alive                                                                                                                                                                  | 3376                               |
| PAC_Home_AL_no_na          | Predicting being discharged with post-acute care (including home health, skilled nursing facility, and long term care) vs. home and/or assisted living. Those who died or were discharged with hospice were excluded. | 3194                               |
| predict_discharge_no_na    | Predicting discharge deposition, which includes home or assisted living, post-acute care, and died vs. hospice                                                                                                        | 3376                               |

```{r}


#died and/or hospice vs. alive, outcome variable is died_hospice 
diedhospice_vs_alive <- final_variables_factor |>
  select("comorbidityscore", "current_service_cat", "admit_category", "length_of_stay", "died_hospice", "PH_type", "married_or_not", "gender_category", "race_category", "insurance_category","age")

#drop NAs 
diedhospice_vs_alive_no_na <- na.omit(diedhospice_vs_alive) 

nrow(diedhospice_vs_alive_no_na)

#post-acute care vs. home or assisted living, outcome variable is post_acute_care
PAC_Home_AL <- final_variables_factor |>
  select("comorbidityscore", "current_service_cat", "admit_category", "length_of_stay", "died_hospice", "PH_type", "married_or_not", "gender_category", "race_category", "post_acute_care","age")

#drop NAs 
PAC_Home_AL_no_na <- na.omit(PAC_Home_AL) 

nrow(PAC_Home_AL_no_na)

#predicting discharge deposition (including home or assisted living, post-acute care, died or hospice), outcome variable is discharge_category

predict_discharge <- final_variables_factor |>
  select("comorbidityscore", "current_service_cat", "admit_category", "length_of_stay", "discharge_category", "PH_type", "married_or_not", "gender_category", "race_category", "insurance_category","age")

#drop NAs from discharge_category variable
predict_discharge_no_na <- predict_discharge |>
  drop_na() 

nrow(predict_discharge_no_na)

```

I did random forest with 1000 trees both with and without 10-fold cross validation (CV) for all three subsetted datasets. Before doing so, I duplicated each subsetted dataset accordingly to organize myself. Each dataset would be duplicated so that it could be used both for random forest without 10-fold CV and with 10-fold CV.

| Original Subsetted File    | Random Forest no 10-fold CV   | Random Forest with 10-fold CV  |
|----------------------|-------------------------|-------------------------|
| diedhospice_vs_alive_no_na | no_10_diedhospice_RF_training | yes_10_diedhospice_RF_training |
| PAC_Home_AL_no_na          | no_10_PACHome_RF_training     | yes_10_PACHome_RF_training     |
| predict_discharge_no_na    | no_10_discharge               | yes_10_discharge               |

```{r}
#using dataset diedhospice_vs_alive_no_na and copied it to no_10_diedhospice_RF_training, Random forest without 10-fold CV

no_10_diedhospice_RF_training <- diedhospice_vs_alive_no_na

#using dataset diedhospice_vs_alive_no_na and copied it to yes_10_diedhospice_RF_training, Random forest with 10-fold CV

yes_10_diedhospice_RF_training <- diedhospice_vs_alive_no_na


#using dataset PAC_Home_AL_no_na and copied it to no_10_PACHome_RF_training, Random forest without 10-fold CV

no_10_PACHome_RF_training <- PAC_Home_AL_no_na

#using dataset PAC_Home_AL_no_na and copied it to yes_10_PACHome_RF_training, Random forest with 10-fold CV

yes_10_PACHome_RF_training <- PAC_Home_AL_no_na

#using dataset predict_discharge_no_na and copied it to no_10_discharge, Random forest without 10-fold CV

no_10_discharge <- predict_discharge_no_na

#using dataset predict_discharge_no_na and copied it to yes_10_discharge, Random forest  10-fold CV

yes_10_discharge <- predict_discharge_no_na


```

## Results {#sec-results}

Descriptive Data Analysis

```{r}
#will find mean, median, SD, etc. 

```

Inferential Data Analysis

Random forest without 10-fold CV to predict death and/or hospice vs. discharged alive within pulmonary hypertension patients. As we can see, the out of bounds area is 9.15%, which may suggest overfitting.

```{r}

#first, I will create random forest without 10-fold CV to see if the variables I selected can predict died or hospice vs. not 

#Set seed and create random forest with 1000 trees 
set.seed(1234)
rf_cls_spec <- 
  rand_forest(trees = 1000, min_n = 5) |>
  set_engine("randomForest") |>
  set_mode("classification")


RF_no_10_diedhospice_RF_training <- rf_cls_spec |>
  fit(died_hospice  ~ ., data = no_10_diedhospice_RF_training)
colnames(RF_no_10_diedhospice_RF_training)
print(RF_no_10_diedhospice_RF_training)
#OOB estimate of  error rate: 9.15%

#find most important predictors for future use 
important_died_1 <- RF_no_10_diedhospice_RF_training |>
  extract_fit_engine() |>
  importance()

important_died_2 <- RF_no_10_diedhospice_RF_training |>
  extract_fit_engine() |>
  vip()

#Store the predicted values of the training data into a variable called rf.predicted.
rf.predicted_hospice_died  <- bind_cols(
  truth = no_10_diedhospice_RF_training$died_hospice,
  predict(RF_no_10_diedhospice_RF_training, no_10_diedhospice_RF_training), 
  predict(RF_no_10_diedhospice_RF_training, no_10_diedhospice_RF_training, type = "prob"))

head(rf.predicted_hospice_died)

no_10_AUC_hospice_died <- roc_auc(rf.predicted_hospice_died, 
                                  truth, .pred_1, event_level = "second") #died_hospice "yes" was factored as 1 and "no" was factored as 0

no_10_ROCplot_hospice_died <- autoplot(roc_curve(rf.predicted_hospice_died, 
                   truth, .pred_1, event_level = "second"))
```

Random forest with 10-fold CV to predict death and/or hospice vs. discharged alive within pulmonary hypertension patients:

```{r}
#first, I will create random forest with 10-fold CV to see if the variables I selected can predict died or hospice vs. not, use yes_10_diedhospice_RF_training

# 10-fold cross validation classification vectors for random forest
set.seed(1234)
yes_10_CV_diedhospice_RF_training <- vfold_cv(yes_10_diedhospice_RF_training, 10) #split into 10 groups

rf_workflow_10_cv <-
  workflow() |>
  add_model(rf_cls_spec) |>
  add_formula(died_hospice ~ .)

set.seed(1234)

fit_randomforest_ten <-
  rf_workflow_10_cv |>
  fit_resamples(yes_10_CV_diedhospice_RF_training , 
                control = control_resamples(save_pred = TRUE))

head(fit_randomforest_ten)

ten_CV_hospice_died_AUC <- collect_metrics(fit_randomforest_ten)

ten_CV_hospice_died_RF <- fit_randomforest_ten |>
  collect_predictions() |>
  roc_curve(died_hospice, .pred_1, event_level = "second") |>
  autoplot()

```

Here displays the AUC and ROC curves of the random forests with and without 10-fold CV predicting whether a pulmonary hypertension patient died or was discharged to hospice vs. discharged alive. The comparisons of AUC numbers and the ROC curves between the Random Forest without 10-fold CV and that with the 10-fold CV may suggest that overfitting is present.

| Model                                                 | AUC       |
|-------------------------------------------------------|-----------|
| Random Forest without 10-fold CV (training data only) | 0.9613605 |
| Random Forest with 10-fold CV                         | 0.6233102 |

```{r}

#AUC for predicting hospice or death vs. not without 10-fold CV

print(no_10_AUC_hospice_died)

#AUC for predicting hospice or death vs. not with 10-fold CV

print(ten_CV_hospice_died_AUC)

# Combine the ROC data
combined_ROC_plots <- rbind(
  data.frame(method = "Random Forest: 10-fold cross validation",
             ten_CV_hospice_died_RF$data),
  data.frame(method = "Random Forest: no 10-fold cross validation", no_10_ROCplot_hospice_died$data)
)

# Create a ggplot for the combined data
ggplot(combined_ROC_plots, aes(1 - specificity, sensitivity, color = method)) +
  geom_line() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  scale_color_manual(values = c("purple", "pink")) +
  labs(
    title = "My ROC Curves",
    x = "1-Specificity ",
    y = "Sensitivity",
    color = "Method"
  )


```

Thus, I will refit the models with only the most important predictors as indicated by MeanDecreaseGini within random forest. They are length of stay and age.

```{r}

#print the important predictors as indicated by MeanDecreaseGini within random forest.  
print(important_died_1)
print(important_died_2)
```

Random forest without 10-fold CV using only length_of_stay and age to predict death and/or hospice vs. discharged alive within pulmonary hypertension patients. The out of bounds error is 9.45%.

```{r}

#Set seed and create random forest with 1000 trees 
set.seed(1234)
rf_cls_spec <- 
  rand_forest(trees = 1000, min_n = 5) |>
  set_engine("randomForest") |>
  set_mode("classification")

top_RF_no_10_diedhospice_RF_training <- rf_cls_spec |>
  fit(died_hospice  ~ length_of_stay + age, data = no_10_diedhospice_RF_training)
colnames(top_RF_no_10_diedhospice_RF_training)
print(top_RF_no_10_diedhospice_RF_training)
#OOB estimate of  error rate: 9.15%

#Store the predicted values of the training data into a variable called top_rf.predicted_hospice_died.
top_rf.predicted_hospice_died  <- bind_cols(
  truth = no_10_diedhospice_RF_training$died_hospice,
  predict(top_RF_no_10_diedhospice_RF_training, no_10_diedhospice_RF_training), 
  predict(top_RF_no_10_diedhospice_RF_training, no_10_diedhospice_RF_training, type = "prob"))

head(top_rf.predicted_hospice_died)

top_no_10_AUC_hospice_died <- roc_auc(top_rf.predicted_hospice_died, 
                                  truth, .pred_1, event_level = "second") #died_hospice "yes" was factored as 1 and "no" was factored as 0

top_no_10_ROCplot_hospice_died <- autoplot(roc_curve(top_rf.predicted_hospice_died, 
                   truth, .pred_1, event_level = "second"))



```

Random forest with 10-fold CV using only length_of_stay and age to predict death and/or hospice vs. discharged alive within pulmonary hypertension patients:

```{r}

# 10-fold cross validation classification vectors for random forest
set.seed(1234)
top_yes_10_CV_diedhospice_RF_training <- vfold_cv(yes_10_diedhospice_RF_training, 10) #split into 10 groups

top_rf_workflow_10_cv <-
  workflow() |>
  add_model(rf_cls_spec) |>
  add_formula(died_hospice ~ length_of_stay + age)

set.seed(1234)

top_fit_randomforest_ten <-
  top_rf_workflow_10_cv |>
  fit_resamples(top_yes_10_CV_diedhospice_RF_training , 
                control = control_resamples(save_pred = TRUE))

head(top_fit_randomforest_ten)

top_ten_CV_hospice_died_AUC <- collect_metrics(top_fit_randomforest_ten)

top_ten_CV_hospice_died_RF <- top_fit_randomforest_ten |>
  collect_predictions() |>
  roc_curve(died_hospice, .pred_1, event_level = "second") |>
  autoplot()




```

Below displays four AUC and ROC curves of the random forests predicting whether a pulmonary hypertension patient died/discharged to hospice vs. discharged alive. These four consists of a mixture of using only the two top predictors (age and length of stay) vs. all predictors and 10-fold CV vs. without.

| Col1                                                                            | Col2      |
|---------------------------------------------------------------------------------|-----------|
| Random Forest without 10-fold CV (training data only) using all predictors      | 0.9613605 |
| Random Forest without 10-fold CV (training data only) using top two predictors  | 0.8499364 |
| Random Forest with 10-fold CV using all predictors                              | 0.6233102 |
| Random Forest with 10-fold CV using top two predictors                          | 0.5949773 |

```{r}

#AUC for predicting hospice or death vs. not without 10-fold CV, all predictors

print(no_10_AUC_hospice_died)

#AUC for predicting hospice or death vs. not without 10-fold CV, top two predictors
print(top_no_10_AUC_hospice_died)

#AUC for predicting hospice or death vs. not with 10-fold CV, all predictors 

print(ten_CV_hospice_died_AUC)

#AUC for predicting hospice or death vs. with 10-fold CV, top two predictors 
print(top_ten_CV_hospice_died_AUC)


# Combine the ROC data
combined_ROC_plots <- rbind(
  data.frame(method = "Random Forest: 10-fold cross validation, all predictors",
             ten_CV_hospice_died_RF$data),
  data.frame(method = "Random Forest: no 10-fold cross validation, all predictors", no_10_ROCplot_hospice_died$data),
  data.frame(method = "Random Forest: no 10-fold cross validation, top two predictors", top_no_10_ROCplot_hospice_died$data), 
  data.frame(method = "Random Forest: 10-fold cross validation, top two predictors", top_ten_CV_hospice_died_RF$data)
)

# Create a ggplot for the combined data
ggplot(combined_ROC_plots, aes(1 - specificity, sensitivity, color = method)) +
  geom_line() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  scale_color_manual(values = c("purple", "pink", "yellow", "red")) +
  labs(
    title = "My ROC Curves",
    x = "1-Specificity ",
    y = "Sensitivity",
    color = "Method"
  )


```

## Conclusion

This the conclusion. The @sec-results can be invoked if you'd like.
