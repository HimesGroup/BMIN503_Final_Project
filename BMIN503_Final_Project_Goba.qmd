---
title: "BMIN503 Final Project: Subconscious  Bias in Pregnancy: Unraveling the Influential Factors within a Healthcare System  "
format: html
editor: visual
---

## Overview

The health status of individuals and the delivery of healthcare services are influenced by a variety of interconnected factors. These factors can be broadly categorized into individual factors such as: socioeconomic factors, environmental factors, and healthcare system factors. These factors are multifaceted. Structural racism underpins a multitude of patient, provider, neighborhood and health system factors influence patients health status as they enter pregnancy. This project explores healthcare system factors that may contribute to bias in pregnancy and potential areas of improvement in health outcomes.

## Introduction

NOTE: STILL WORKING ON THIS

The health status of individuals during pregnancy is influenced by various interconnected factors, including socioeconomic, environmental, and healthcare system factors. However, structural racism underpinning these factors often leads to biased healthcare practices for pregnant women, impacting health outcomes. This bias can manifest at the patient, provider, neighborhood, and health system levels. The problem is inherently interdisciplinary. Fields such as public health, sociology, and healthcare management can contribute to a comprehensive understanding of the challenges.

## Methods

## Install Packages For Analysis

```{r}
#Load common packages that will be used
# 
# install.packages("tidyverse")
# install.packages("dplyr")
# install.packages("gtsummary")
# install.packages("arrow")
# install.packages("ggplot")
# install.packages("modelsummary")
# install.packages("modelr")
# install.packages("yardstick")
# install.packages("cowplot")
# install.packages("vip")
# install.packages("tidymodels")
# install.packages("scales")
# install.packages("randomForest")
# install.packages("kernlab")
# install.packages("glmnet")
# install.packages("dotwhisker")

```

## Load Packages

```{r}
library(haven)
library(tidyverse)
library(dplyr)
library(gtsummary)
library(arrow)
library(ggplot2)
library(modelsummary)
library(modelr)
library(yardstick)
library(cowplot)
library(vip)
library(tidymodels)
library(RColorBrewer)
library(scales)
library(randomForest)
library(kernlab)
library(glmnet)
library(dotwhisker)
```

## Reading in the Data

```{r}
#Set WD to path for dataset
# install.packages("haven")
# library(haven)

pregintent_dataset <- read_sas("Q:/Mary Sammel/OBGYN/Arden McCallister/PregnancyIntention_Abernathy/data/Derived/goba_research3.sas7bdat")

```

## Initial Data Manipulation

Firstly, I want to create a summary table but will need to manipulate the data set. The original data set has 93 variables but for this analysis I am only interested in 10 variables. I create a new data set which is a subset from the original data set.

```{r}

# Select variables of interest/subset 
# Specify the variables of interest
pregintent_vars <- c("MG_Responded_Desire", "MF_Race_Cat", "MF_Age", "MF_ethnicity", "MF_Insurance_Cat", "MF_Entry_Obese", "MF_Entry_Encounter_Type", "HOSPITAL", "MG_GA", "MG_ER_Utilization" )

# Subset the data set to include only variables of interest. New dataset for analysis--preg_desire
preg_desire <- pregintent_dataset |>
  select(all_of(pregintent_vars))

```

## Additonal Data Manipulation and Transformation

There is additional data manipulation needed. I will use the dplyr package, specifically the mutate function to create new variables based on variables in the original data set.I also convert the variables to a factor with specific levels and labels. This will be helpful when creating plots for data visualization later on.

```{r}
#Create new variables using mutate. Table function is useful for understanding the distribution of values in a categorical variable.

#RACE CATEGORY IS ACTUALLY FOR BLACK PARTICIPANTS

preg_desire <- mutate(preg_desire, MG_Responded_Desire = factor(MG_Responded_Desire, levels = c(0,1),
                    labels = c("No", "Yes")))

preg_desire <- mutate(preg_desire, MF_Age = factor(MF_Age, levels = c(0,1,2,3,4,5),
                    labels = c("19 and Under", "20-24 years", "25-29 years", "30-34 years", "35-39 years", "40-44 years")))

preg_desire <- mutate(preg_desire, MF_Race_Cat = factor(MF_Race_Cat, levels = c(0,1),
                    labels = c("White/Other", "Black")))

preg_desire <- mutate(preg_desire, MF_ethnicity = factor(MF_ethnicity, levels = c(0,1),
                    labels = c("Non-Hispanic", "Hispanic")))

preg_desire <- mutate(preg_desire, MF_Entry_Obese = factor(MF_Entry_Obese, levels = c(0,1),
                    labels = c("Not Obese", "Obese")))

preg_desire <- mutate(preg_desire, MF_Insurance_Cat = factor(MF_Insurance_Cat, levels = c(0,1),
                    labels = c("Private", "Public/Uninsured")))

preg_desire <- mutate(preg_desire, MF_Entry_Encounter_Type = factor(MF_Entry_Encounter_Type, levels = c("Hospital Encounter" , "Office Visit", "Procedure"),
                    labels = c("Hospital Encounter" , "Office Visit", "Procedure")))

preg_desire <- mutate(preg_desire, HOSPITAL = factor(HOSPITAL, levels = c("HUP","PAH"),
                    labels = c("HUP", "PAH")))

preg_desire <- mutate(preg_desire, MG_GA = factor(MG_GA, levels = c(0,1),
                    labels = c("Less Than 24Weeks", "Greater than 24Weeks")))

preg_desire <- mutate(preg_desire, MG_ER_Utilization = factor(MG_ER_Utilization,      levels = c(0,1),
                    labels = c("No ER Utilization ", "ER Utilization")))

```

## Summary Table Including Variables of Interest

```{r}
preg_desire |> tbl_summary()
```

## Crude Analysis

Running a crude analysis to examine the variables of interest in relation to the outcome variable. This will provide a preliminary view of the data.The outcome variable is MG_Responded_Desire which captures whether there is a response to the question "Do you desire this pregnancy?".

```{r}

# # Run Crude Analysis
# 
# #Age x Responded Desire
# Age.Desire <- table(preg_desire$MF_Age, preg_desire$MG_Responded_Desire)
# 
# chisq_test <- chisq.test(Age.Desire)
# chisq_test
# Age.Desire
# 
# 
# ##The code below will provide the row percents--Ask Ryan if there is a better way to show row percents in R on 11/21
# 
# Age.Desire <- table(preg_desire$MF_Age, preg_desire$MG_Responded_Desire)
# 
# # Calculate row percentages
# row_percents <- prop.table(Age.Desire, margin = 1) * 100  # Multiply by 100 to get percentages
# 
# # Print the contingency table with row percentages
# cat("Contingency Table with Row Percentages:\n")
# print(addmargins(cbind(Age.Desire, RowPercents = row_percents), 2))
# 
# # Perform the chi-squared test
# chisq_test <- chisq.test(Age.Desire)
# cat("\nChi-squared Test Results:\n")
# print(chisq_test)
# 
# 
# ##MODIFY THE STRATIFICATION CODE 11/21
# Age.Desire <- tbl_summary(
#   data = preg_desire,
# 
#                             ~ MF_Age |>
#                             tbl_summary(by=MG_Responded_Desire) |>
#     modify_header(label ~ paste0("Age" , today(), "Age x Desire"))
#     
# )
# 
# Age.Desire

## USE THIS CODE!
# chisq_test <- chisq.test(table(preg_desire$MF_Age, preg_desire$MG_Responded_Desire))
# chisq_test$p.value


Age.Desire <-
  preg_desire |>
  select(MF_Age,MG_Responded_Desire) |>
  tbl_summary(
    by = MG_Responded_Desire, percent = "row",
    label = list(MF_Age ~ "Patient Age"),
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = list(MF_Age ~ c(0,1,2,3,4,5))
  ) |>
add_p(test = everything() ~ "chisq.test")


# chisq_test <- chisq.test(table(preg_desire$MF_Age, preg_desire$MG_Responded_Desire))
# chisq_test$p.value

```

```{r}
#Race x Responded Desire
Race.Desire<-
  preg_desire |>
  select(MF_Race_Cat,MG_Responded_Desire) |>
  tbl_summary(
    by = MG_Responded_Desire, percent = "row",
    label = list(MF_Race_Cat ~ "Race"),
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = list(MF_Race_Cat ~ c(0,1))
  ) |>
add_p(test = everything() ~ "chisq.test")
Race.Desire
```

```{r}
#Ethnicity x Responded Desire
Ethnicity.Desire<-
  preg_desire |>
  select(MF_ethnicity,MG_Responded_Desire) |>
  tbl_summary(
    by = MG_Responded_Desire, percent = "row",
    label = list(MF_ethnicity ~ "Ethnicity"),
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = list(MF_ethnicity ~ c(0,1))
  ) |>
add_p(test = everything() ~ "chisq.test")
Ethnicity.Desire
```

```{r}
#Obesity x Responded Desire
Obesity.Desire<-
  preg_desire |>
  select(MF_Entry_Obese,MG_Responded_Desire) |>
  tbl_summary(
    by = MG_Responded_Desire, percent = "row",
    label = list(MF_Entry_Obese ~ "Obese Status"),
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = list(MF_Entry_Obese ~ c(0,1))
  ) |>
add_p(test = everything() ~ "chisq.test")
Obesity.Desire

```

```{r}
#Insurance x Responded Desire
Insurance.Desire<-
  preg_desire |>
  select(MF_Insurance_Cat,MG_Responded_Desire) |>
  tbl_summary(
    by = MG_Responded_Desire, percent = "row",
    label = list(MF_Insurance_Cat ~ "Insurance Status"),
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = list(MF_Insurance_Cat ~ c(0,1))
  ) |>
add_p(test = everything() ~ "chisq.test")
Insurance.Desire
```

```{r}
#Encounter Type x Responded Desire
Encounter_type.Desire<-
  preg_desire |>
  select(MF_Entry_Encounter_Type,MG_Responded_Desire) |>
  tbl_summary(
    by = MG_Responded_Desire, percent = "row",
    label = list(MF_Entry_Encounter_Type ~ "Encounter Type"),
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = list(MF_Entry_Encounter_Type ~ c(0,1))
  ) |>
add_p(test = everything() ~ "chisq.test")
Encounter_type.Desire
```

```{r}
#Hospital x Responded Desire
HOSPITAL.Desire<-
  preg_desire |>
  select(HOSPITAL,MG_Responded_Desire) |>
  tbl_summary(
    by = MG_Responded_Desire, percent = "row",
    label = list(HOSPITAL ~ "Hospital Location"),
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = list(HOSPITAL ~ c(0,1))
  ) |>
add_p(test = everything() ~ "chisq.test")
HOSPITAL.Desire
```

```{r}
#Gestation Weeks x Responded Desire
MG_GA.Desire<-
  preg_desire |>
  select(MG_GA,MG_Responded_Desire) |>
  tbl_summary(
    by = MG_Responded_Desire, percent = "row",
    label = list(MG_GA ~ "Gestational Age"),
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = list(MG_GA ~ c(0,1))
  ) |>
add_p(test = everything() ~ "chisq.test")
MG_GA.Desire

```

```{r}
#ER Utilization  x Responded Desire
ER_Utilization.Desire<-
  preg_desire |>
  select(MG_ER_Utilization,MG_Responded_Desire) |>
  tbl_summary(
    by = MG_Responded_Desire, percent = "row",
    label = list(MG_ER_Utilization ~ "ER Utilization"),
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = list(MG_ER_Utilization ~ c(0,1))
  ) |>
add_p(test = everything() ~ "chisq.test")
ER_Utilization.Desire

```

## Creating Plots for Data Visualizations of The Crude Analysis

Pregnancy Desire Asked by Age Categories

```{r}
#Visualizations 
#Bar Chart (continuous x binary) Age x MG_Responded_Desire
my_colors <- brewer.pal(3, "Set2")
# Define a color palette

preg_desire |>
  filter(!is.na(MF_Age)) |>
  ggplot(aes(MF_Age, fill = MG_Responded_Desire)) +
  geom_bar(position = "fill") +
  labs(
    x = "Age Categories",
    y = "Proportion",
    fill = "Responded Desire",
    title = "Pregnancy Desire Asked by Age"
  ) +
  scale_fill_manual(
    name = "Desire Asked",
    values = my_colors,
    labels = c("No", "Yes"),
    breaks = c("No", "Yes")
  ) +
  theme_minimal()
```

Pregnancy Desire Asked by Race Categories

```{r}
#Visualiztions 
#Bar Graph (categorical/nominal x binary) Race x MG_Responded_Desire

preg_desire |>
  filter(!is.na(MF_Race_Cat)) |>
  ggplot(aes(x = MF_Race_Cat, fill = MG_Responded_Desire)) +
  geom_bar() +
  labs(
    x = "Race Categories",
    y = "Count",
    fill = "Responded Desire",
    title = "Pregnancy Desire Asked by Race Categories"
  ) +
  scale_fill_manual(
    name = "Desire Asked",
    values = brewer.pal(3, "Set2"),  # Use a better color palette
    labels = c("No", "Yes"),
    breaks = c("No", "Yes")
  ) +
  theme_minimal()

```

Pregnancy Desire Asked by Ethnicity

```{r}
#Visualiztions 
#Bar Graph (categorical/nominal x binary) Ethnicity x MG_Responded_Desire


my_colors <- brewer.pal(2, "Set1")

# Create the ggplot with title, better legend, and color palette
my_colors <- brewer.pal(2, "Set1")

# Create the ggplot with title, informative legend, and color palette
preg_desire |>
  filter(!is.na(MF_ethnicity)) |>
  ggplot(aes(x = MF_ethnicity, fill = MG_Responded_Desire)) +
  geom_bar(position = "dodge") +
  labs(
    x = "Ethnicity",
    y = "Count",
    fill = "Responded Desire",
    title = "Pregnancy Desire Asked by Ethnicity"
  ) +
  scale_fill_manual(
    name = "Desire Asked",
    values = my_colors,
    labels = c("No", "Yes")
  ) +
  theme_minimal()
```

Pregnancy Desire Asked by Obese Status

```{r}
#Visualiztions 
#Bar Chart (binaryxbinary) Obesity x MG_Responded_Desire **use this code for race, insurance to show percentages**


my_colors <- brewer.pal(2, "Set1")

# Create the ggplot with title, informative legend, and color palette
preg_desire |>
  filter(!is.na(MF_Entry_Obese)) |>
  ggplot(aes(MF_Entry_Obese, fill = MG_Responded_Desire)) +
  geom_bar(position = "fill") +
  labs(
    x = "Obese",
    y = "Proportion",
    fill = "Responded Desire",
    title = "Pregnancy Desire Asked by Obese Status"
  ) +
  scale_fill_manual(
    name = "Desire Asked",
    values = my_colors,
    labels = c("No", "Yes"),
    breaks = c("No", "Yes")
  ) +
  theme_minimal()
```

Pregnancy Desire Asked by Insurance Category

```{r}
#Barplot (binaryxbinary) Insurance x MG_Responded_Desire 


my_colors <- brewer.pal(2, "Set1")


# Create the ggplot with title, informative legend, and color palette
preg_desire |>
  filter(!is.na(MF_Insurance_Cat)) |>
  ggplot(aes(x = MF_Insurance_Cat, fill = MG_Responded_Desire)) +
  geom_bar(position = "fill") +
  labs(
    x = "Insurance Category",
    y = "Proportion",
    fill = "Responded Desire",
    title = "Pregnancy Desire Asked by Insurance Category"
  ) +
  scale_fill_manual(
    name = "Desire Asked",
    values = brewer.pal(2, "Set1"),  
    labels = c("No", "Yes"),
    breaks = c("No", "Yes")
  ) +
  theme_minimal()
```

Pregnancy Desire Asked by Encounter Type

```{r}
#Encounter_type.Desire x MG_Responded_Desire 

my_colors <- brewer.pal(2, "Set1")


# Create the ggplot with title, informative legend, and color palette
preg_desire |>
  filter(MF_Entry_Encounter_Type != "") |>
  ggplot(
       aes(MF_Entry_Encounter_Type, fill = MG_Responded_Desire)) +
  geom_bar(position = "fill") +
  labs(
    x = "Encounter Type",
    y = "Proportion",
    fill = "Responded Desire",
    title = "Pregnancy Desire Asked by Encounter Type"
  ) +
  scale_fill_manual(
    name = "Desire Asked",
    values = my_colors,
    labels = c("No", "Yes"),
    breaks = c("No", "Yes")
  ) +
  theme_minimal()

```

Pregnancy Desire Asked Desire by Hospital Location

```{r}
#HOSPITAL.Desire x MG_Responded_Desire 

my_colors <- brewer.pal(2, "Set1")


# Create the ggplot with title, informative legend, and color palette
preg_desire |>
filter(HOSPITAL != "") |> #Filter to only include values no NAs
ggplot(
  aes(HOSPITAL, fill = MG_Responded_Desire)) +
  geom_bar(position = "fill") +
  labs(
    x = "Hospital Location",
    y = "Proportion",
    fill = "Responded Desire",
    title = "Pregnancy Desire Asked Desire by Hospital Location"
  ) +
  scale_fill_manual(
    name = "Desire Asked",
    values = my_colors,
    labels = c("No", "Yes"),
    breaks = c("No", "Yes")
  ) +
  theme_minimal()

```

Pregnancy Desire Asked by Gestational Age

```{r}
#MG_GA x MG_Responded_Desire 

my_colors <- brewer.pal(2, "Set1")


# Create the ggplot with title, informative legend, and color palette
preg_desire |>
filter(MG_GA != "") |> #Filter to only include values no NAs
ggplot(
  aes(MG_GA, fill = MG_Responded_Desire)) +
  geom_bar(position = "fill") +
  labs(
    x = "Gestational Age",
    y = "Proportion",
    fill = "Responded Desire",
    title = "Pregnancy Desire Asked by Gestational Age"
  ) +
  scale_fill_manual(
    name = "Desire Asked",
    values = my_colors,
    labels = c("No", "Yes"),
    breaks = c("No", "Yes")
  ) +
  theme_minimal()
```

Pregnancy Desire Asked by ER Utilization

```{r}
#ER_Utilization.Desire x MG_Responded_Desire 

my_colors <- brewer.pal(2, "Set1")


# Create the ggplot with title, informative legend, and color palette
preg_desire |>
filter(MG_ER_Utilization != "") |> #Filter to only include values no NAs
ggplot(
  aes(MG_ER_Utilization, fill = MG_Responded_Desire)) +
  geom_bar(position = "fill") +
  labs(
    x = "ER Utilization",
    y = "Proportion",
    fill = "Responded Desire",
    title = "Pregnancy Desire Asked by ER Utilization"
  ) +
  scale_fill_manual(
    name = "Desire Asked",
    values = my_colors,
    labels = c("No", "Yes"),
    breaks = c("No", "Yes")
  ) +
  theme_minimal()
```

## Stratified analysis

Next, I am going to perform a stratified analysis for potential confounding variables to better understand the relationship between the predictor variables and the outcome variable.

Stratifying for Race

```{r}
#Stratified analysis comparing variables of interest to outcome variable and controlling for confounders 

strat.race <- tbl_strata(
  data = preg_desire,
  strata = HOSPITAL,
                            ~ .x |>
                            tbl_summary(by=MF_Race_Cat) |>
    modify_header(label ~ paste0("strat.race" , today(), "Stratifying for Race"))
    
)

strat.race
#Create a subset data set to only include variables of interest 

```

Stratifying for Age

```{r}
#Stratified analysis comparing variables of interest to outcome variable and controlling for confounders 

strat.age <- tbl_strata(
  data = preg_desire,
  strata = MG_Responded_Desire,
                            ~ .x |>
                            tbl_summary(by=MF_Age) |>
    modify_header(label ~ paste0("strat.age" , today(), "Stratifying for Age"))
    
)

strat.age
#Create a subset data set to only include variables of interest 
```

Stratifying for Gestational Age

```{r}
#Stratified analysis comparing variables of interest to outcome variable and controlling for confounders 

strat.GA <- tbl_strata(
  data = preg_desire,
  strata = MG_Responded_Desire,
                            ~ .x |>
                            tbl_summary(by=MG_GA) |>
    modify_header(label ~ paste0("strat.GA" , today(), "Stratifying for Gestational Age"))
    
)

strat.GA
#Create a subset data set to only include variables of interest 
```

Stratifying for Hospital Location

```{r}
#Stratified analysis comparing variables of interest to outcome variable and controlling for confounders 

strat.hospital <- tbl_strata(
  data = preg_desire,
  strata = MG_Responded_Desire,
                            ~ .x |>
                            tbl_summary(by=HOSPITAL) |>
    modify_header(label ~ paste0("strat.hospital" , today(), "Stratifying for Hospital Location"))
    
)

strat.hospital
#Create a subset data set to only include variables of interest 
```

Stratifying for Type of Insurance

```{r}
#Stratified analysis comparing variables of interest to outcome variable and controlling for confounders 

strat.insurance <- tbl_strata(
  data = preg_desire,
  strata = MG_Responded_Desire,
                            ~ .x |>
                            tbl_summary(by=MF_Insurance_Cat) |>
    modify_header(label ~ paste0("strat.insurance" , today(), "Stratifying for Type of Insurance"))
    
)

strat.insurance
#Create a subset data set to only include variables of interest 
```

Stratifying for ER Utilization

```{r}
#Stratified analysis comparing variables of interest to outcome variable and controlling for confounders 

strat.ER <- tbl_strata(
  data = preg_desire,
  strata = MG_Responded_Desire,
                            ~ .x |>
                            tbl_summary(by=MG_ER_Utilization) |>
    modify_header(label ~ paste0("strat.ER" , today(), "Stratifying for ER Utilization"))
    
)

strat.ER
#Create a subset data set to only include variables of interest 
```

## Logistic Regression

Next, I am going to run a logistic regression model for insight into the likelihood that an individual is asked the "Pregnancy Desire" question.

```{r}
#Logistic Regression and ROC

preg_desire.glm <- glm(MG_Responded_Desire ~ MF_Age+MF_Race_Cat+MF_Entry_Obese+MF_Insurance_Cat+HOSPITAL+MG_GA+MG_ER_Utilization , data = preg_desire, family = binomial(logit))
summary(preg_desire.glm)

#Odds ratio
exp(cbind(OR = coef(preg_desire.glm), confint(preg_desire.glm)))

glm.pred <- predict(preg_desire.glm, preg_desire, type = "response")
head(glm.pred)

preg_desire.pred.values <- bind_cols(truth = preg_desire$MG_Responded_Desire, 
                                 glmpred = glm.pred) |>
  mutate(predicted = factor(case_when(glmpred > 0.5 ~ "Desire Asked",
                               glmpred <= 0.5 ~ "Desire Not Asked")))

autoplot(roc_curve(preg_desire.pred.values, 
                   truth, glmpred,
                   event_level = "second"))

#Plotting AUC
preg_desire.pred.values |>
    roc_auc(truth, glmpred, event_level = "second")
```
## Cross Validation



## Random Forest Analysis

```{r}
#remove NAs
preg_desire <- preg_desire |>
  drop_na()

# Model Specification
rf_cls_spec <- 
  rand_forest(trees = 1000, min_n = 5) |> 
  set_engine("randomForest", importance = TRUE) |>
  set_mode("classification")
rf_cls_spec


# Model Fitting
rf_cls_fit <- rf_cls_spec |>
  fit(MG_Responded_Desire ~ ., data = preg_desire)
rf_cls_fit


# Prediction Values
preg_desire.rf.pred.values <- bind_cols(
  truth = preg_desire$MG_Responded_Desire,
  predict(rf_cls_fit, preg_desire),
  predict(rf_cls_fit, preg_desire, type = "prob")
)

roc_auc(preg_desire.rf.pred.values, 
                   truth, .pred_Yes, event_level = "second")


```

To get an understanding of the variables that most contribute to the classification, I will extract the importance scores using the vip package. Using all of the data, first using extract_fit_engine() to get the output from the original function, then using the vip function.

```{r}
rf_cls_fit |>
  extract_fit_engine() |>
  importance()

rf_cls_fit |>
  extract_fit_engine() |>
  vip()
```

## Conclusion

## References
