---
title: 'FINAL PROJECT_YOU'
subtitle: "BMIN5030_Fall2023"
format: 
  html:
    theme: lumen
    toc: true #
    toc-location: left 
editor: visual
theme: united #how you can change your theme
embed-resources: true
number-sections: true
editor_options: 
  chunk_output_type: inline
---

# Overview

> Sepsis is among the leading causes of hospital readmissions, and survivors often experience long-term consequences. Research has shown that home health services can improve the outcomes of sepsis survivors, reducing the likelihood of hospital readmission. This project aims to identify the patient/clinical characteristics that are associated with sepsis survivors' discharge dispositions (home or home with home health care) and 30-day rehospitalization using Medical Information Mart for Intensive Care (MIMIC-IV) data, which is a publicly accessible and deidentified data.

# Introduction

> Sepsis is a severe condition caused by infection, leading to life-threatening organ dysfunction. Annually more than 1.7 million adults in the US are diagnosed with sepsis, with a majority falling into the age group of 65 or older. Despite improvements in healthcare, sepsis survivors in this age group still grapple with elevated mortality rates and lingering physical, psychological, and emotional consequences. A significant proportion of sepsis survivors are readmitted to the hospital within 30 days after initial sepsis hospitalization. Sepsis places a substantial economic burden on society, necessitating post-acute care to address lingering complications. Home health care (HHC) is provided to a significant portion of sepsis survivors to support their recovery and rehabilitation. However, the impact of HHC on reducing 30-day readmission rates for sepsis survivors remains unexplored. This retrospective cohort study, using the MIMIC-IV database, aims to address this gap by examining the following objectives: (1) describe and compare baseline patient characteristics (i.e., demographic and clinical characteristics) and 30-day readmission rates of older sepsis survivors discharged home with HHC and without HHC; (2) determine the risk factors associated with 30-day readmission.
>
> The proposed study involves interdisciplinary collaboration, focusing on the transition of sepsis survivors form acute hospitals to post-acute settings (i.e., home and home health care). Transisition is one of the vulnerable points where medical errors occur, as multiple stakeholders and multiple entities are involved in this process. Discharge planning involves a team of professionals, including physicians, nurses, social workers, and case managers, and patients and care partners to ensure safe and smooth transition from hospital to home. The findings of the study may offer valuable insights to healthcare providers engaged in discharge planning for older sepsis survivors. By considering the risk factors associated with readmission, this study can serve as a basis for supporting evidence-based recommendations for those who are involved in decision-making for discharge disposition decisions. This, in turn, empowers healthcare decision-makers to strategize discharge planning effectively, with a focus on identifying individuals at the highest risk of rehospitalization among the patient population with continuous health concerns.

# Methods

Data were downloaded using Mac Terminal Version 2.11 (440), downloaded in September 2023, via designated terminal \<wget -r -N -c -np \--user ysb8390 \--ask-password https://physionet.org/files/mimiciv/2.2/\>. For data analysis, R software (version 4.3.1., CRAN) was used.

## Data Source: Overview of MIMIC-IV

MIMIC-IV is a public database, which contains deidentified clinical data of adult patients aged 18 or older admitted to critical care units at the Beth Israel Deaconess Medical Center (BIDMC) in Boston, Massachusetts from either the ED or an ICU (Johnson, 2023). This extensive data contains records from 299,712 patients, encompassing 431,231 hospital admissions and 73,181 ICU stays between 2008 and 2019.

## Installing/Loading Necessary Packages

```{r}
#| eval: FALSE

install.packages(c("tidyverse", "dplyr", "gtsummary", "ggplot2", "lubridate", "RColorBrewer", "cowplot", "ggpubr", "pROC", "comorbidity", "readr", "janitor", "pacman", "gee", "janitor", "geepack", "modelsummary", "psych", "furniture", "pander", "lme4", "texreg"))
```

```{r}
#| label: load-packages
#| include: FALSE

library(tidyverse)
library(dplyr) #For data cleaning
library(gtsummary) #For descriptive statistics
library(ggplot2) #For graphd 
library(lubridate) #For handling and converting dates
library(RColorBrewer) #For coloring the plots
library(cowplot) #For combining multiple plots into one figure
library(ggpubr) #For combining multiple graphs into one figure
library(pROC) #For cross-validation
library(comorbidity) #For Elixhauser comorbidity
library(readr)
library(broom) # useful for regression models
library(janitor)
library(pacman)
library(gee) # generalized estimation equation solver
library(geepack) # generalized estimation equation package
library(modelsummary)
library(psych) # describe function
library(furniture) # nice table1() descriptives
library(pander) # nice looking general tabulations
library(lme4) # linear, generalized linear, & nonlinear mixed models
library(texreg) # Convert regression output to LaTeX or HTML tables
library(remotes)
```

# Identify Total Number of Hospital Admission

```{r}
admissions <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Penn/ONR/MIMIC/mimic-iv-2.2/hosp/admissions.csv")

admissions |>
  summarise(n_distinct(hadm_id),
            n_distinct(subject_id))

admissions <- admissions |>
  mutate(admittime = ymd_hms(admittime),
         dischtime = ymd_hms(dischtime))
```

# Cohort Identification

### Identifying in-hospital stays (vs. observational stays)

In this study, I will focus on cases when patients had in-hospital stays, meaning hospital length of stays longer than 48 hours to exclude observational stay cases. We will first create a hospital length of stay variable and then filter cases whose hospital length of stay is less than 48 hours (i.e., observational stays).

```{r}
transfers <- read.csv(file="/Users/sangbin/Library/Mobile Documents/com~apple~CloudDocs/Penn/ONR/MIMIC/mimic-iv-2.2/hosp/transfers.csv")

# Convert the intime and outtime from character to datetime format
transfers <- transfers |>
  mutate(intime = ymd_hms(intime),
         outtime = ymd_hms(outtime))


#In-hospital stay (exclude observation care)
unique(transfers$eventtype) # eventtype = "ED", "admit", "discharge", "tranfer"

transfers <- transfers |>
  arrange(subject_id, intime)

hosp_los_fromed <- transfers |>
  group_by(subject_id, hadm_id) |>
  filter(!is.na(hadm_id)) |>
  filter(intime == min(intime) | intime == max(intime))

hosp_los_fromed <-hosp_los_fromed |>
  group_by(subject_id, hadm_id) |>
  mutate(hosp_los = as.numeric(difftime(max(intime), min(intime), units = "days"))) |>
  mutate(inhosp = ifelse(hosp_los < 2, 0, 1)) |>
  mutate(inhosp = factor(inhosp, levels = c(0, 1))) |>
  ungroup()
# hosp_los value is same for each hadm_id

# Investigate why the number of observations is in odd numbers (862465) -which i believe should be in even number since I selected min/max value for intime (transfers table had 1,890,972 rows)

hosp_los_fromed |>
  janitor::tabyl(hadm_id) |>
  arrange(desc(n)) |>
  head()
# Three hadm_ids (23605872, 26530149, 26572582) had three rows
# There were duplicate rows with the same intime/outtime value
# subject_id = 11773656, dropped transfer_id = 32333659 since it is captured by transfer_id = 33659721
# subject_id = 14725709, dropped transfer_id = 34471347 since intime = outtime and is the same for discharge time
# subject_id = 15293444, dropped transfer_id = 39761845 since intime = outtime and is the same for admission time

hosp_los_fromed <- hosp_los_fromed |>
  filter(!transfer_id %in% c(32333659, 34471347, 39761845))
# now I have 862,462 rows

# confirm if every hadm_id have two rows
hosp_los_fromed |>
  janitor::tabyl(hadm_id) |>
  arrange(desc(n)) |>
  head()

#### make a new variable named discharge_time and then select the first row
hosp_los_fromed <- hosp_los_fromed |>
  arrange(subject_id, hadm_id, intime) |>
  group_by(hadm_id) |>
  mutate(discharge_time = intime [2]) |>
  ungroup()


hosp_los_fromed <- hosp_los_fromed |>
  select(subject_id, hadm_id, intime, discharge_time, hosp_los, inhosp) |> # select the columns I am interested in
  group_by(subject_id, hadm_id) |>
  filter(row_number() == 1) |> # this is to avoid multiple values (hosp_los, inhosp) for the same hadm_id due to different transfer_id (in and out) 
  rename(tran_intime = intime,
         tran_outtime = discharge_time)
# hosp_los_inhosp = 431231 observations (which is half of hosp_los_fromed = 862462)

hosp_los_inhosp <- hosp_los_fromed |>
  filter(inhosp == 1) # observations have decreased from 431231 to 272506 after limiting to hosplos >= 2 (days)

# data frame
# hosp_los_inhosp = in-hospital stays cohort (sourced from transfers table but only kept the first row of each hadm_id)
# variable
# inhosp = 1 means inhospital stay (hosp_los > 2days)
```

### Sepsis Cohort Selection

Sepsis patients will be identified based on international classification of disease (ICD) codes from both the 9th and 10th revisions, as both versions were available in MIMIC. Sepsis cases will be identified through two strategies: (1) explicit ICD-9 codes (995.92, and 785.52) or explicit ICD-10 codes (R65.2, R65.20, and R65.21), and (2) implicit identification method using Angus criteria (Angus, 2001) that considers the case as sepsis when the patient is coded for both infection (i.e., ICD 9 or 10 infection codes) and organ dysfunction (i.e., ICD 9 or 10 organ dysfunction codes). These two strategies are adopted to increase the sensitivity of sepsis diagnosis up to 50% compared to other methods to identify sepsis patients.

Now, I am going to identify how many admissions are associated with sepsis diagnosis using both explicit and implicit methods.

```{r}
# Diagnosis_icd table
icd  <- read_csv(file="/Users/sangbin/Library/Mobile Documents/com~apple~CloudDocs/Penn/ONR/MIMIC/mimic-iv-2.2/hosp/diagnoses_icd.csv.gz")

# Check data class 
str(icd$icd_code) #character
str(icd$icd_version) #integar

inhosp_icd <- icd |>
  left_join(hosp_los_inhosp, by = c("subject_id", "hadm_id")) |>
  filter(inhosp == 1)

# Icd9 codes
# Explicit sepsis
inhosp_icd <- inhosp_icd |>
  mutate(
    icd9_sepsis = case_when(
      icd_version == 9 &
        icd_code %in% c ("99592", "78552") ~ 1,
      TRUE ~ 0
    )
  )

table(inhosp_icd$icd9_sepsis)

# Implicit - Infection    
inhosp_icd<- inhosp_icd |>
  mutate(
    icd9_infection = case_when(
      icd_version == 9 &
        substr(icd_code, 1, 3) %in% c("001","002","003","004","005","008",
                                      "009","010","011","012","013","014",
                                      "015","016","017","018","020","021",
                                      "022","023","024","025","026","027",
                                      "030","031","032","033","034","035",
                                      "036","037","038","039","040","041",
                                      "090","091","092","093","094","095",
                                      "096","097","098","100","101","102",
                                      "103","104","110","111","112","114",
                                      "115","116","117","118","320","322",
                                      "324","325","420","421","451","461",
                                      "462","463","464","465","481","482",
                                      "485","486","494","510","513","540",
                                      "541","542","566","567","590","597",
                                      "601","614","615","616","681","682",
                                      "683","686","730") ~ 1,
      substr(icd_code, 1, 4) %in% c("5695","5720","5721","5750","5990","7110",
                                    "7907","9966","9985","9993") ~ 1,
      substr(icd_code, 1, 5) %in% c("49121","56201","56203","56211","56213",
                                    "56983", "99591") ~ 1,
      TRUE ~ 0
    )
  )

table(inhosp_icd$icd9_infection)

# Implicit - Organ dysfunction
inhosp_icd<- inhosp_icd |>
  mutate(
    icd9_organdysfunction = case_when(
      icd_version == 9 &
        substr(icd_code, 1, 3) %in% c("458", "293", "570", "584") ~ 1, 
      substr(icd_code, 1, 3) %in% c("7855", "3483", "3481", "2874", "2875", "2869", "2866", "5734") ~ 1,
      TRUE ~ 0
    )
  )

table(inhosp_icd$icd9_organdysfunction)


# Icd10 codes
# Explicit sepsis
inhosp_icd <- inhosp_icd |>
  mutate(
    icd10_sepsis = case_when(
      icd_version == 10 &
        icd_code %in% c ("R652", "R6520", "R6521") ~ 1,
      TRUE ~ 0
    )
  )

table(inhosp_icd$icd10_sepsis)

# Implicit - Infection
# As ICD-10 codes for infection is too long (830 codes), made a new text.file named icd10_infection
# Import icd10_infection
icd10_angus_infection <- read_csv("/Users/sangbin/Library/Mobile Documents/com~apple~CloudDocs/Penn/ONR/sepsis definition/ITRANSFER_icd10/icd10_angus_infection")

icd10_angus_infection <- as.list(icd10_angus_infection) #change the data.frame into a list

inhosp_icd <- inhosp_icd |>
  mutate(
    icd10_infection = case_when(
      icd_version == 10 &
        icd_code %in% (icd10_angus_infection$V1) ~ 1,
      TRUE ~ 0
    )
  )

table(inhosp_icd$icd10_infection)


# Implicit - Organ Dysfunction
inhosp_icd <- inhosp_icd |>
  mutate(
    icd10_organdysfunction = case_when(
      icd_version == 10 &
        icd_code %in% c("I951", "I9589", "I953", "I952", "I9581", "I959", "R579", "R570", "R6521", "R571", "R578", "D65", "D688", "D689", "D6951", "D6959", "D696", "K7200", "K762", "K763", "F05", "G931", "G9340", "G9341", "G9349", "I6783", "N170", "N171", "N172", "N178", "N179", "J9600", "J9690", "J80", "R0603", "J9610", "J9620", "J984", "R0681", "R092") ~ 1,
      TRUE ~ 0
    )
  )

table(inhosp_icd$icd10_organdysfunction)

# Sepsis cases identified by Angus method
angus <- inhosp_icd |>
  group_by(subject_id, hadm_id) |>
  summarise( ## should be 'summarise' instead of 'mutate'
    icd9_angus = ifelse (any(icd9_infection == 1) & any(icd9_organdysfunction == 1), 1, 0),
    icd10_angus = ifelse (any(icd10_infection == 1) & any(icd10_organdysfunction == 1), 1, 0)
  ) |>
  ungroup()

table(angus$icd9_angus)
table(angus$icd10_angus)


# Join angus with hosp_los_inhosp
inhosp_icd <- inhosp_icd |>
  left_join(angus, by = c("subject_id", "hadm_id"))

# Create a new data.frame for sepsis_cohort
sepsis_cohort <- inhosp_icd |>
  group_by(subject_id, hadm_id) |>
  summarise(
    sepsis = case_when(
      any(icd9_sepsis == 1) | (any(icd9_infection == 1) & any(icd9_organdysfunction == 1)) ~ 1,
      any(icd10_sepsis == 1) | (any(icd10_infection == 1) & any(icd10_organdysfunction == 1)) ~ 1,
      TRUE ~ 0
    )
  ) |>
  ungroup()

table(sepsis_cohort$sepsis) # non-sepsis = 233347; sepsis = 39046
sum(is.na(sepsis_cohort$sepsis)) # no missing values

# join with hosp_los_inhosp table (inhospital stay cohort)
inhosp_sepsis_cohort <- hosp_los_inhosp |>
  left_join(sepsis_cohort, by =c("subject_id", "hadm_id")) 

table(inhosp_sepsis_cohort$sepsis) # non-sepsis = 233347; sepsis = 39046 in inhospital stays cohort
unique(inhosp_sepsis_cohort$sepsis)
sum(is.na(inhosp_sepsis_cohort$sepsis)) #113 missing values

## investigating missing sepsis values
inhosp_sepsis_cohort |>
  filter(is.na(sepsis))
# when searched their hadm_ids in the original icd table, not found
# hadm_ids that did not have icd codes

# Select patients with sepsis (explicit & implicit)
inhosp_sepsis_cohort <- inhosp_sepsis_cohort |>
  filter(sepsis == 1)

table(inhosp_sepsis_cohort$sepsis) # confirmed that only patients with sepsis is captured (39046 hospital episodes associated with sepsis inhospitalization)

# dataframe
# sepsis_cohort = sepsis patients
# inhosp_sepsis_cohort = sepsis patients with in hospital stays (hospital los > 2days) (39046 observations)

# variables
# sepsis = explicit + implicit sepsis 
# icd9_angus/icd10_angus = implicit sepsis
# icd9_sepsis/icd10_sepsis = explicit sepsis
```

As I have identified sepsis cohort, now I am going to limit our sample to older adults.

### Older Sepsis Cohort Selection

Although sepsis can impact people of all ages, it has been reported that some groups are more likely to be affected, including older adults. Now, I will filter cases to limit the cohort to older sepsis patients.

```{r}
# Read in the data
patients <- read_csv(file="/Users/sangbin/Library/Mobile Documents/com~apple~CloudDocs/Penn/ONR/MIMIC/mimic-iv-2.2/hosp/patients.csv.gz")

# Calculate age for each hospital admission event
# codes sourced from: https://github.com/MIT-LCP/mimic-code/issues/963)

patients <- patients |>
  mutate(anchor_dob = anchor_year - anchor_age,
         anchor_year_start = str_trunc(anchor_year_group, width = 4, ellipsis  = "", side = "right")) |>
  left_join(distinct(admissions, hadm_id, subject_id, admittime), by = "subject_id") |>
  subset(!is.na(hadm_id)) |>
  mutate(admittime = as_datetime(admittime),
         anchor_dob = ymd(anchor_dob, truncated = 2),
         age = trunc(time_length(difftime(admittime, anchor_dob), "years")),
         anchor_year = paste(anchor_year_start, "-", (as.numeric(anchor_year_start) + 2))) |> ## Because the original anchor_year_group was within 2 years
  select(subject_id, hadm_id, gender, age, anchor_year, dod)

inhosp_older_sepsis <- inhosp_sepsis_cohort |> 
  left_join(patients, by = c("subject_id", "hadm_id"))

inhosp_older_sepsis <- inhosp_older_sepsis |>
  mutate(older_adult = ifelse(age < 65, 0, 1)) |>
  mutate(older_adult = factor(older_adult, levels = c(0, 1)))

table(inhosp_older_sepsis$older_adult)

inhosp_older_sepsis <- inhosp_older_sepsis |>
  filter(older_adult == 1)

# dataframe
# older_adults = filtered to patients who are 65 + years 
# inhosp_older_sepsis = filtered by inhosp == 1, sepsis == 1, age >= 65 (24348 observations)
# age calculated for each hadm_id
```

### Older Sepsis Discharged Home Cohort

Now, I will filter cases to patients who were discharged home without any services and those who were discharged home with home health care.

```{r}
inhosp_older_sepsis2 <- inhosp_older_sepsis |>
  left_join(admissions, by = c("subject_id", "hadm_id"))

# older sepsis patients' (inhospital stays) discharge disposition
inhosp_older_sepsis2 |>
  select(discharge_location)|>
  tbl_summary() 
# 12% went home; 25% went home with HHC (among older sepsis patients with inhospital stays regardless of their discharge dispositions)

inhosp_older_sepsis2 |>
  ggplot(aes(x = discharge_location, fill = gender)) +
  geom_bar() +
  labs(x = "Discharge Location", y = "Count") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Select patients who went home without any services or with HHC
inhosp_older_sepsis_home <- inhosp_older_sepsis2 |>
  filter(discharge_location == "HOME" | discharge_location == "HOME HEALTH CARE")

unique(inhosp_older_sepsis_home$discharge_location) # successfully filtered

inhosp_older_sepsis_home |>
  select(discharge_location)|>
  tbl_summary()
# 33% went home; 67% went home with HHC (among older sepsis patients with inhospital stays went either home or HHC)

# data frame
# inhosp_older_sepsis2 = joined inhosp_older_sepsis with admissions table
# inhosp_older_sepsis_home = filtered to 'sepsis == 1' & 'age >= 65' & 'discharge_location = "HOME" | discharge_location = "HOME HEALTH CARE"' (24348 unique hospitalizations)
```

Now, as we have identified our cohort, now I am going to make predictors in a format that I would like to include in a model.

## Manipulating Predictors

### Demographic characteristics

I will collapse categories of several demographic characteristics for analysis.

-   race

```{r}
table(inhosp_older_sepsis_home$race) # total of 33 races
sum(is.na(inhosp_older_sepsis_home$race)) # no missing values

## MAY NEED TO SPLIT UNKNOWN & OTHER ??#####
otherunknown_race <- c("AMERICAN INDIAN/ALASKA NATIVE", "MULTIPLE RACE/ETHNICITY", "NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER", "OTHER", "PATIENT DECLINED TO ANSWER", "PORTUGUESE", "SOUTH AMERICAN", "UNABLE TO OBTAIN", "UNKNOWN")

inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  mutate(race_cate = case_when(
    str_detect(race, "^WHITE") ~ "WHITE",
    str_detect(race, "^BLACK") ~ "BLACK",
    str_detect(race, "^HISPANIC") ~ "HISPANIC",
    str_detect(race, "^ASIAN") ~ "ASIAN",
    race %in% otherunknown_race ~ "OTHER/UNKNOWN"
  ))

# Change to factor
inhosp_older_sepsis_home$race_cate <- factor(inhosp_older_sepsis_home$race_cate,
                                   levels = c("WHITE", "BLACK", "HISPANIC", 
                                              "ASIAN", "OTHER/UNKNOWN")
                                   )
table(inhosp_older_sepsis_home$race_cate)

# Validate code
table(inhosp_older_sepsis_home$race_cate)
sum(is.na(inhosp_older_sepsis_home$race_cate))

# Compare with entire breakdown of race
admissions |>
  select(race) |>
  tbl_summary()
```

-   marital status

```{r}
table(inhosp_older_sepsis_home$marital_status) # Divorced, Married, Single, Widowed
sum(is.na(inhosp_older_sepsis_home$marital_status)) # no missing values

# Change to factor
inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  mutate(marital_status_cate = factor(marital_status,
                            levels = c("MARRIED", "SINGLE", 
                                       "DIVORCED", "WIDOWED")))

# Validate code
table (inhosp_older_sepsis_home$marital_status_cate)
```

-   insurance

```{r}
table(inhosp_older_sepsis_home$insurance) # Medicare, Medicaid, Other
sum(is.na(inhosp_older_sepsis_home$insurance)) # no missing values


# Change to factor
inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  mutate(insurance = factor(insurance,
                            levels = c("Medicare", "Medicaid", "Other")))

# Validate code
table (inhosp_older_sepsis_home$insurance)
```

-   gender

```{r}
table(inhosp_older_sepsis_home$gender) # pretty even distribution
sum(is.na(inhosp_older_sepsis_home$gender)) # no missing values

# Change to factor
inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  mutate(gender = factor(gender,
                            levels = c("M", "F")))

# Validate code
table (inhosp_older_sepsis_home$gender)
```

### Clinical characteristics

-   admission type

```{r}
table(inhosp_older_sepsis_home$admission_type) 
sum(is.na(inhosp_older_sepsis_home$admission_type)) # no missing values

adm_nonemergent <- c("ELECTIVE", "SURGICAL SAME DAY ADMISSION")
adm_emergent <- c("DIRECT EMER.", "DIRECT OBSERVATION", "EU OBSERVATION", "EW EMER.", "OBSERVATION ADMIT", "URGENT")

inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  mutate(admission_type_cate = case_when(
    admission_type %in% adm_nonemergent ~ "Elective",
    admission_type %in% adm_emergent ~ "Emergent"
  ))

table (inhosp_older_sepsis_home$admission_type_cate)
sum(is.na(inhosp_older_sepsis_home$admission_type_cate))

# Change to factor
inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  mutate(admission_type_cate = factor(admission_type_cate,
                            levels = c("Elective", "Emergent")))

# Validate code
table (inhosp_older_sepsis_home$admission_type_cate)
```

-   Hospital length of stay

I have created hospital length of stay variable (hosp_los_fromed) (that is calculated from ED intime for each hospital admission episode) while I was identifying patients who had in-hospital stays compared to those who had observational stays. (variable name = hosp_los)

-   number of previous hospitalization

Now we are going to make a predictor variable that tells us number of previous hospitalizations in the past 90days.

```{r}

admissions <- admissions |>
  group_by(subject_id) |>
  arrange(subject_id, admittime) |> # make sure the data frame is arrange by admittime before running the below for-loop code
  mutate(prev90d = admittime - days(90)) |>
  ungroup()

sum(is.na(admissions$prev90d)) # confirmed that there is no missing value

admissions <- admissions |>
  group_by(subject_id) |>
  arrange(subject_id, admittime) |>
  mutate(prev90d_hosp = ifelse(is.na(dplyr::lag(dischtime)) | 
                                  dplyr::lag(dischtime) < prev90d, 0, 1)) |>
  mutate(prev90d_hosp = factor(prev90d_hosp, levels = c(0, 1), labels = c(0, 1))) |>
  ungroup()

prev90d_hosp_sum <- integer()
for (i in 1:nrow(admissions)) {
  if(i == 1) # first row coded 0 bc no previous hospitalization is present
    prev90d_hosp_sum[i] <- 0
  else if(i < 21) { # set for 20 because that was the maximum value one was hospitalized within 90 day time frame
    this_patient <- admissions$subject_id[i]
    this_prev90d <- admissions$prev90d[i]
    this_admittime <- admissions$admittime[i]
    
    prev90d_hosp_sum[i] <- admissions |> 
      filter(subject_id == this_patient & 
               dischtime >= this_prev90d & 
               admittime < this_admittime) |> 
      nrow()
  } else{
    this_patient <- admissions$subject_id[i]
    this_prev90d <- admissions$prev90d[i]
    this_admittime <- admissions$admittime[i]
    
    prev90d_hosp_sum[i] <- admissions[(i-20):i,] |> 
      filter(subject_id == this_patient & 
               dischtime >= this_prev90d & 
               admittime < this_admittime) |>
      nrow()
  }
}

admissions$prev90d_hosp_sum <- prev90d_hosp_sum

admissions2 <- admissions |>
  select(subject_id, hadm_id, prev90d, prev90d_hosp, prev90d_hosp_sum)

inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  left_join(admissions2, by = c("subject_id", "hadm_id"))

```

-   Number of ICU admissions

```{r}
icustays <- read_csv(file="/Users/sangbin/Library/Mobile Documents/com~apple~CloudDocs/Penn/ONR/MIMIC/mimic-iv-2.2/icu/icustays.csv.gz")
colnames(icustays)

icustays <- icustays |>
  rename(icu_los = los) |> # renamed to not confuse with hospital length of stay
  select(-c(last_careunit, intime, outtime)) #only selecting subject_id, hadm_id, stay_id, first_careunit, icu_los
# Total of 73181 rows

# Total ICU length of stay within a hospital episode 
icustays2 <- icustays |>
  group_by(subject_id, hadm_id) |>
  summarize(total_icu_los = sum(icu_los))
# Total of 66239 rows

# Total number of ICU admission within a hospital episode
icustays3 <- icustays |>
  group_by(subject_id, hadm_id) |>
  mutate(n_icuadmissions = n()) |>
  distinct(hadm_id, .keep_all = TRUE)
# Total of 66239 rows

total_icustays <- icustays3 |>
  left_join(icustays2, by = c("subject_id", "hadm_id"))
# Total of 66239 rows

# remove columns I don't need
total_icustays <- total_icustays |>
  select(-c(stay_id, icu_los))
  
inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  left_join(total_icustays, by = c("subject_id", "hadm_id"))
# Total of 8954 rows

sum(is.na(inhosp_older_sepsis_home$total_icu_los))
# Changed NAs for total_icu_los to 0 (since total_icu_los = 0 means that the patient was not admitted to icu)
inhosp_older_sepsis_home$total_icu_los[is.na(inhosp_older_sepsis_home$total_icu_los)] <- 0

table(inhosp_older_sepsis_home$n_icuadmissions)
sum(is.na(inhosp_older_sepsis_home$n_icuadmissions))
# Total of 6310 cases with NAs

inhosp_older_sepsis_home$n_icuadmissions[is.na(inhosp_older_sepsis_home$n_icuadmissions)] <- 0
table(inhosp_older_sepsis_home$n_icuadmissions) # successfully assigned



# Among inhosp_older_sepsis_home cohort (among 8954 admission episodes) 2644 patients had ICU stay (about 30%)
inhosp_older_sepsis_home |>
  janitor::tabyl(n_icuadmissions)

```

-   Elixhauser Comorbidity Score

    Before making the comorbidity scores, since MIMIC-IV contains both ICD version 9 and 10, I will investigate cases with two versions of ICD codes for an admission episode and whether there are any duplicates.

```{r}
# Check if hospital admission ID can have ICD codes from both versions
test_icd <- icd |>
  group_by(hadm_id) |>
  summarise(unique_icd = n_distinct(icd_version))
table(test_icd$unique_icd)

test_icd |>
  filter(unique_icd == 2)
# There are 10 cases where two versions of ICD codes have been used
# Need to spearate for ICD 9 and ICD 10 codes
```

```{r}
#| eval: FALSE

# Investigate if there are any duplicates between ICD 9 and 10
icd_test <- icd |>
  filter(hadm_id %in% c("20216016", "21575927", "22870827", "23076003", "23969809", "24773199", "27016754", "27635276", "28333632", "29918558"))

# read in the icd_dictionary
d_icd <- read.csv(file="/Users/sangbin/Library/Mobile Documents/com~apple~CloudDocs/Penn/ONR/MIMIC/mimic-iv-2.2/hosp/d_icd_diagnoses 3.csv")

icd_test_dict <- icd_test |>
  left_join(d_icd, by = c("icd_version", "icd_code"))

icd_test_dict |> head(20)
# there are some overlap between versions, but not necessarily exactly same
# and their length of hosp los was not that long either
# thus, decided to exclude 10 cases
# although, some of cases had sepsis a diagnosis, they were not included in inhosp_older_sepsis_home cohort
```

```{r}
# Exclude 10 cases that have two ICD versions for one hadm_id
icd_uniquev <- icd |>
  filter(!hadm_id %in% c("20216016", "21575927", "22870827", "23076003", "23969809", "24773199", "27016754", "27635276", "28333632", "29918558"))

# Manipulate the ICD dataset to put all ICD codes for each hospital admission episode into a single row
test_icd1 <- icd_uniquev |>
  group_by(hadm_id) |>
  filter(all(icd_version == 9)) |> # only selected hadm_ids with icd9 codes
   summarise(
    icd9_code = paste(case_when(
      icd_version == 9 ~ as.character(icd_code)),
      collapse = ", "))

test_icd2 <- icd_uniquev |>
  group_by(hadm_id) |>
  filter(all(icd_version == 10)) |> # only selected hadm_ids with icd10 codes
   summarise(
    icd10_code = paste(case_when(
      icd_version == 10 ~ as.character(icd_code)),
      collapse = ", "))

# Create a dataframe with the Elixhauser comorbidity scores
icd9_comorbidity <- comorbidity::comorbidity(x= test_icd1, id = "hadm_id", code = "icd9_code", map = "elixhauser_icd9_quan", assign0 = FALSE)
icd9_comorbidity$elixhauser9 <- score(x = icd9_comorbidity, weights = "vw", 
                                       assign0 = FALSE)

icd10_comorbidity <- comorbidity::comorbidity(x= test_icd2, id = "hadm_id", code = "icd10_code", map = "elixhauser_icd10_quan", assign0 = FALSE)
icd10_comorbidity$elixhauser10 <- score(x = icd10_comorbidity, weights = "vw", 
                                         assign0 = FALSE)

table(icd9_comorbidity$elixhauser9)
table(icd10_comorbidity$elixhauser10)

# Changing the variable for elixhausesr score into a same name to combine two dataframes together
icd9_comorbidity <- icd9_comorbidity |>
  rename(comorbidity = elixhauser9) |>
  select(hadm_id, comorbidity)

icd10_comorbidity <- icd10_comorbidity |>
  rename(comorbidity = elixhauser10) |>
  select( hadm_id, comorbidity)

# Combine two dataframes 
comorbidities <- bind_rows(icd9_comorbidity, icd10_comorbidity) #430842 observations
# icd9_comorbidity: 276793
# icd10_comorbidity: 154049
# comorbidities: combined the two (276793 + 154049 = 430842)
# successfully combined

# Join with our cohort
inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  left_join(comorbidities, by = "hadm_id")

inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  arrange(subject_id, tran_intime)

```

## Outcome

```{r}
# Outcome variable: 30-day rehospitalization; 60-day rehospitalization
inhosp_older_sepsis_home <- inhosp_older_sepsis_home |>
  group_by(subject_id) |>
  arrange(subject_id, hadm_id, admittime) |>
  mutate(prevadm30d = admittime - days(30)) |>
  mutate(rehosp30d = ifelse(is.na(dplyr::lag(dischtime)) |
                              dplyr::lag(dischtime) < prevadm30d, 0, 1)) |>
  mutate(prevadm60d = admittime - days(60)) |>
  mutate(rehosp60d = ifelse(is.na(dplyr::lag(dischtime)) |
                              dplyr::lag(dischtime) < prevadm60d, 0, 1)) |>
  mutate(rehosp30d = factor(rehosp30d, levels = c(0, 1))) |>
  mutate(rehosp60d = factor(rehosp60d, levels = c(0, 1))) |>
  ungroup()


table(inhosp_older_sepsis_home$rehosp30d) # 1321 cases had 30day readmission
table(inhosp_older_sepsis_home$rehosp60d) # 1403 cases had 60day readmission

```

As I have identified the cohort and made all of the variables I need for analysis, I will save the file.

```{r}
write_csv(inhosp_older_sepsis_home, "/Users/sangbin/Library/Mobile Documents/com~apple~CloudDocs/Penn/ONR/inhosp_older_sepsis_home.csv")
```

# Results

First, we will identify characteristics of included hospital admissions.

-   Demographic characteristics

```{r}
# Demo characteristics of the first admission (Baseline)
inhosp_older_sepsis_home |>
  arrange(subject_id, hadm_id, tran_intime) |>
  group_by(subject_id) |>
  filter(row_number() == 1) |>
  group_by(discharge_location) |>
  select(gender, age, anchor_year, race_cate, insurance, marital_status_cate, discharge_location) |>
  furniture::table1("Self-Identified Gender" = gender,
                    "Age" = age,
                    "Year of Admission" = anchor_year,
                    "Marital Status" = marital_status_cate,
                    "Self-Identified Race" = race_cate,
                    "Health Insurance" = insurance,
                    caption = "Demographic Characteristics",
                    FUN = NULL, # report mean(sd) for numeric data
                    NAkeep = TRUE,
                    na.rm = FALSE,
                    total = TRUE,
                    test = TRUE
                    )


```

```{r}
# Clinical characteristics of the first admission (Baseline)
inhosp_older_sepsis_home |>
  arrange(subject_id, hadm_id, tran_intime) |>
  group_by(subject_id) |>
  filter(row_number() == 1) |>
  group_by(discharge_location) |>
  select(admission_type_cate, comorbidity, hosp_los, prev90d_hosp_sum, n_icuadmissions, total_icu_los, rehosp30d, discharge_location) |>
  furniture::table1("Admission Type" = admission_type_cate,
                    "Elixhauser Comorbidity Scores" = comorbidity,
                    "Hospital LOS" = hosp_los,
                    "Number of Previous Hospitalizations Within 90 Days" = prev90d_hosp_sum,
                    "Number of ICU Admissions" = n_icuadmissions,
                    "Total ICU LOS" = total_icu_los,
                    "Hospital Readmission Within 30 Days" = rehosp30d,
                    caption = "Clinical Characteristics",
                    FUN = NULL, # report mean(sd) for numeric data
                    NAkeep = TRUE,
                    total = TRUE,
                    test = TRUE
                    )
```

Here, I am going to examine the number of hospitalization for each subject_id and its distribution.

```{r}
# How many hospitalizations did the our cohort had within 2008 - 2019 time frame

## INHOSP_OLDER_SESPSIS_HOME
df <- inhosp_older_sepsis_home |>
  group_by(subject_id) |>
  summarize(n_admission = n()) |>
  arrange(desc(n_admission))

ggplot(df, aes(x = n_admission)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black") +
  labs(title = "Histogram of Number of Admissions", x = "Number of Admissions", y = "Frequency")

df |>
  janitor::tabyl(n_admission) |>
  arrange(desc(n_admission))
  #head(5)
```

## GEE

Based on identified characteristics

```{r}
gee_model <- gee(rehosp30d ~ gender + age + race_cate + insurance + 
                    marital_status_cate + discharge_location + admission_type_cate + 
                    hosp_los + prev90d_hosp_sum + n_icuadmissions + discharge_location,
                data = inhosp_older_sepsis_home,
                id = subject_id,
                family = binomial(link=logit),
                corstr = "exchangeable",
                scale.fix = TRUE,
                scale.value = 1)

summary(gee_model)
```

-   Raw Estimates

```{r}
texreg::knitreg(list(gee_model),
                custom.model.names = "GEE_Exchangeable Model",
                caption = "Estimates on Logit Scale",
                single.row = TRUE,
                digits = 4)
```

-   Exponentiate the Estimates (Odds Ratio Scale)

```{r}
# Helper <extract> functions for exponentiation of parameters from regression models

remotes::install_github("sarbearschwartz/texreghelpr")
library(texreghelpr)
```

```{r}
texreg::knitreg(list(extract_gee_exp(gee_model)),
                custom.model.namess = "GEE_Exchangeable Model",
                caption = "Estimates on Odds-Ratio Scale",
                single.row = TRUE,
                ci.test = 1,
                digits = 3)
```

-   Eestimates on both logit and odds-ratio scale

```{r}
texreg::knitreg(list(gee_model, 
                     texreghelpr::extract_gee_exp(gee_model,
                                                  include.any = FALSE)),
                custom.model.names = c("b (SE)", 
                                       "OR [95% CI]"),
                caption = "GEE Exchangable Model",
                ci.test = 1,
                single.row = TRUE,
                digits = 3)

```

## 
